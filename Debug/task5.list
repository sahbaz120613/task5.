
task5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008230  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  080083c0  080083c0  000093c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800854c  0800854c  0000a06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800854c  0800854c  0000954c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008554  08008554  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008554  08008554  00009554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008558  08008558  00009558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800855c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a06c  2**0
                  CONTENTS
 10 .bss          00004c84  2000006c  2000006c  0000a06c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004cf0  20004cf0  0000a06c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000195a8  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e64  00000000  00000000  00023644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017a0  00000000  00000000  000274a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000123c  00000000  00000000  00028c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005260  00000000  00000000  00029e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019be2  00000000  00000000  0002f0e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d835f  00000000  00000000  00048cc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00121025  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006e0c  00000000  00000000  00121068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00127e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080083a8 	.word	0x080083a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	080083a8 	.word	0x080083a8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <ClearBuffers>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void ClearBuffers(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
    memset(RxData,0, sizeof(RxData));
 80005d0:	221e      	movs	r2, #30
 80005d2:	2100      	movs	r1, #0
 80005d4:	4806      	ldr	r0, [pc, #24]	@ (80005f0 <ClearBuffers+0x24>)
 80005d6:	f006 fe2a 	bl	800722e <memset>
    memset(tempBuffer, 0, sizeof(tempBuffer));
 80005da:	221e      	movs	r2, #30
 80005dc:	2100      	movs	r1, #0
 80005de:	4805      	ldr	r0, [pc, #20]	@ (80005f4 <ClearBuffers+0x28>)
 80005e0:	f006 fe25 	bl	800722e <memset>
    indx= 0;
 80005e4:	4b04      	ldr	r3, [pc, #16]	@ (80005f8 <ClearBuffers+0x2c>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	200001a0 	.word	0x200001a0
 80005f4:	200001c4 	.word	0x200001c4
 80005f8:	200001c0 	.word	0x200001c0

080005fc <calculate_crc8_dvb_s2>:

uint8_t calculate_crc8_dvb_s2(uint8_t *data, uint16_t length)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	460b      	mov	r3, r1
 8000606:	807b      	strh	r3, [r7, #2]
    uint8_t crc = 0x00;
 8000608:	2300      	movs	r3, #0
 800060a:	73fb      	strb	r3, [r7, #15]
    for (uint16_t i = 0; i < length; i++)
 800060c:	2300      	movs	r3, #0
 800060e:	81bb      	strh	r3, [r7, #12]
 8000610:	e023      	b.n	800065a <calculate_crc8_dvb_s2+0x5e>
    {
        crc ^= data[i];
 8000612:	89bb      	ldrh	r3, [r7, #12]
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	4413      	add	r3, r2
 8000618:	781a      	ldrb	r2, [r3, #0]
 800061a:	7bfb      	ldrb	r3, [r7, #15]
 800061c:	4053      	eors	r3, r2
 800061e:	73fb      	strb	r3, [r7, #15]
        for (uint8_t j = 0; j < 8; j++)
 8000620:	2300      	movs	r3, #0
 8000622:	72fb      	strb	r3, [r7, #11]
 8000624:	e013      	b.n	800064e <calculate_crc8_dvb_s2+0x52>
        {
            if (crc & 0x80){
 8000626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800062a:	2b00      	cmp	r3, #0
 800062c:	da09      	bge.n	8000642 <calculate_crc8_dvb_s2+0x46>
                crc = (crc << 1) ^ 0xD5;}
 800062e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000632:	005b      	lsls	r3, r3, #1
 8000634:	b25b      	sxtb	r3, r3
 8000636:	f083 032a 	eor.w	r3, r3, #42	@ 0x2a
 800063a:	43db      	mvns	r3, r3
 800063c:	b25b      	sxtb	r3, r3
 800063e:	73fb      	strb	r3, [r7, #15]
 8000640:	e002      	b.n	8000648 <calculate_crc8_dvb_s2+0x4c>
            else{
                crc <<= 1;}
 8000642:	7bfb      	ldrb	r3, [r7, #15]
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	73fb      	strb	r3, [r7, #15]
        for (uint8_t j = 0; j < 8; j++)
 8000648:	7afb      	ldrb	r3, [r7, #11]
 800064a:	3301      	adds	r3, #1
 800064c:	72fb      	strb	r3, [r7, #11]
 800064e:	7afb      	ldrb	r3, [r7, #11]
 8000650:	2b07      	cmp	r3, #7
 8000652:	d9e8      	bls.n	8000626 <calculate_crc8_dvb_s2+0x2a>
    for (uint16_t i = 0; i < length; i++)
 8000654:	89bb      	ldrh	r3, [r7, #12]
 8000656:	3301      	adds	r3, #1
 8000658:	81bb      	strh	r3, [r7, #12]
 800065a:	89ba      	ldrh	r2, [r7, #12]
 800065c:	887b      	ldrh	r3, [r7, #2]
 800065e:	429a      	cmp	r2, r3
 8000660:	d3d7      	bcc.n	8000612 <calculate_crc8_dvb_s2+0x16>
        }
    }
    return crc;
 8000662:	7bfb      	ldrb	r3, [r7, #15]
}
 8000664:	4618      	mov	r0, r3
 8000666:	3714      	adds	r7, #20
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr

08000670 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b098      	sub	sp, #96	@ 0x60
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	460b      	mov	r3, r1
 800067a:	807b      	strh	r3, [r7, #2]
    indx= Size;
 800067c:	887b      	ldrh	r3, [r7, #2]
 800067e:	4a47      	ldr	r2, [pc, #284]	@ (800079c <HAL_UARTEx_RxEventCallback+0x12c>)
 8000680:	6013      	str	r3, [r2, #0]
    RxData[Size] = '\0';
 8000682:	887b      	ldrh	r3, [r7, #2]
 8000684:	4a46      	ldr	r2, [pc, #280]	@ (80007a0 <HAL_UARTEx_RxEventCallback+0x130>)
 8000686:	2100      	movs	r1, #0
 8000688:	54d1      	strb	r1, [r2, r3]
    char tempBuffer[30];
    strncpy(tempBuffer,(char*)RxData, sizeof(tempBuffer));
 800068a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800068e:	221e      	movs	r2, #30
 8000690:	4943      	ldr	r1, [pc, #268]	@ (80007a0 <HAL_UARTEx_RxEventCallback+0x130>)
 8000692:	4618      	mov	r0, r3
 8000694:	f006 fdd3 	bl	800723e <strncpy>
    tempBuffer[sizeof(tempBuffer)-1] = '\0';
 8000698:	2300      	movs	r3, #0
 800069a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
    char *sbt = strtok(tempBuffer, ":");       // "LED"
 800069e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80006a2:	4940      	ldr	r1, [pc, #256]	@ (80007a4 <HAL_UARTEx_RxEventCallback+0x134>)
 80006a4:	4618      	mov	r0, r3
 80006a6:	f006 fddd 	bl	8007264 <strtok>
 80006aa:	65f8      	str	r0, [r7, #92]	@ 0x5c
    char *kmt_crc = strtok(NULL, ":");         // "ON*7A"
 80006ac:	493d      	ldr	r1, [pc, #244]	@ (80007a4 <HAL_UARTEx_RxEventCallback+0x134>)
 80006ae:	2000      	movs	r0, #0
 80006b0:	f006 fdd8 	bl	8007264 <strtok>
 80006b4:	65b8      	str	r0, [r7, #88]	@ 0x58
    char *kmt = strtok(kmt_crc, "*");          // "ON"
 80006b6:	493c      	ldr	r1, [pc, #240]	@ (80007a8 <HAL_UARTEx_RxEventCallback+0x138>)
 80006b8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80006ba:	f006 fdd3 	bl	8007264 <strtok>
 80006be:	6578      	str	r0, [r7, #84]	@ 0x54
    char *crc = strtok(NULL, "*");             // "7A"
 80006c0:	4939      	ldr	r1, [pc, #228]	@ (80007a8 <HAL_UARTEx_RxEventCallback+0x138>)
 80006c2:	2000      	movs	r0, #0
 80006c4:	f006 fdce 	bl	8007264 <strtok>
 80006c8:	6538      	str	r0, [r7, #80]	@ 0x50
    if( strcmp(sbt, "LED")== 0 )
 80006ca:	4938      	ldr	r1, [pc, #224]	@ (80007ac <HAL_UARTEx_RxEventCallback+0x13c>)
 80006cc:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80006ce:	f7ff fd7f 	bl	80001d0 <strcmp>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d15c      	bne.n	8000792 <HAL_UARTEx_RxEventCallback+0x122>
    {
        char msg[30];
        snprintf(msg, sizeof(msg), "LED:%s", kmt);
 80006d8:	f107 0010 	add.w	r0, r7, #16
 80006dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80006de:	4a34      	ldr	r2, [pc, #208]	@ (80007b0 <HAL_UARTEx_RxEventCallback+0x140>)
 80006e0:	211e      	movs	r1, #30
 80006e2:	f006 fd2b 	bl	800713c <sniprintf>
        uint8_t CalculatedCrc = calculate_crc8_dvb_s2((uint8_t*)msg, strlen(msg));
 80006e6:	f107 0310 	add.w	r3, r7, #16
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff fd7a 	bl	80001e4 <strlen>
 80006f0:	4603      	mov	r3, r0
 80006f2:	b29a      	uxth	r2, r3
 80006f4:	f107 0310 	add.w	r3, r7, #16
 80006f8:	4611      	mov	r1, r2
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff ff7e 	bl	80005fc <calculate_crc8_dvb_s2>
 8000700:	4603      	mov	r3, r0
 8000702:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        if(CalculatedCrc== crc[0])
 8000706:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800070e:	429a      	cmp	r2, r3
 8000710:	d138      	bne.n	8000784 <HAL_UARTEx_RxEventCallback+0x114>
        {
           if(strcmp(kmt,  "ON")== 0)
 8000712:	4928      	ldr	r1, [pc, #160]	@ (80007b4 <HAL_UARTEx_RxEventCallback+0x144>)
 8000714:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8000716:	f7ff fd5b 	bl	80001d0 <strcmp>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d115      	bne.n	800074c <HAL_UARTEx_RxEventCallback+0xdc>
           {
               BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000720:	2300      	movs	r3, #0
 8000722:	60fb      	str	r3, [r7, #12]
               vTaskNotifyGiveFromISR(task1Handle, &xHigherPriorityTaskWoken);
 8000724:	4b24      	ldr	r3, [pc, #144]	@ (80007b8 <HAL_UARTEx_RxEventCallback+0x148>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f107 020c 	add.w	r2, r7, #12
 800072c:	4611      	mov	r1, r2
 800072e:	4618      	mov	r0, r3
 8000730:	f005 fbbe 	bl	8005eb0 <vTaskNotifyGiveFromISR>
               portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d024      	beq.n	8000784 <HAL_UARTEx_RxEventCallback+0x114>
 800073a:	4b20      	ldr	r3, [pc, #128]	@ (80007bc <HAL_UARTEx_RxEventCallback+0x14c>)
 800073c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	f3bf 8f4f 	dsb	sy
 8000746:	f3bf 8f6f 	isb	sy
 800074a:	e01b      	b.n	8000784 <HAL_UARTEx_RxEventCallback+0x114>
              }
              else if(strcmp(kmt,  "OFF")== 0 )
 800074c:	491c      	ldr	r1, [pc, #112]	@ (80007c0 <HAL_UARTEx_RxEventCallback+0x150>)
 800074e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8000750:	f7ff fd3e 	bl	80001d0 <strcmp>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d114      	bne.n	8000784 <HAL_UARTEx_RxEventCallback+0x114>
              {
                 BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
                 vTaskNotifyGiveFromISR(task2Handle, &xHigherPriorityTaskWoken);
 800075e:	4b19      	ldr	r3, [pc, #100]	@ (80007c4 <HAL_UARTEx_RxEventCallback+0x154>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f107 0208 	add.w	r2, r7, #8
 8000766:	4611      	mov	r1, r2
 8000768:	4618      	mov	r0, r3
 800076a:	f005 fba1 	bl	8005eb0 <vTaskNotifyGiveFromISR>
                 portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d007      	beq.n	8000784 <HAL_UARTEx_RxEventCallback+0x114>
 8000774:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <HAL_UARTEx_RxEventCallback+0x14c>)
 8000776:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	f3bf 8f4f 	dsb	sy
 8000780:	f3bf 8f6f 	isb	sy
              }
        }
     ClearBuffers();
 8000784:	f7ff ff22 	bl	80005cc <ClearBuffers>
     HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxData, sizeof(RxData));
 8000788:	221e      	movs	r2, #30
 800078a:	4905      	ldr	r1, [pc, #20]	@ (80007a0 <HAL_UARTEx_RxEventCallback+0x130>)
 800078c:	480e      	ldr	r0, [pc, #56]	@ (80007c8 <HAL_UARTEx_RxEventCallback+0x158>)
 800078e:	f002 fcbd 	bl	800310c <HAL_UARTEx_ReceiveToIdle_DMA>
    }
}
 8000792:	bf00      	nop
 8000794:	3760      	adds	r7, #96	@ 0x60
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200001c0 	.word	0x200001c0
 80007a0:	200001a0 	.word	0x200001a0
 80007a4:	080083d0 	.word	0x080083d0
 80007a8:	080083d4 	.word	0x080083d4
 80007ac:	080083d8 	.word	0x080083d8
 80007b0:	080083dc 	.word	0x080083dc
 80007b4:	080083e4 	.word	0x080083e4
 80007b8:	20000198 	.word	0x20000198
 80007bc:	e000ed04 	.word	0xe000ed04
 80007c0:	080083e8 	.word	0x080083e8
 80007c4:	2000019c 	.word	0x2000019c
 80007c8:	20000090 	.word	0x20000090

080007cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d0:	f000 fc80 	bl	80010d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d4:	f000 f834 	bl	8000840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d8:	f000 f8f6 	bl	80009c8 <MX_GPIO_Init>
  MX_DMA_Init();
 80007dc:	f000 f8cc 	bl	8000978 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80007e0:	f000 f8a0 	bl	8000924 <MX_USART2_UART_Init>
  MX_CRC_Init();
 80007e4:	f000 f88a 	bl	80008fc <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxData, sizeof(RxData));
 80007e8:	221e      	movs	r2, #30
 80007ea:	490d      	ldr	r1, [pc, #52]	@ (8000820 <main+0x54>)
 80007ec:	480d      	ldr	r0, [pc, #52]	@ (8000824 <main+0x58>)
 80007ee:	f002 fc8d 	bl	800310c <HAL_UARTEx_ReceiveToIdle_DMA>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007f2:	f003 fdd5 	bl	80043a0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of task1 */
  task1Handle = osThreadNew(taskFunction1, NULL, &task1_attributes);
 80007f6:	4a0c      	ldr	r2, [pc, #48]	@ (8000828 <main+0x5c>)
 80007f8:	2100      	movs	r1, #0
 80007fa:	480c      	ldr	r0, [pc, #48]	@ (800082c <main+0x60>)
 80007fc:	f003 fe1a 	bl	8004434 <osThreadNew>
 8000800:	4603      	mov	r3, r0
 8000802:	4a0b      	ldr	r2, [pc, #44]	@ (8000830 <main+0x64>)
 8000804:	6013      	str	r3, [r2, #0]

  /* creation of task2 */
  task2Handle = osThreadNew(taskFunction2, NULL, &task2_attributes);
 8000806:	4a0b      	ldr	r2, [pc, #44]	@ (8000834 <main+0x68>)
 8000808:	2100      	movs	r1, #0
 800080a:	480b      	ldr	r0, [pc, #44]	@ (8000838 <main+0x6c>)
 800080c:	f003 fe12 	bl	8004434 <osThreadNew>
 8000810:	4603      	mov	r3, r0
 8000812:	4a0a      	ldr	r2, [pc, #40]	@ (800083c <main+0x70>)
 8000814:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000816:	f003 fde7 	bl	80043e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800081a:	bf00      	nop
 800081c:	e7fd      	b.n	800081a <main+0x4e>
 800081e:	bf00      	nop
 8000820:	200001a0 	.word	0x200001a0
 8000824:	20000090 	.word	0x20000090
 8000828:	08008404 	.word	0x08008404
 800082c:	08000a51 	.word	0x08000a51
 8000830:	20000198 	.word	0x20000198
 8000834:	08008428 	.word	0x08008428
 8000838:	08000a7d 	.word	0x08000a7d
 800083c:	2000019c 	.word	0x2000019c

08000840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b094      	sub	sp, #80	@ 0x50
 8000844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000846:	f107 0320 	add.w	r3, r7, #32
 800084a:	2230      	movs	r2, #48	@ 0x30
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f006 fced 	bl	800722e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000854:	f107 030c 	add.w	r3, r7, #12
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000864:	2300      	movs	r3, #0
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	4b22      	ldr	r3, [pc, #136]	@ (80008f4 <SystemClock_Config+0xb4>)
 800086a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086c:	4a21      	ldr	r2, [pc, #132]	@ (80008f4 <SystemClock_Config+0xb4>)
 800086e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000872:	6413      	str	r3, [r2, #64]	@ 0x40
 8000874:	4b1f      	ldr	r3, [pc, #124]	@ (80008f4 <SystemClock_Config+0xb4>)
 8000876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000878:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000880:	2300      	movs	r3, #0
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	4b1c      	ldr	r3, [pc, #112]	@ (80008f8 <SystemClock_Config+0xb8>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a1b      	ldr	r2, [pc, #108]	@ (80008f8 <SystemClock_Config+0xb8>)
 800088a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800088e:	6013      	str	r3, [r2, #0]
 8000890:	4b19      	ldr	r3, [pc, #100]	@ (80008f8 <SystemClock_Config+0xb8>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800089c:	2302      	movs	r3, #2
 800089e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008a0:	2301      	movs	r3, #1
 80008a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a4:	2310      	movs	r3, #16
 80008a6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008a8:	2300      	movs	r3, #0
 80008aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ac:	f107 0320 	add.w	r3, r7, #32
 80008b0:	4618      	mov	r0, r3
 80008b2:	f001 fcb5 	bl	8002220 <HAL_RCC_OscConfig>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80008bc:	f000 f906 	bl	8000acc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c0:	230f      	movs	r3, #15
 80008c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008c4:	2300      	movs	r3, #0
 80008c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008d4:	f107 030c 	add.w	r3, r7, #12
 80008d8:	2100      	movs	r1, #0
 80008da:	4618      	mov	r0, r3
 80008dc:	f001 ff18 	bl	8002710 <HAL_RCC_ClockConfig>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80008e6:	f000 f8f1 	bl	8000acc <Error_Handler>
  }
}
 80008ea:	bf00      	nop
 80008ec:	3750      	adds	r7, #80	@ 0x50
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40007000 	.word	0x40007000

080008fc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000900:	4b06      	ldr	r3, [pc, #24]	@ (800091c <MX_CRC_Init+0x20>)
 8000902:	4a07      	ldr	r2, [pc, #28]	@ (8000920 <MX_CRC_Init+0x24>)
 8000904:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000906:	4805      	ldr	r0, [pc, #20]	@ (800091c <MX_CRC_Init+0x20>)
 8000908:	f000 fd08 	bl	800131c <HAL_CRC_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000912:	f000 f8db 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000088 	.word	0x20000088
 8000920:	40023000 	.word	0x40023000

08000924 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000928:	4b11      	ldr	r3, [pc, #68]	@ (8000970 <MX_USART2_UART_Init+0x4c>)
 800092a:	4a12      	ldr	r2, [pc, #72]	@ (8000974 <MX_USART2_UART_Init+0x50>)
 800092c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800092e:	4b10      	ldr	r3, [pc, #64]	@ (8000970 <MX_USART2_UART_Init+0x4c>)
 8000930:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000934:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000936:	4b0e      	ldr	r3, [pc, #56]	@ (8000970 <MX_USART2_UART_Init+0x4c>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800093c:	4b0c      	ldr	r3, [pc, #48]	@ (8000970 <MX_USART2_UART_Init+0x4c>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000942:	4b0b      	ldr	r3, [pc, #44]	@ (8000970 <MX_USART2_UART_Init+0x4c>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000948:	4b09      	ldr	r3, [pc, #36]	@ (8000970 <MX_USART2_UART_Init+0x4c>)
 800094a:	220c      	movs	r2, #12
 800094c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094e:	4b08      	ldr	r3, [pc, #32]	@ (8000970 <MX_USART2_UART_Init+0x4c>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000954:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <MX_USART2_UART_Init+0x4c>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800095a:	4805      	ldr	r0, [pc, #20]	@ (8000970 <MX_USART2_UART_Init+0x4c>)
 800095c:	f002 fb86 	bl	800306c <HAL_UART_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000966:	f000 f8b1 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000090 	.word	0x20000090
 8000974:	40004400 	.word	0x40004400

08000978 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	4b10      	ldr	r3, [pc, #64]	@ (80009c4 <MX_DMA_Init+0x4c>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	4a0f      	ldr	r2, [pc, #60]	@ (80009c4 <MX_DMA_Init+0x4c>)
 8000988:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800098c:	6313      	str	r3, [r2, #48]	@ 0x30
 800098e:	4b0d      	ldr	r3, [pc, #52]	@ (80009c4 <MX_DMA_Init+0x4c>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	2105      	movs	r1, #5
 800099e:	2010      	movs	r0, #16
 80009a0:	f000 fc92 	bl	80012c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80009a4:	2010      	movs	r0, #16
 80009a6:	f000 fcab 	bl	8001300 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2105      	movs	r1, #5
 80009ae:	2011      	movs	r0, #17
 80009b0:	f000 fc8a 	bl	80012c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80009b4:	2011      	movs	r0, #17
 80009b6:	f000 fca3 	bl	8001300 <HAL_NVIC_EnableIRQ>

}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800

080009c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b088      	sub	sp, #32
 80009cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ce:	f107 030c 	add.w	r3, r7, #12
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
 80009dc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	4b19      	ldr	r3, [pc, #100]	@ (8000a48 <MX_GPIO_Init+0x80>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	4a18      	ldr	r2, [pc, #96]	@ (8000a48 <MX_GPIO_Init+0x80>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ee:	4b16      	ldr	r3, [pc, #88]	@ (8000a48 <MX_GPIO_Init+0x80>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	4b12      	ldr	r3, [pc, #72]	@ (8000a48 <MX_GPIO_Init+0x80>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	4a11      	ldr	r2, [pc, #68]	@ (8000a48 <MX_GPIO_Init+0x80>)
 8000a04:	f043 0308 	orr.w	r3, r3, #8
 8000a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a48 <MX_GPIO_Init+0x80>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	f003 0308 	and.w	r3, r3, #8
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000a1c:	480b      	ldr	r0, [pc, #44]	@ (8000a4c <MX_GPIO_Init+0x84>)
 8000a1e:	f001 fbcb 	bl	80021b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000a22:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000a26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a34:	f107 030c 	add.w	r3, r7, #12
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4804      	ldr	r0, [pc, #16]	@ (8000a4c <MX_GPIO_Init+0x84>)
 8000a3c:	f001 fa20 	bl	8001e80 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a40:	bf00      	nop
 8000a42:	3720      	adds	r7, #32
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40020c00 	.word	0x40020c00

08000a50 <taskFunction1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_taskFunction1 */
void taskFunction1(void *argument)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  for(;;)
  {
      if( ulTaskNotifyTake(pdTRUE, portMAX_DELAY) !=0)
 8000a58:	f04f 31ff 	mov.w	r1, #4294967295
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	f005 f9df 	bl	8005e20 <ulTaskNotifyTake>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d0f7      	beq.n	8000a58 <taskFunction1+0x8>
      {
          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a6e:	4802      	ldr	r0, [pc, #8]	@ (8000a78 <taskFunction1+0x28>)
 8000a70:	f001 fba2 	bl	80021b8 <HAL_GPIO_WritePin>
      if( ulTaskNotifyTake(pdTRUE, portMAX_DELAY) !=0)
 8000a74:	e7f0      	b.n	8000a58 <taskFunction1+0x8>
 8000a76:	bf00      	nop
 8000a78:	40020c00 	.word	0x40020c00

08000a7c <taskFunction2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_taskFunction2 */
void taskFunction2(void *argument)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN taskFunction2 */
  /* Infinite loop */

  for(;;)
  {
      if( ulTaskNotifyTake(pdTRUE, portMAX_DELAY) != 0)
 8000a84:	f04f 31ff 	mov.w	r1, #4294967295
 8000a88:	2001      	movs	r0, #1
 8000a8a:	f005 f9c9 	bl	8005e20 <ulTaskNotifyTake>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d0f7      	beq.n	8000a84 <taskFunction2+0x8>
      {
          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a9a:	4802      	ldr	r0, [pc, #8]	@ (8000aa4 <taskFunction2+0x28>)
 8000a9c:	f001 fb8c 	bl	80021b8 <HAL_GPIO_WritePin>
      if( ulTaskNotifyTake(pdTRUE, portMAX_DELAY) != 0)
 8000aa0:	e7f0      	b.n	8000a84 <taskFunction2+0x8>
 8000aa2:	bf00      	nop
 8000aa4:	40020c00 	.word	0x40020c00

08000aa8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a04      	ldr	r2, [pc, #16]	@ (8000ac8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d101      	bne.n	8000abe <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000aba:	f000 fb2d 	bl	8001118 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40001400 	.word	0x40001400

08000acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad0:	b672      	cpsid	i
}
 8000ad2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <Error_Handler+0x8>

08000ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	4b22      	ldr	r3, [pc, #136]	@ (8000b6c <HAL_MspInit+0x94>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ae6:	4a21      	ldr	r2, [pc, #132]	@ (8000b6c <HAL_MspInit+0x94>)
 8000ae8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aee:	4b1f      	ldr	r3, [pc, #124]	@ (8000b6c <HAL_MspInit+0x94>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	603b      	str	r3, [r7, #0]
 8000afe:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <HAL_MspInit+0x94>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b02:	4a1a      	ldr	r2, [pc, #104]	@ (8000b6c <HAL_MspInit+0x94>)
 8000b04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b0a:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <HAL_MspInit+0x94>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	210f      	movs	r1, #15
 8000b1a:	f06f 0001 	mvn.w	r0, #1
 8000b1e:	f000 fbd3 	bl	80012c8 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2105      	movs	r1, #5
 8000b26:	2001      	movs	r0, #1
 8000b28:	f000 fbce 	bl	80012c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	f000 fbe7 	bl	8001300 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2105      	movs	r1, #5
 8000b36:	2004      	movs	r0, #4
 8000b38:	f000 fbc6 	bl	80012c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8000b3c:	2004      	movs	r0, #4
 8000b3e:	f000 fbdf 	bl	8001300 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2105      	movs	r1, #5
 8000b46:	2005      	movs	r0, #5
 8000b48:	f000 fbbe 	bl	80012c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000b4c:	2005      	movs	r0, #5
 8000b4e:	f000 fbd7 	bl	8001300 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 5, 0);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2105      	movs	r1, #5
 8000b56:	2051      	movs	r0, #81	@ 0x51
 8000b58:	f000 fbb6 	bl	80012c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8000b5c:	2051      	movs	r0, #81	@ 0x51
 8000b5e:	f000 fbcf 	bl	8001300 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40023800 	.word	0x40023800

08000b70 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a0b      	ldr	r2, [pc, #44]	@ (8000bac <HAL_CRC_MspInit+0x3c>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d10d      	bne.n	8000b9e <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb0 <HAL_CRC_MspInit+0x40>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	4a09      	ldr	r2, [pc, #36]	@ (8000bb0 <HAL_CRC_MspInit+0x40>)
 8000b8c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b92:	4b07      	ldr	r3, [pc, #28]	@ (8000bb0 <HAL_CRC_MspInit+0x40>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8000b9e:	bf00      	nop
 8000ba0:	3714      	adds	r7, #20
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	40023000 	.word	0x40023000
 8000bb0:	40023800 	.word	0x40023800

08000bb4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08a      	sub	sp, #40	@ 0x28
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a4b      	ldr	r2, [pc, #300]	@ (8000d00 <HAL_UART_MspInit+0x14c>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	f040 8090 	bne.w	8000cf8 <HAL_UART_MspInit+0x144>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bd8:	2300      	movs	r3, #0
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	4b49      	ldr	r3, [pc, #292]	@ (8000d04 <HAL_UART_MspInit+0x150>)
 8000bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be0:	4a48      	ldr	r2, [pc, #288]	@ (8000d04 <HAL_UART_MspInit+0x150>)
 8000be2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000be6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000be8:	4b46      	ldr	r3, [pc, #280]	@ (8000d04 <HAL_UART_MspInit+0x150>)
 8000bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	4b42      	ldr	r3, [pc, #264]	@ (8000d04 <HAL_UART_MspInit+0x150>)
 8000bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfc:	4a41      	ldr	r2, [pc, #260]	@ (8000d04 <HAL_UART_MspInit+0x150>)
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c04:	4b3f      	ldr	r3, [pc, #252]	@ (8000d04 <HAL_UART_MspInit+0x150>)
 8000c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c08:	f003 0301 	and.w	r3, r3, #1
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c10:	230c      	movs	r3, #12
 8000c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	2302      	movs	r3, #2
 8000c16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c20:	2307      	movs	r3, #7
 8000c22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4837      	ldr	r0, [pc, #220]	@ (8000d08 <HAL_UART_MspInit+0x154>)
 8000c2c:	f001 f928 	bl	8001e80 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000c30:	4b36      	ldr	r3, [pc, #216]	@ (8000d0c <HAL_UART_MspInit+0x158>)
 8000c32:	4a37      	ldr	r2, [pc, #220]	@ (8000d10 <HAL_UART_MspInit+0x15c>)
 8000c34:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000c36:	4b35      	ldr	r3, [pc, #212]	@ (8000d0c <HAL_UART_MspInit+0x158>)
 8000c38:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000c3c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c3e:	4b33      	ldr	r3, [pc, #204]	@ (8000d0c <HAL_UART_MspInit+0x158>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c44:	4b31      	ldr	r3, [pc, #196]	@ (8000d0c <HAL_UART_MspInit+0x158>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c4a:	4b30      	ldr	r3, [pc, #192]	@ (8000d0c <HAL_UART_MspInit+0x158>)
 8000c4c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c50:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c52:	4b2e      	ldr	r3, [pc, #184]	@ (8000d0c <HAL_UART_MspInit+0x158>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c58:	4b2c      	ldr	r3, [pc, #176]	@ (8000d0c <HAL_UART_MspInit+0x158>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000c5e:	4b2b      	ldr	r3, [pc, #172]	@ (8000d0c <HAL_UART_MspInit+0x158>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c64:	4b29      	ldr	r3, [pc, #164]	@ (8000d0c <HAL_UART_MspInit+0x158>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c6a:	4b28      	ldr	r3, [pc, #160]	@ (8000d0c <HAL_UART_MspInit+0x158>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000c70:	4826      	ldr	r0, [pc, #152]	@ (8000d0c <HAL_UART_MspInit+0x158>)
 8000c72:	f000 fb6f 	bl	8001354 <HAL_DMA_Init>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000c7c:	f7ff ff26 	bl	8000acc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a22      	ldr	r2, [pc, #136]	@ (8000d0c <HAL_UART_MspInit+0x158>)
 8000c84:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c86:	4a21      	ldr	r2, [pc, #132]	@ (8000d0c <HAL_UART_MspInit+0x158>)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000c8c:	4b21      	ldr	r3, [pc, #132]	@ (8000d14 <HAL_UART_MspInit+0x160>)
 8000c8e:	4a22      	ldr	r2, [pc, #136]	@ (8000d18 <HAL_UART_MspInit+0x164>)
 8000c90:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000c92:	4b20      	ldr	r3, [pc, #128]	@ (8000d14 <HAL_UART_MspInit+0x160>)
 8000c94:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000c98:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000d14 <HAL_UART_MspInit+0x160>)
 8000c9c:	2240      	movs	r2, #64	@ 0x40
 8000c9e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ca0:	4b1c      	ldr	r3, [pc, #112]	@ (8000d14 <HAL_UART_MspInit+0x160>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d14 <HAL_UART_MspInit+0x160>)
 8000ca8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cac:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cae:	4b19      	ldr	r3, [pc, #100]	@ (8000d14 <HAL_UART_MspInit+0x160>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cb4:	4b17      	ldr	r3, [pc, #92]	@ (8000d14 <HAL_UART_MspInit+0x160>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000cba:	4b16      	ldr	r3, [pc, #88]	@ (8000d14 <HAL_UART_MspInit+0x160>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000cc0:	4b14      	ldr	r3, [pc, #80]	@ (8000d14 <HAL_UART_MspInit+0x160>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cc6:	4b13      	ldr	r3, [pc, #76]	@ (8000d14 <HAL_UART_MspInit+0x160>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000ccc:	4811      	ldr	r0, [pc, #68]	@ (8000d14 <HAL_UART_MspInit+0x160>)
 8000cce:	f000 fb41 	bl	8001354 <HAL_DMA_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8000cd8:	f7ff fef8 	bl	8000acc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4a0d      	ldr	r2, [pc, #52]	@ (8000d14 <HAL_UART_MspInit+0x160>)
 8000ce0:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ce2:	4a0c      	ldr	r2, [pc, #48]	@ (8000d14 <HAL_UART_MspInit+0x160>)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2105      	movs	r1, #5
 8000cec:	2026      	movs	r0, #38	@ 0x26
 8000cee:	f000 faeb 	bl	80012c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cf2:	2026      	movs	r0, #38	@ 0x26
 8000cf4:	f000 fb04 	bl	8001300 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000cf8:	bf00      	nop
 8000cfa:	3728      	adds	r7, #40	@ 0x28
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40004400 	.word	0x40004400
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40020000 	.word	0x40020000
 8000d0c:	200000d8 	.word	0x200000d8
 8000d10:	40026088 	.word	0x40026088
 8000d14:	20000138 	.word	0x20000138
 8000d18:	400260a0 	.word	0x400260a0

08000d1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08e      	sub	sp, #56	@ 0x38
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d24:	2300      	movs	r3, #0
 8000d26:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	4b33      	ldr	r3, [pc, #204]	@ (8000e00 <HAL_InitTick+0xe4>)
 8000d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d34:	4a32      	ldr	r2, [pc, #200]	@ (8000e00 <HAL_InitTick+0xe4>)
 8000d36:	f043 0320 	orr.w	r3, r3, #32
 8000d3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d3c:	4b30      	ldr	r3, [pc, #192]	@ (8000e00 <HAL_InitTick+0xe4>)
 8000d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d40:	f003 0320 	and.w	r3, r3, #32
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d48:	f107 0210 	add.w	r2, r7, #16
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	4611      	mov	r1, r2
 8000d52:	4618      	mov	r0, r3
 8000d54:	f001 febc 	bl	8002ad0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d58:	6a3b      	ldr	r3, [r7, #32]
 8000d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d103      	bne.n	8000d6a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d62:	f001 fe8d 	bl	8002a80 <HAL_RCC_GetPCLK1Freq>
 8000d66:	6378      	str	r0, [r7, #52]	@ 0x34
 8000d68:	e004      	b.n	8000d74 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d6a:	f001 fe89 	bl	8002a80 <HAL_RCC_GetPCLK1Freq>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d76:	4a23      	ldr	r2, [pc, #140]	@ (8000e04 <HAL_InitTick+0xe8>)
 8000d78:	fba2 2303 	umull	r2, r3, r2, r3
 8000d7c:	0c9b      	lsrs	r3, r3, #18
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000d82:	4b21      	ldr	r3, [pc, #132]	@ (8000e08 <HAL_InitTick+0xec>)
 8000d84:	4a21      	ldr	r2, [pc, #132]	@ (8000e0c <HAL_InitTick+0xf0>)
 8000d86:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000d88:	4b1f      	ldr	r3, [pc, #124]	@ (8000e08 <HAL_InitTick+0xec>)
 8000d8a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d8e:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000d90:	4a1d      	ldr	r2, [pc, #116]	@ (8000e08 <HAL_InitTick+0xec>)
 8000d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d94:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000d96:	4b1c      	ldr	r3, [pc, #112]	@ (8000e08 <HAL_InitTick+0xec>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e08 <HAL_InitTick+0xec>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da2:	4b19      	ldr	r3, [pc, #100]	@ (8000e08 <HAL_InitTick+0xec>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8000da8:	4817      	ldr	r0, [pc, #92]	@ (8000e08 <HAL_InitTick+0xec>)
 8000daa:	f001 fec3 	bl	8002b34 <HAL_TIM_Base_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000db4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d11b      	bne.n	8000df4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8000dbc:	4812      	ldr	r0, [pc, #72]	@ (8000e08 <HAL_InitTick+0xec>)
 8000dbe:	f001 ff13 	bl	8002be8 <HAL_TIM_Base_Start_IT>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000dc8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d111      	bne.n	8000df4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000dd0:	2037      	movs	r0, #55	@ 0x37
 8000dd2:	f000 fa95 	bl	8001300 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2b0f      	cmp	r3, #15
 8000dda:	d808      	bhi.n	8000dee <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	6879      	ldr	r1, [r7, #4]
 8000de0:	2037      	movs	r0, #55	@ 0x37
 8000de2:	f000 fa71 	bl	80012c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000de6:	4a0a      	ldr	r2, [pc, #40]	@ (8000e10 <HAL_InitTick+0xf4>)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6013      	str	r3, [r2, #0]
 8000dec:	e002      	b.n	8000df4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000df4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3738      	adds	r7, #56	@ 0x38
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40023800 	.word	0x40023800
 8000e04:	431bde83 	.word	0x431bde83
 8000e08:	200001e4 	.word	0x200001e4
 8000e0c:	40001400 	.word	0x40001400
 8000e10:	20000004 	.word	0x20000004

08000e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <NMI_Handler+0x4>

08000e1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <HardFault_Handler+0x4>

08000e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <MemManage_Handler+0x4>

08000e2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <BusFault_Handler+0x4>

08000e34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e38:	bf00      	nop
 8000e3a:	e7fd      	b.n	8000e38 <UsageFault_Handler+0x4>

08000e3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8000e4e:	f001 f9cd 	bl	80021ec <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8000e5a:	f000 fe7d 	bl	8001b58 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000e74:	4802      	ldr	r0, [pc, #8]	@ (8000e80 <DMA1_Stream5_IRQHandler+0x10>)
 8000e76:	f000 fc05 	bl	8001684 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	200000d8 	.word	0x200000d8

08000e84 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000e88:	4802      	ldr	r0, [pc, #8]	@ (8000e94 <DMA1_Stream6_IRQHandler+0x10>)
 8000e8a:	f000 fbfb 	bl	8001684 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000138 	.word	0x20000138

08000e98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e9c:	4802      	ldr	r0, [pc, #8]	@ (8000ea8 <USART2_IRQHandler+0x10>)
 8000e9e:	f002 f98f 	bl	80031c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000090 	.word	0x20000090

08000eac <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000eb0:	4802      	ldr	r0, [pc, #8]	@ (8000ebc <TIM7_IRQHandler+0x10>)
 8000eb2:	f001 ff09 	bl	8002cc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	200001e4 	.word	0x200001e4

08000ec0 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  return 1;
 8000ed2:	2301      	movs	r3, #1
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <_kill>:

int _kill(int pid, int sig)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
 8000ee6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ee8:	f006 fa5e 	bl	80073a8 <__errno>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2216      	movs	r2, #22
 8000ef0:	601a      	str	r2, [r3, #0]
  return -1;
 8000ef2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <_exit>:

void _exit (int status)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f06:	f04f 31ff 	mov.w	r1, #4294967295
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff ffe7 	bl	8000ede <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <_exit+0x12>

08000f14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
 8000f24:	e00a      	b.n	8000f3c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f26:	f3af 8000 	nop.w
 8000f2a:	4601      	mov	r1, r0
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	1c5a      	adds	r2, r3, #1
 8000f30:	60ba      	str	r2, [r7, #8]
 8000f32:	b2ca      	uxtb	r2, r1
 8000f34:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	697a      	ldr	r2, [r7, #20]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	dbf0      	blt.n	8000f26 <_read+0x12>
  }

  return len;
 8000f44:	687b      	ldr	r3, [r7, #4]
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b086      	sub	sp, #24
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	60f8      	str	r0, [r7, #12]
 8000f56:	60b9      	str	r1, [r7, #8]
 8000f58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
 8000f5e:	e009      	b.n	8000f74 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	1c5a      	adds	r2, r3, #1
 8000f64:	60ba      	str	r2, [r7, #8]
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	3301      	adds	r3, #1
 8000f72:	617b      	str	r3, [r7, #20]
 8000f74:	697a      	ldr	r2, [r7, #20]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	dbf1      	blt.n	8000f60 <_write+0x12>
  }
  return len;
 8000f7c:	687b      	ldr	r3, [r7, #4]
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <_close>:

int _close(int file)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	b083      	sub	sp, #12
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
 8000fa6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fae:	605a      	str	r2, [r3, #4]
  return 0;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <_isatty>:

int _isatty(int file)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b083      	sub	sp, #12
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fc6:	2301      	movs	r3, #1
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
	...

08000ff0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff8:	4a14      	ldr	r2, [pc, #80]	@ (800104c <_sbrk+0x5c>)
 8000ffa:	4b15      	ldr	r3, [pc, #84]	@ (8001050 <_sbrk+0x60>)
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001004:	4b13      	ldr	r3, [pc, #76]	@ (8001054 <_sbrk+0x64>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d102      	bne.n	8001012 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800100c:	4b11      	ldr	r3, [pc, #68]	@ (8001054 <_sbrk+0x64>)
 800100e:	4a12      	ldr	r2, [pc, #72]	@ (8001058 <_sbrk+0x68>)
 8001010:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001012:	4b10      	ldr	r3, [pc, #64]	@ (8001054 <_sbrk+0x64>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	429a      	cmp	r2, r3
 800101e:	d207      	bcs.n	8001030 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001020:	f006 f9c2 	bl	80073a8 <__errno>
 8001024:	4603      	mov	r3, r0
 8001026:	220c      	movs	r2, #12
 8001028:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800102a:	f04f 33ff 	mov.w	r3, #4294967295
 800102e:	e009      	b.n	8001044 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001030:	4b08      	ldr	r3, [pc, #32]	@ (8001054 <_sbrk+0x64>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001036:	4b07      	ldr	r3, [pc, #28]	@ (8001054 <_sbrk+0x64>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4413      	add	r3, r2
 800103e:	4a05      	ldr	r2, [pc, #20]	@ (8001054 <_sbrk+0x64>)
 8001040:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001042:	68fb      	ldr	r3, [r7, #12]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20020000 	.word	0x20020000
 8001050:	00000400 	.word	0x00000400
 8001054:	2000022c 	.word	0x2000022c
 8001058:	20004cf0 	.word	0x20004cf0

0800105c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001060:	4b06      	ldr	r3, [pc, #24]	@ (800107c <SystemInit+0x20>)
 8001062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001066:	4a05      	ldr	r2, [pc, #20]	@ (800107c <SystemInit+0x20>)
 8001068:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800106c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001080:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010b8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001084:	f7ff ffea 	bl	800105c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001088:	480c      	ldr	r0, [pc, #48]	@ (80010bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800108a:	490d      	ldr	r1, [pc, #52]	@ (80010c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800108c:	4a0d      	ldr	r2, [pc, #52]	@ (80010c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001090:	e002      	b.n	8001098 <LoopCopyDataInit>

08001092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001096:	3304      	adds	r3, #4

08001098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800109a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800109c:	d3f9      	bcc.n	8001092 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109e:	4a0a      	ldr	r2, [pc, #40]	@ (80010c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010a0:	4c0a      	ldr	r4, [pc, #40]	@ (80010cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80010a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a4:	e001      	b.n	80010aa <LoopFillZerobss>

080010a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a8:	3204      	adds	r2, #4

080010aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010ac:	d3fb      	bcc.n	80010a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ae:	f006 f981 	bl	80073b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010b2:	f7ff fb8b 	bl	80007cc <main>
  bx  lr    
 80010b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80010c4:	0800855c 	.word	0x0800855c
  ldr r2, =_sbss
 80010c8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80010cc:	20004cf0 	.word	0x20004cf0

080010d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010d0:	e7fe      	b.n	80010d0 <ADC_IRQHandler>
	...

080010d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001114 <HAL_Init+0x40>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001114 <HAL_Init+0x40>)
 80010de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001114 <HAL_Init+0x40>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001114 <HAL_Init+0x40>)
 80010ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f0:	4b08      	ldr	r3, [pc, #32]	@ (8001114 <HAL_Init+0x40>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a07      	ldr	r2, [pc, #28]	@ (8001114 <HAL_Init+0x40>)
 80010f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010fc:	2003      	movs	r0, #3
 80010fe:	f000 f8d8 	bl	80012b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001102:	200f      	movs	r0, #15
 8001104:	f7ff fe0a 	bl	8000d1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001108:	f7ff fce6 	bl	8000ad8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40023c00 	.word	0x40023c00

08001118 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800111c:	4b06      	ldr	r3, [pc, #24]	@ (8001138 <HAL_IncTick+0x20>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	461a      	mov	r2, r3
 8001122:	4b06      	ldr	r3, [pc, #24]	@ (800113c <HAL_IncTick+0x24>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4413      	add	r3, r2
 8001128:	4a04      	ldr	r2, [pc, #16]	@ (800113c <HAL_IncTick+0x24>)
 800112a:	6013      	str	r3, [r2, #0]
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	20000008 	.word	0x20000008
 800113c:	20000230 	.word	0x20000230

08001140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return uwTick;
 8001144:	4b03      	ldr	r3, [pc, #12]	@ (8001154 <HAL_GetTick+0x14>)
 8001146:	681b      	ldr	r3, [r3, #0]
}
 8001148:	4618      	mov	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	20000230 	.word	0x20000230

08001158 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001168:	4b0c      	ldr	r3, [pc, #48]	@ (800119c <__NVIC_SetPriorityGrouping+0x44>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001174:	4013      	ands	r3, r2
 8001176:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001180:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001184:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001188:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800118a:	4a04      	ldr	r2, [pc, #16]	@ (800119c <__NVIC_SetPriorityGrouping+0x44>)
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	60d3      	str	r3, [r2, #12]
}
 8001190:	bf00      	nop
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a4:	4b04      	ldr	r3, [pc, #16]	@ (80011b8 <__NVIC_GetPriorityGrouping+0x18>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	0a1b      	lsrs	r3, r3, #8
 80011aa:	f003 0307 	and.w	r3, r3, #7
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	db0b      	blt.n	80011e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	f003 021f 	and.w	r2, r3, #31
 80011d4:	4907      	ldr	r1, [pc, #28]	@ (80011f4 <__NVIC_EnableIRQ+0x38>)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	095b      	lsrs	r3, r3, #5
 80011dc:	2001      	movs	r0, #1
 80011de:	fa00 f202 	lsl.w	r2, r0, r2
 80011e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000e100 	.word	0xe000e100

080011f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	6039      	str	r1, [r7, #0]
 8001202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001208:	2b00      	cmp	r3, #0
 800120a:	db0a      	blt.n	8001222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	b2da      	uxtb	r2, r3
 8001210:	490c      	ldr	r1, [pc, #48]	@ (8001244 <__NVIC_SetPriority+0x4c>)
 8001212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001216:	0112      	lsls	r2, r2, #4
 8001218:	b2d2      	uxtb	r2, r2
 800121a:	440b      	add	r3, r1
 800121c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001220:	e00a      	b.n	8001238 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	b2da      	uxtb	r2, r3
 8001226:	4908      	ldr	r1, [pc, #32]	@ (8001248 <__NVIC_SetPriority+0x50>)
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	f003 030f 	and.w	r3, r3, #15
 800122e:	3b04      	subs	r3, #4
 8001230:	0112      	lsls	r2, r2, #4
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	440b      	add	r3, r1
 8001236:	761a      	strb	r2, [r3, #24]
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000e100 	.word	0xe000e100
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800124c:	b480      	push	{r7}
 800124e:	b089      	sub	sp, #36	@ 0x24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f1c3 0307 	rsb	r3, r3, #7
 8001266:	2b04      	cmp	r3, #4
 8001268:	bf28      	it	cs
 800126a:	2304      	movcs	r3, #4
 800126c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	3304      	adds	r3, #4
 8001272:	2b06      	cmp	r3, #6
 8001274:	d902      	bls.n	800127c <NVIC_EncodePriority+0x30>
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3b03      	subs	r3, #3
 800127a:	e000      	b.n	800127e <NVIC_EncodePriority+0x32>
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001280:	f04f 32ff 	mov.w	r2, #4294967295
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43da      	mvns	r2, r3
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	401a      	ands	r2, r3
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001294:	f04f 31ff 	mov.w	r1, #4294967295
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	fa01 f303 	lsl.w	r3, r1, r3
 800129e:	43d9      	mvns	r1, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a4:	4313      	orrs	r3, r2
         );
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3724      	adds	r7, #36	@ 0x24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff ff4c 	bl	8001158 <__NVIC_SetPriorityGrouping>
}
 80012c0:	bf00      	nop
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
 80012d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012da:	f7ff ff61 	bl	80011a0 <__NVIC_GetPriorityGrouping>
 80012de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	68b9      	ldr	r1, [r7, #8]
 80012e4:	6978      	ldr	r0, [r7, #20]
 80012e6:	f7ff ffb1 	bl	800124c <NVIC_EncodePriority>
 80012ea:	4602      	mov	r2, r0
 80012ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f0:	4611      	mov	r1, r2
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff ff80 	bl	80011f8 <__NVIC_SetPriority>
}
 80012f8:	bf00      	nop
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff ff54 	bl	80011bc <__NVIC_EnableIRQ>
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d101      	bne.n	800132e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e00e      	b.n	800134c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	795b      	ldrb	r3, [r3, #5]
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b00      	cmp	r3, #0
 8001336:	d105      	bne.n	8001344 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff fc16 	bl	8000b70 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2201      	movs	r2, #1
 8001348:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800134a:	2300      	movs	r3, #0
}
 800134c:	4618      	mov	r0, r3
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001360:	f7ff feee 	bl	8001140 <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d101      	bne.n	8001370 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e099      	b.n	80014a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2202      	movs	r2, #2
 8001374:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f022 0201 	bic.w	r2, r2, #1
 800138e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001390:	e00f      	b.n	80013b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001392:	f7ff fed5 	bl	8001140 <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b05      	cmp	r3, #5
 800139e:	d908      	bls.n	80013b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2220      	movs	r2, #32
 80013a4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2203      	movs	r2, #3
 80013aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e078      	b.n	80014a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1e8      	bne.n	8001392 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013c8:	697a      	ldr	r2, [r7, #20]
 80013ca:	4b38      	ldr	r3, [pc, #224]	@ (80014ac <HAL_DMA_Init+0x158>)
 80013cc:	4013      	ands	r3, r2
 80013ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	691b      	ldr	r3, [r3, #16]
 80013e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a1b      	ldr	r3, [r3, #32]
 80013fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013fe:	697a      	ldr	r2, [r7, #20]
 8001400:	4313      	orrs	r3, r2
 8001402:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001408:	2b04      	cmp	r3, #4
 800140a:	d107      	bne.n	800141c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001414:	4313      	orrs	r3, r2
 8001416:	697a      	ldr	r2, [r7, #20]
 8001418:	4313      	orrs	r3, r2
 800141a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	697a      	ldr	r2, [r7, #20]
 8001422:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	f023 0307 	bic.w	r3, r3, #7
 8001432:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001438:	697a      	ldr	r2, [r7, #20]
 800143a:	4313      	orrs	r3, r2
 800143c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001442:	2b04      	cmp	r3, #4
 8001444:	d117      	bne.n	8001476 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800144a:	697a      	ldr	r2, [r7, #20]
 800144c:	4313      	orrs	r3, r2
 800144e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001454:	2b00      	cmp	r3, #0
 8001456:	d00e      	beq.n	8001476 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f000 fb01 	bl	8001a60 <DMA_CheckFifoParam>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d008      	beq.n	8001476 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2240      	movs	r2, #64	@ 0x40
 8001468:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2201      	movs	r2, #1
 800146e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001472:	2301      	movs	r3, #1
 8001474:	e016      	b.n	80014a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	697a      	ldr	r2, [r7, #20]
 800147c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f000 fab8 	bl	80019f4 <DMA_CalcBaseAndBitshift>
 8001484:	4603      	mov	r3, r0
 8001486:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800148c:	223f      	movs	r2, #63	@ 0x3f
 800148e:	409a      	lsls	r2, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2201      	movs	r2, #1
 800149e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3718      	adds	r7, #24
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	f010803f 	.word	0xf010803f

080014b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
 80014bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014be:	2300      	movs	r3, #0
 80014c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d101      	bne.n	80014d6 <HAL_DMA_Start_IT+0x26>
 80014d2:	2302      	movs	r3, #2
 80014d4:	e040      	b.n	8001558 <HAL_DMA_Start_IT+0xa8>
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2201      	movs	r2, #1
 80014da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d12f      	bne.n	800154a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2202      	movs	r2, #2
 80014ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2200      	movs	r2, #0
 80014f6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	68b9      	ldr	r1, [r7, #8]
 80014fe:	68f8      	ldr	r0, [r7, #12]
 8001500:	f000 fa4a 	bl	8001998 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001508:	223f      	movs	r2, #63	@ 0x3f
 800150a:	409a      	lsls	r2, r3
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f042 0216 	orr.w	r2, r2, #22
 800151e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001524:	2b00      	cmp	r3, #0
 8001526:	d007      	beq.n	8001538 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f042 0208 	orr.w	r2, r2, #8
 8001536:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f042 0201 	orr.w	r2, r2, #1
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	e005      	b.n	8001556 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2200      	movs	r2, #0
 800154e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001552:	2302      	movs	r3, #2
 8001554:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001556:	7dfb      	ldrb	r3, [r7, #23]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3718      	adds	r7, #24
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800156c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800156e:	f7ff fde7 	bl	8001140 <HAL_GetTick>
 8001572:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800157a:	b2db      	uxtb	r3, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d008      	beq.n	8001592 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2280      	movs	r2, #128	@ 0x80
 8001584:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e052      	b.n	8001638 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f022 0216 	bic.w	r2, r2, #22
 80015a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	695a      	ldr	r2, [r3, #20]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80015b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d103      	bne.n	80015c2 <HAL_DMA_Abort+0x62>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d007      	beq.n	80015d2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 0208 	bic.w	r2, r2, #8
 80015d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f022 0201 	bic.w	r2, r2, #1
 80015e0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015e2:	e013      	b.n	800160c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015e4:	f7ff fdac 	bl	8001140 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b05      	cmp	r3, #5
 80015f0:	d90c      	bls.n	800160c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2220      	movs	r2, #32
 80015f6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2203      	movs	r2, #3
 80015fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e015      	b.n	8001638 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1e4      	bne.n	80015e4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800161e:	223f      	movs	r2, #63	@ 0x3f
 8001620:	409a      	lsls	r2, r3
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2201      	movs	r2, #1
 800162a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001636:	2300      	movs	r3, #0
}
 8001638:	4618      	mov	r0, r3
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800164e:	b2db      	uxtb	r3, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d004      	beq.n	800165e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2280      	movs	r2, #128	@ 0x80
 8001658:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e00c      	b.n	8001678 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2205      	movs	r2, #5
 8001662:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 0201 	bic.w	r2, r2, #1
 8001674:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800168c:	2300      	movs	r3, #0
 800168e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001690:	4b8e      	ldr	r3, [pc, #568]	@ (80018cc <HAL_DMA_IRQHandler+0x248>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a8e      	ldr	r2, [pc, #568]	@ (80018d0 <HAL_DMA_IRQHandler+0x24c>)
 8001696:	fba2 2303 	umull	r2, r3, r2, r3
 800169a:	0a9b      	lsrs	r3, r3, #10
 800169c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016ae:	2208      	movs	r2, #8
 80016b0:	409a      	lsls	r2, r3
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	4013      	ands	r3, r2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d01a      	beq.n	80016f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d013      	beq.n	80016f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f022 0204 	bic.w	r2, r2, #4
 80016d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016dc:	2208      	movs	r2, #8
 80016de:	409a      	lsls	r2, r3
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016e8:	f043 0201 	orr.w	r2, r3, #1
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016f4:	2201      	movs	r2, #1
 80016f6:	409a      	lsls	r2, r3
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	4013      	ands	r3, r2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d012      	beq.n	8001726 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800170a:	2b00      	cmp	r3, #0
 800170c:	d00b      	beq.n	8001726 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001712:	2201      	movs	r2, #1
 8001714:	409a      	lsls	r2, r3
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800171e:	f043 0202 	orr.w	r2, r3, #2
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800172a:	2204      	movs	r2, #4
 800172c:	409a      	lsls	r2, r3
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	4013      	ands	r3, r2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d012      	beq.n	800175c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b00      	cmp	r3, #0
 8001742:	d00b      	beq.n	800175c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001748:	2204      	movs	r2, #4
 800174a:	409a      	lsls	r2, r3
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001754:	f043 0204 	orr.w	r2, r3, #4
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001760:	2210      	movs	r2, #16
 8001762:	409a      	lsls	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	4013      	ands	r3, r2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d043      	beq.n	80017f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0308 	and.w	r3, r3, #8
 8001776:	2b00      	cmp	r3, #0
 8001778:	d03c      	beq.n	80017f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800177e:	2210      	movs	r2, #16
 8001780:	409a      	lsls	r2, r3
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d018      	beq.n	80017c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d108      	bne.n	80017b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d024      	beq.n	80017f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	4798      	blx	r3
 80017b2:	e01f      	b.n	80017f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d01b      	beq.n	80017f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	4798      	blx	r3
 80017c4:	e016      	b.n	80017f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d107      	bne.n	80017e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f022 0208 	bic.w	r2, r2, #8
 80017e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d003      	beq.n	80017f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017f8:	2220      	movs	r2, #32
 80017fa:	409a      	lsls	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4013      	ands	r3, r2
 8001800:	2b00      	cmp	r3, #0
 8001802:	f000 808f 	beq.w	8001924 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0310 	and.w	r3, r3, #16
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 8087 	beq.w	8001924 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800181a:	2220      	movs	r2, #32
 800181c:	409a      	lsls	r2, r3
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b05      	cmp	r3, #5
 800182c:	d136      	bne.n	800189c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f022 0216 	bic.w	r2, r2, #22
 800183c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	695a      	ldr	r2, [r3, #20]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800184c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001852:	2b00      	cmp	r3, #0
 8001854:	d103      	bne.n	800185e <HAL_DMA_IRQHandler+0x1da>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800185a:	2b00      	cmp	r3, #0
 800185c:	d007      	beq.n	800186e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f022 0208 	bic.w	r2, r2, #8
 800186c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001872:	223f      	movs	r2, #63	@ 0x3f
 8001874:	409a      	lsls	r2, r3
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2201      	movs	r2, #1
 800187e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800188e:	2b00      	cmp	r3, #0
 8001890:	d07e      	beq.n	8001990 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	4798      	blx	r3
        }
        return;
 800189a:	e079      	b.n	8001990 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d01d      	beq.n	80018e6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d10d      	bne.n	80018d4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d031      	beq.n	8001924 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	4798      	blx	r3
 80018c8:	e02c      	b.n	8001924 <HAL_DMA_IRQHandler+0x2a0>
 80018ca:	bf00      	nop
 80018cc:	20000000 	.word	0x20000000
 80018d0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d023      	beq.n	8001924 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	4798      	blx	r3
 80018e4:	e01e      	b.n	8001924 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d10f      	bne.n	8001914 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f022 0210 	bic.w	r2, r2, #16
 8001902:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001928:	2b00      	cmp	r3, #0
 800192a:	d032      	beq.n	8001992 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	2b00      	cmp	r3, #0
 8001936:	d022      	beq.n	800197e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2205      	movs	r2, #5
 800193c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f022 0201 	bic.w	r2, r2, #1
 800194e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	3301      	adds	r3, #1
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	429a      	cmp	r2, r3
 800195a:	d307      	bcc.n	800196c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f2      	bne.n	8001950 <HAL_DMA_IRQHandler+0x2cc>
 800196a:	e000      	b.n	800196e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800196c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001982:	2b00      	cmp	r3, #0
 8001984:	d005      	beq.n	8001992 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	4798      	blx	r3
 800198e:	e000      	b.n	8001992 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001990:	bf00      	nop
    }
  }
}
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
 80019a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80019b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	2b40      	cmp	r3, #64	@ 0x40
 80019c4:	d108      	bne.n	80019d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80019d6:	e007      	b.n	80019e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68ba      	ldr	r2, [r7, #8]
 80019de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	60da      	str	r2, [r3, #12]
}
 80019e8:	bf00      	nop
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	3b10      	subs	r3, #16
 8001a04:	4a14      	ldr	r2, [pc, #80]	@ (8001a58 <DMA_CalcBaseAndBitshift+0x64>)
 8001a06:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0a:	091b      	lsrs	r3, r3, #4
 8001a0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a0e:	4a13      	ldr	r2, [pc, #76]	@ (8001a5c <DMA_CalcBaseAndBitshift+0x68>)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	4413      	add	r3, r2
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	461a      	mov	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2b03      	cmp	r3, #3
 8001a20:	d909      	bls.n	8001a36 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001a2a:	f023 0303 	bic.w	r3, r3, #3
 8001a2e:	1d1a      	adds	r2, r3, #4
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	659a      	str	r2, [r3, #88]	@ 0x58
 8001a34:	e007      	b.n	8001a46 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001a3e:	f023 0303 	bic.w	r3, r3, #3
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	aaaaaaab 	.word	0xaaaaaaab
 8001a5c:	08008464 	.word	0x08008464

08001a60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d11f      	bne.n	8001aba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	2b03      	cmp	r3, #3
 8001a7e:	d856      	bhi.n	8001b2e <DMA_CheckFifoParam+0xce>
 8001a80:	a201      	add	r2, pc, #4	@ (adr r2, 8001a88 <DMA_CheckFifoParam+0x28>)
 8001a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a86:	bf00      	nop
 8001a88:	08001a99 	.word	0x08001a99
 8001a8c:	08001aab 	.word	0x08001aab
 8001a90:	08001a99 	.word	0x08001a99
 8001a94:	08001b2f 	.word	0x08001b2f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d046      	beq.n	8001b32 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001aa8:	e043      	b.n	8001b32 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aae:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001ab2:	d140      	bne.n	8001b36 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ab8:	e03d      	b.n	8001b36 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ac2:	d121      	bne.n	8001b08 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	2b03      	cmp	r3, #3
 8001ac8:	d837      	bhi.n	8001b3a <DMA_CheckFifoParam+0xda>
 8001aca:	a201      	add	r2, pc, #4	@ (adr r2, 8001ad0 <DMA_CheckFifoParam+0x70>)
 8001acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad0:	08001ae1 	.word	0x08001ae1
 8001ad4:	08001ae7 	.word	0x08001ae7
 8001ad8:	08001ae1 	.word	0x08001ae1
 8001adc:	08001af9 	.word	0x08001af9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ae4:	e030      	b.n	8001b48 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d025      	beq.n	8001b3e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001af6:	e022      	b.n	8001b3e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001afc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001b00:	d11f      	bne.n	8001b42 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b06:	e01c      	b.n	8001b42 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d903      	bls.n	8001b16 <DMA_CheckFifoParam+0xb6>
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	2b03      	cmp	r3, #3
 8001b12:	d003      	beq.n	8001b1c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b14:	e018      	b.n	8001b48 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	73fb      	strb	r3, [r7, #15]
      break;
 8001b1a:	e015      	b.n	8001b48 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d00e      	beq.n	8001b46 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	73fb      	strb	r3, [r7, #15]
      break;
 8001b2c:	e00b      	b.n	8001b46 <DMA_CheckFifoParam+0xe6>
      break;
 8001b2e:	bf00      	nop
 8001b30:	e00a      	b.n	8001b48 <DMA_CheckFifoParam+0xe8>
      break;
 8001b32:	bf00      	nop
 8001b34:	e008      	b.n	8001b48 <DMA_CheckFifoParam+0xe8>
      break;
 8001b36:	bf00      	nop
 8001b38:	e006      	b.n	8001b48 <DMA_CheckFifoParam+0xe8>
      break;
 8001b3a:	bf00      	nop
 8001b3c:	e004      	b.n	8001b48 <DMA_CheckFifoParam+0xe8>
      break;
 8001b3e:	bf00      	nop
 8001b40:	e002      	b.n	8001b48 <DMA_CheckFifoParam+0xe8>
      break;   
 8001b42:	bf00      	nop
 8001b44:	e000      	b.n	8001b48 <DMA_CheckFifoParam+0xe8>
      break;
 8001b46:	bf00      	nop
    }
  } 
  
  return status; 
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop

08001b58 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001b62:	4b49      	ldr	r3, [pc, #292]	@ (8001c88 <HAL_FLASH_IRQHandler+0x130>)
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d020      	beq.n	8001bb0 <HAL_FLASH_IRQHandler+0x58>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if (pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8001b6e:	4b47      	ldr	r3, [pc, #284]	@ (8001c8c <HAL_FLASH_IRQHandler+0x134>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d107      	bne.n	8001b88 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8001b78:	4b44      	ldr	r3, [pc, #272]	@ (8001c8c <HAL_FLASH_IRQHandler+0x134>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8001b7e:	4b43      	ldr	r3, [pc, #268]	@ (8001c8c <HAL_FLASH_IRQHandler+0x134>)
 8001b80:	f04f 32ff 	mov.w	r2, #4294967295
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	e00b      	b.n	8001ba0 <HAL_FLASH_IRQHandler+0x48>
    }
    else if (pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8001b88:	4b40      	ldr	r3, [pc, #256]	@ (8001c8c <HAL_FLASH_IRQHandler+0x134>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d103      	bne.n	8001b9a <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8001b92:	4b3e      	ldr	r3, [pc, #248]	@ (8001c8c <HAL_FLASH_IRQHandler+0x134>)
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	607b      	str	r3, [r7, #4]
 8001b98:	e002      	b.n	8001ba0 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8001b9a:	4b3c      	ldr	r3, [pc, #240]	@ (8001c8c <HAL_FLASH_IRQHandler+0x134>)
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	607b      	str	r3, [r7, #4]
    }

    /*Save the Error code*/
    FLASH_SetErrorCode();
 8001ba0:	f000 f88a 	bl	8001cb8 <FLASH_SetErrorCode>

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 f87d 	bl	8001ca4 <HAL_FLASH_OperationErrorCallback>

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001baa:	4b38      	ldr	r3, [pc, #224]	@ (8001c8c <HAL_FLASH_IRQHandler+0x134>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	701a      	strb	r2, [r3, #0]
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001bb0:	4b35      	ldr	r3, [pc, #212]	@ (8001c88 <HAL_FLASH_IRQHandler+0x130>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d04a      	beq.n	8001c52 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001bbc:	4b32      	ldr	r3, [pc, #200]	@ (8001c88 <HAL_FLASH_IRQHandler+0x130>)
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	60da      	str	r2, [r3, #12]

    if (pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8001bc2:	4b32      	ldr	r3, [pc, #200]	@ (8001c8c <HAL_FLASH_IRQHandler+0x134>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d12d      	bne.n	8001c28 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8001bcc:	4b2f      	ldr	r3, [pc, #188]	@ (8001c8c <HAL_FLASH_IRQHandler+0x134>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	4a2e      	ldr	r2, [pc, #184]	@ (8001c8c <HAL_FLASH_IRQHandler+0x134>)
 8001bd4:	6053      	str	r3, [r2, #4]

      /* Check if there are still sectors to erase*/
      if (pFlash.NbSectorsToErase != 0U)
 8001bd6:	4b2d      	ldr	r3, [pc, #180]	@ (8001c8c <HAL_FLASH_IRQHandler+0x134>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d015      	beq.n	8001c0a <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8001bde:	4b2b      	ldr	r3, [pc, #172]	@ (8001c8c <HAL_FLASH_IRQHandler+0x134>)
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 f853 	bl	8001c90 <HAL_FLASH_EndOfOperationCallback>

        /*Increment sector number*/
        pFlash.Sector++;
 8001bea:	4b28      	ldr	r3, [pc, #160]	@ (8001c8c <HAL_FLASH_IRQHandler+0x134>)
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	4a26      	ldr	r2, [pc, #152]	@ (8001c8c <HAL_FLASH_IRQHandler+0x134>)
 8001bf2:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8001bf4:	4b25      	ldr	r3, [pc, #148]	@ (8001c8c <HAL_FLASH_IRQHandler+0x134>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8001bfa:	4b24      	ldr	r3, [pc, #144]	@ (8001c8c <HAL_FLASH_IRQHandler+0x134>)
 8001bfc:	7a1b      	ldrb	r3, [r3, #8]
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	4619      	mov	r1, r3
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 f8ae 	bl	8001d64 <FLASH_Erase_Sector>
 8001c08:	e023      	b.n	8001c52 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8001c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0e:	607b      	str	r3, [r7, #4]
 8001c10:	4a1e      	ldr	r2, [pc, #120]	@ (8001c8c <HAL_FLASH_IRQHandler+0x134>)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001c16:	4b1d      	ldr	r3, [pc, #116]	@ (8001c8c <HAL_FLASH_IRQHandler+0x134>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	701a      	strb	r2, [r3, #0]

        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches();
 8001c1c:	f000 f8ea 	bl	8001df4 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 f835 	bl	8001c90 <HAL_FLASH_EndOfOperationCallback>
 8001c26:	e014      	b.n	8001c52 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else
    {
      if (pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8001c28:	4b18      	ldr	r3, [pc, #96]	@ (8001c8c <HAL_FLASH_IRQHandler+0x134>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d107      	bne.n	8001c42 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches();
 8001c32:	f000 f8df 	bl	8001df4 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8001c36:	4b15      	ldr	r3, [pc, #84]	@ (8001c8c <HAL_FLASH_IRQHandler+0x134>)
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f000 f828 	bl	8001c90 <HAL_FLASH_EndOfOperationCallback>
 8001c40:	e004      	b.n	8001c4c <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8001c42:	4b12      	ldr	r3, [pc, #72]	@ (8001c8c <HAL_FLASH_IRQHandler+0x134>)
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f000 f822 	bl	8001c90 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c8c <HAL_FLASH_IRQHandler+0x134>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	701a      	strb	r2, [r3, #0]
    }
  }

  if (pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8001c52:	4b0e      	ldr	r3, [pc, #56]	@ (8001c8c <HAL_FLASH_IRQHandler+0x134>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d111      	bne.n	8001c80 <HAL_FLASH_IRQHandler+0x128>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8001c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c88 <HAL_FLASH_IRQHandler+0x130>)
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	4a09      	ldr	r2, [pc, #36]	@ (8001c88 <HAL_FLASH_IRQHandler+0x130>)
 8001c62:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001c66:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8001c68:	4b07      	ldr	r3, [pc, #28]	@ (8001c88 <HAL_FLASH_IRQHandler+0x130>)
 8001c6a:	691b      	ldr	r3, [r3, #16]
 8001c6c:	4a06      	ldr	r2, [pc, #24]	@ (8001c88 <HAL_FLASH_IRQHandler+0x130>)
 8001c6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c72:	6113      	str	r3, [r2, #16]

    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8001c74:	4b04      	ldr	r3, [pc, #16]	@ (8001c88 <HAL_FLASH_IRQHandler+0x130>)
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	4a03      	ldr	r2, [pc, #12]	@ (8001c88 <HAL_FLASH_IRQHandler+0x130>)
 8001c7a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8001c7e:	6113      	str	r3, [r2, #16]
  }
}
 8001c80:	bf00      	nop
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40023c00 	.word	0x40023c00
 8001c8c:	20000234 	.word	0x20000234

08001c90 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001cbc:	4b27      	ldr	r3, [pc, #156]	@ (8001d5c <FLASH_SetErrorCode+0xa4>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	f003 0310 	and.w	r3, r3, #16
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d008      	beq.n	8001cda <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001cc8:	4b25      	ldr	r3, [pc, #148]	@ (8001d60 <FLASH_SetErrorCode+0xa8>)
 8001cca:	69db      	ldr	r3, [r3, #28]
 8001ccc:	f043 0310 	orr.w	r3, r3, #16
 8001cd0:	4a23      	ldr	r2, [pc, #140]	@ (8001d60 <FLASH_SetErrorCode+0xa8>)
 8001cd2:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001cd4:	4b21      	ldr	r3, [pc, #132]	@ (8001d5c <FLASH_SetErrorCode+0xa4>)
 8001cd6:	2210      	movs	r2, #16
 8001cd8:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001cda:	4b20      	ldr	r3, [pc, #128]	@ (8001d5c <FLASH_SetErrorCode+0xa4>)
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	f003 0320 	and.w	r3, r3, #32
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d008      	beq.n	8001cf8 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001ce6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d60 <FLASH_SetErrorCode+0xa8>)
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	f043 0308 	orr.w	r3, r3, #8
 8001cee:	4a1c      	ldr	r2, [pc, #112]	@ (8001d60 <FLASH_SetErrorCode+0xa8>)
 8001cf0:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d5c <FLASH_SetErrorCode+0xa4>)
 8001cf4:	2220      	movs	r2, #32
 8001cf6:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001cf8:	4b18      	ldr	r3, [pc, #96]	@ (8001d5c <FLASH_SetErrorCode+0xa4>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d008      	beq.n	8001d16 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001d04:	4b16      	ldr	r3, [pc, #88]	@ (8001d60 <FLASH_SetErrorCode+0xa8>)
 8001d06:	69db      	ldr	r3, [r3, #28]
 8001d08:	f043 0304 	orr.w	r3, r3, #4
 8001d0c:	4a14      	ldr	r2, [pc, #80]	@ (8001d60 <FLASH_SetErrorCode+0xa8>)
 8001d0e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001d10:	4b12      	ldr	r3, [pc, #72]	@ (8001d5c <FLASH_SetErrorCode+0xa4>)
 8001d12:	2240      	movs	r2, #64	@ 0x40
 8001d14:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001d16:	4b11      	ldr	r3, [pc, #68]	@ (8001d5c <FLASH_SetErrorCode+0xa4>)
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d008      	beq.n	8001d34 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001d22:	4b0f      	ldr	r3, [pc, #60]	@ (8001d60 <FLASH_SetErrorCode+0xa8>)
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	f043 0302 	orr.w	r3, r3, #2
 8001d2a:	4a0d      	ldr	r2, [pc, #52]	@ (8001d60 <FLASH_SetErrorCode+0xa8>)
 8001d2c:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d5c <FLASH_SetErrorCode+0xa4>)
 8001d30:	2280      	movs	r2, #128	@ 0x80
 8001d32:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001d34:	4b09      	ldr	r3, [pc, #36]	@ (8001d5c <FLASH_SetErrorCode+0xa4>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d008      	beq.n	8001d52 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001d40:	4b07      	ldr	r3, [pc, #28]	@ (8001d60 <FLASH_SetErrorCode+0xa8>)
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	f043 0320 	orr.w	r3, r3, #32
 8001d48:	4a05      	ldr	r2, [pc, #20]	@ (8001d60 <FLASH_SetErrorCode+0xa8>)
 8001d4a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001d4c:	4b03      	ldr	r3, [pc, #12]	@ (8001d5c <FLASH_SetErrorCode+0xa4>)
 8001d4e:	2202      	movs	r2, #2
 8001d50:	60da      	str	r2, [r3, #12]
  }
}
 8001d52:	bf00      	nop
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	40023c00 	.word	0x40023c00
 8001d60:	20000234 	.word	0x20000234

08001d64 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001d70:	2300      	movs	r3, #0
 8001d72:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001d74:	78fb      	ldrb	r3, [r7, #3]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d102      	bne.n	8001d80 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	e010      	b.n	8001da2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001d80:	78fb      	ldrb	r3, [r7, #3]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d103      	bne.n	8001d8e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001d86:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	e009      	b.n	8001da2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001d8e:	78fb      	ldrb	r3, [r7, #3]
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d103      	bne.n	8001d9c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001d94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	e002      	b.n	8001da2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001d9c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001da0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001da2:	4b13      	ldr	r3, [pc, #76]	@ (8001df0 <FLASH_Erase_Sector+0x8c>)
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	4a12      	ldr	r2, [pc, #72]	@ (8001df0 <FLASH_Erase_Sector+0x8c>)
 8001da8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001dac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001dae:	4b10      	ldr	r3, [pc, #64]	@ (8001df0 <FLASH_Erase_Sector+0x8c>)
 8001db0:	691a      	ldr	r2, [r3, #16]
 8001db2:	490f      	ldr	r1, [pc, #60]	@ (8001df0 <FLASH_Erase_Sector+0x8c>)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001dba:	4b0d      	ldr	r3, [pc, #52]	@ (8001df0 <FLASH_Erase_Sector+0x8c>)
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	4a0c      	ldr	r2, [pc, #48]	@ (8001df0 <FLASH_Erase_Sector+0x8c>)
 8001dc0:	f023 0378 	bic.w	r3, r3, #120	@ 0x78
 8001dc4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001df0 <FLASH_Erase_Sector+0x8c>)
 8001dc8:	691a      	ldr	r2, [r3, #16]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	4a07      	ldr	r2, [pc, #28]	@ (8001df0 <FLASH_Erase_Sector+0x8c>)
 8001dd2:	f043 0302 	orr.w	r3, r3, #2
 8001dd6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001dd8:	4b05      	ldr	r3, [pc, #20]	@ (8001df0 <FLASH_Erase_Sector+0x8c>)
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	4a04      	ldr	r2, [pc, #16]	@ (8001df0 <FLASH_Erase_Sector+0x8c>)
 8001dde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001de2:	6113      	str	r3, [r2, #16]
}
 8001de4:	bf00      	nop
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	40023c00 	.word	0x40023c00

08001df4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001df8:	4b20      	ldr	r3, [pc, #128]	@ (8001e7c <FLASH_FlushCaches+0x88>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d017      	beq.n	8001e34 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001e04:	4b1d      	ldr	r3, [pc, #116]	@ (8001e7c <FLASH_FlushCaches+0x88>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a1c      	ldr	r2, [pc, #112]	@ (8001e7c <FLASH_FlushCaches+0x88>)
 8001e0a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001e0e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001e10:	4b1a      	ldr	r3, [pc, #104]	@ (8001e7c <FLASH_FlushCaches+0x88>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a19      	ldr	r2, [pc, #100]	@ (8001e7c <FLASH_FlushCaches+0x88>)
 8001e16:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e1a:	6013      	str	r3, [r2, #0]
 8001e1c:	4b17      	ldr	r3, [pc, #92]	@ (8001e7c <FLASH_FlushCaches+0x88>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a16      	ldr	r2, [pc, #88]	@ (8001e7c <FLASH_FlushCaches+0x88>)
 8001e22:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001e26:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e28:	4b14      	ldr	r3, [pc, #80]	@ (8001e7c <FLASH_FlushCaches+0x88>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a13      	ldr	r2, [pc, #76]	@ (8001e7c <FLASH_FlushCaches+0x88>)
 8001e2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e32:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001e34:	4b11      	ldr	r3, [pc, #68]	@ (8001e7c <FLASH_FlushCaches+0x88>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d017      	beq.n	8001e70 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001e40:	4b0e      	ldr	r3, [pc, #56]	@ (8001e7c <FLASH_FlushCaches+0x88>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a0d      	ldr	r2, [pc, #52]	@ (8001e7c <FLASH_FlushCaches+0x88>)
 8001e46:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001e4a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e7c <FLASH_FlushCaches+0x88>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a0a      	ldr	r2, [pc, #40]	@ (8001e7c <FLASH_FlushCaches+0x88>)
 8001e52:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e56:	6013      	str	r3, [r2, #0]
 8001e58:	4b08      	ldr	r3, [pc, #32]	@ (8001e7c <FLASH_FlushCaches+0x88>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a07      	ldr	r2, [pc, #28]	@ (8001e7c <FLASH_FlushCaches+0x88>)
 8001e5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001e62:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e64:	4b05      	ldr	r3, [pc, #20]	@ (8001e7c <FLASH_FlushCaches+0x88>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a04      	ldr	r2, [pc, #16]	@ (8001e7c <FLASH_FlushCaches+0x88>)
 8001e6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e6e:	6013      	str	r3, [r2, #0]
  }
}
 8001e70:	bf00      	nop
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	40023c00 	.word	0x40023c00

08001e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b089      	sub	sp, #36	@ 0x24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
 8001e9a:	e16b      	b.n	8002174 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	4013      	ands	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	f040 815a 	bne.w	800216e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d005      	beq.n	8001ed2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d130      	bne.n	8001f34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	2203      	movs	r2, #3
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	68da      	ldr	r2, [r3, #12]
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f08:	2201      	movs	r2, #1
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4013      	ands	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	091b      	lsrs	r3, r3, #4
 8001f1e:	f003 0201 	and.w	r2, r3, #1
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f003 0303 	and.w	r3, r3, #3
 8001f3c:	2b03      	cmp	r3, #3
 8001f3e:	d017      	beq.n	8001f70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f003 0303 	and.w	r3, r3, #3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d123      	bne.n	8001fc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	08da      	lsrs	r2, r3, #3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3208      	adds	r2, #8
 8001f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	220f      	movs	r2, #15
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	691a      	ldr	r2, [r3, #16]
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	08da      	lsrs	r2, r3, #3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3208      	adds	r2, #8
 8001fbe:	69b9      	ldr	r1, [r7, #24]
 8001fc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	2203      	movs	r2, #3
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f003 0203 	and.w	r2, r3, #3
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002000:	2b00      	cmp	r3, #0
 8002002:	f000 80b4 	beq.w	800216e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	4b60      	ldr	r3, [pc, #384]	@ (800218c <HAL_GPIO_Init+0x30c>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800200e:	4a5f      	ldr	r2, [pc, #380]	@ (800218c <HAL_GPIO_Init+0x30c>)
 8002010:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002014:	6453      	str	r3, [r2, #68]	@ 0x44
 8002016:	4b5d      	ldr	r3, [pc, #372]	@ (800218c <HAL_GPIO_Init+0x30c>)
 8002018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800201a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002022:	4a5b      	ldr	r2, [pc, #364]	@ (8002190 <HAL_GPIO_Init+0x310>)
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	089b      	lsrs	r3, r3, #2
 8002028:	3302      	adds	r3, #2
 800202a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	220f      	movs	r2, #15
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43db      	mvns	r3, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4013      	ands	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a52      	ldr	r2, [pc, #328]	@ (8002194 <HAL_GPIO_Init+0x314>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d02b      	beq.n	80020a6 <HAL_GPIO_Init+0x226>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a51      	ldr	r2, [pc, #324]	@ (8002198 <HAL_GPIO_Init+0x318>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d025      	beq.n	80020a2 <HAL_GPIO_Init+0x222>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a50      	ldr	r2, [pc, #320]	@ (800219c <HAL_GPIO_Init+0x31c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d01f      	beq.n	800209e <HAL_GPIO_Init+0x21e>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a4f      	ldr	r2, [pc, #316]	@ (80021a0 <HAL_GPIO_Init+0x320>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d019      	beq.n	800209a <HAL_GPIO_Init+0x21a>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a4e      	ldr	r2, [pc, #312]	@ (80021a4 <HAL_GPIO_Init+0x324>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d013      	beq.n	8002096 <HAL_GPIO_Init+0x216>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a4d      	ldr	r2, [pc, #308]	@ (80021a8 <HAL_GPIO_Init+0x328>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d00d      	beq.n	8002092 <HAL_GPIO_Init+0x212>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a4c      	ldr	r2, [pc, #304]	@ (80021ac <HAL_GPIO_Init+0x32c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d007      	beq.n	800208e <HAL_GPIO_Init+0x20e>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a4b      	ldr	r2, [pc, #300]	@ (80021b0 <HAL_GPIO_Init+0x330>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d101      	bne.n	800208a <HAL_GPIO_Init+0x20a>
 8002086:	2307      	movs	r3, #7
 8002088:	e00e      	b.n	80020a8 <HAL_GPIO_Init+0x228>
 800208a:	2308      	movs	r3, #8
 800208c:	e00c      	b.n	80020a8 <HAL_GPIO_Init+0x228>
 800208e:	2306      	movs	r3, #6
 8002090:	e00a      	b.n	80020a8 <HAL_GPIO_Init+0x228>
 8002092:	2305      	movs	r3, #5
 8002094:	e008      	b.n	80020a8 <HAL_GPIO_Init+0x228>
 8002096:	2304      	movs	r3, #4
 8002098:	e006      	b.n	80020a8 <HAL_GPIO_Init+0x228>
 800209a:	2303      	movs	r3, #3
 800209c:	e004      	b.n	80020a8 <HAL_GPIO_Init+0x228>
 800209e:	2302      	movs	r3, #2
 80020a0:	e002      	b.n	80020a8 <HAL_GPIO_Init+0x228>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <HAL_GPIO_Init+0x228>
 80020a6:	2300      	movs	r3, #0
 80020a8:	69fa      	ldr	r2, [r7, #28]
 80020aa:	f002 0203 	and.w	r2, r2, #3
 80020ae:	0092      	lsls	r2, r2, #2
 80020b0:	4093      	lsls	r3, r2
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020b8:	4935      	ldr	r1, [pc, #212]	@ (8002190 <HAL_GPIO_Init+0x310>)
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	089b      	lsrs	r3, r3, #2
 80020be:	3302      	adds	r3, #2
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020c6:	4b3b      	ldr	r3, [pc, #236]	@ (80021b4 <HAL_GPIO_Init+0x334>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	43db      	mvns	r3, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4013      	ands	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020ea:	4a32      	ldr	r2, [pc, #200]	@ (80021b4 <HAL_GPIO_Init+0x334>)
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020f0:	4b30      	ldr	r3, [pc, #192]	@ (80021b4 <HAL_GPIO_Init+0x334>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d003      	beq.n	8002114 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	4313      	orrs	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002114:	4a27      	ldr	r2, [pc, #156]	@ (80021b4 <HAL_GPIO_Init+0x334>)
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800211a:	4b26      	ldr	r3, [pc, #152]	@ (80021b4 <HAL_GPIO_Init+0x334>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	43db      	mvns	r3, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4013      	ands	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800213e:	4a1d      	ldr	r2, [pc, #116]	@ (80021b4 <HAL_GPIO_Init+0x334>)
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002144:	4b1b      	ldr	r3, [pc, #108]	@ (80021b4 <HAL_GPIO_Init+0x334>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	43db      	mvns	r3, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4013      	ands	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	4313      	orrs	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002168:	4a12      	ldr	r2, [pc, #72]	@ (80021b4 <HAL_GPIO_Init+0x334>)
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	3301      	adds	r3, #1
 8002172:	61fb      	str	r3, [r7, #28]
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	2b0f      	cmp	r3, #15
 8002178:	f67f ae90 	bls.w	8001e9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800217c:	bf00      	nop
 800217e:	bf00      	nop
 8002180:	3724      	adds	r7, #36	@ 0x24
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	40023800 	.word	0x40023800
 8002190:	40013800 	.word	0x40013800
 8002194:	40020000 	.word	0x40020000
 8002198:	40020400 	.word	0x40020400
 800219c:	40020800 	.word	0x40020800
 80021a0:	40020c00 	.word	0x40020c00
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40021400 	.word	0x40021400
 80021ac:	40021800 	.word	0x40021800
 80021b0:	40021c00 	.word	0x40021c00
 80021b4:	40013c00 	.word	0x40013c00

080021b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	807b      	strh	r3, [r7, #2]
 80021c4:	4613      	mov	r3, r2
 80021c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021c8:	787b      	ldrb	r3, [r7, #1]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ce:	887a      	ldrh	r2, [r7, #2]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021d4:	e003      	b.n	80021de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021d6:	887b      	ldrh	r3, [r7, #2]
 80021d8:	041a      	lsls	r2, r3, #16
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	619a      	str	r2, [r3, #24]
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
	...

080021ec <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80021f0:	4b06      	ldr	r3, [pc, #24]	@ (800220c <HAL_PWR_PVD_IRQHandler+0x20>)
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d005      	beq.n	8002208 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80021fc:	f000 f808 	bl	8002210 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8002200:	4b02      	ldr	r3, [pc, #8]	@ (800220c <HAL_PWR_PVD_IRQHandler+0x20>)
 8002202:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002206:	615a      	str	r2, [r3, #20]
  }
}
 8002208:	bf00      	nop
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40013c00 	.word	0x40013c00

08002210 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
	...

08002220 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e267      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d075      	beq.n	800232a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800223e:	4b88      	ldr	r3, [pc, #544]	@ (8002460 <HAL_RCC_OscConfig+0x240>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f003 030c 	and.w	r3, r3, #12
 8002246:	2b04      	cmp	r3, #4
 8002248:	d00c      	beq.n	8002264 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800224a:	4b85      	ldr	r3, [pc, #532]	@ (8002460 <HAL_RCC_OscConfig+0x240>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002252:	2b08      	cmp	r3, #8
 8002254:	d112      	bne.n	800227c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002256:	4b82      	ldr	r3, [pc, #520]	@ (8002460 <HAL_RCC_OscConfig+0x240>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800225e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002262:	d10b      	bne.n	800227c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002264:	4b7e      	ldr	r3, [pc, #504]	@ (8002460 <HAL_RCC_OscConfig+0x240>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d05b      	beq.n	8002328 <HAL_RCC_OscConfig+0x108>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d157      	bne.n	8002328 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e242      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002284:	d106      	bne.n	8002294 <HAL_RCC_OscConfig+0x74>
 8002286:	4b76      	ldr	r3, [pc, #472]	@ (8002460 <HAL_RCC_OscConfig+0x240>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a75      	ldr	r2, [pc, #468]	@ (8002460 <HAL_RCC_OscConfig+0x240>)
 800228c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	e01d      	b.n	80022d0 <HAL_RCC_OscConfig+0xb0>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800229c:	d10c      	bne.n	80022b8 <HAL_RCC_OscConfig+0x98>
 800229e:	4b70      	ldr	r3, [pc, #448]	@ (8002460 <HAL_RCC_OscConfig+0x240>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a6f      	ldr	r2, [pc, #444]	@ (8002460 <HAL_RCC_OscConfig+0x240>)
 80022a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	4b6d      	ldr	r3, [pc, #436]	@ (8002460 <HAL_RCC_OscConfig+0x240>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a6c      	ldr	r2, [pc, #432]	@ (8002460 <HAL_RCC_OscConfig+0x240>)
 80022b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	e00b      	b.n	80022d0 <HAL_RCC_OscConfig+0xb0>
 80022b8:	4b69      	ldr	r3, [pc, #420]	@ (8002460 <HAL_RCC_OscConfig+0x240>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a68      	ldr	r2, [pc, #416]	@ (8002460 <HAL_RCC_OscConfig+0x240>)
 80022be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022c2:	6013      	str	r3, [r2, #0]
 80022c4:	4b66      	ldr	r3, [pc, #408]	@ (8002460 <HAL_RCC_OscConfig+0x240>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a65      	ldr	r2, [pc, #404]	@ (8002460 <HAL_RCC_OscConfig+0x240>)
 80022ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d013      	beq.n	8002300 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d8:	f7fe ff32 	bl	8001140 <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e0:	f7fe ff2e 	bl	8001140 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b64      	cmp	r3, #100	@ 0x64
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e207      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f2:	4b5b      	ldr	r3, [pc, #364]	@ (8002460 <HAL_RCC_OscConfig+0x240>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0f0      	beq.n	80022e0 <HAL_RCC_OscConfig+0xc0>
 80022fe:	e014      	b.n	800232a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002300:	f7fe ff1e 	bl	8001140 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002308:	f7fe ff1a 	bl	8001140 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b64      	cmp	r3, #100	@ 0x64
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e1f3      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800231a:	4b51      	ldr	r3, [pc, #324]	@ (8002460 <HAL_RCC_OscConfig+0x240>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f0      	bne.n	8002308 <HAL_RCC_OscConfig+0xe8>
 8002326:	e000      	b.n	800232a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002328:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d063      	beq.n	80023fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002336:	4b4a      	ldr	r3, [pc, #296]	@ (8002460 <HAL_RCC_OscConfig+0x240>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 030c 	and.w	r3, r3, #12
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00b      	beq.n	800235a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002342:	4b47      	ldr	r3, [pc, #284]	@ (8002460 <HAL_RCC_OscConfig+0x240>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800234a:	2b08      	cmp	r3, #8
 800234c:	d11c      	bne.n	8002388 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800234e:	4b44      	ldr	r3, [pc, #272]	@ (8002460 <HAL_RCC_OscConfig+0x240>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d116      	bne.n	8002388 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800235a:	4b41      	ldr	r3, [pc, #260]	@ (8002460 <HAL_RCC_OscConfig+0x240>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d005      	beq.n	8002372 <HAL_RCC_OscConfig+0x152>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d001      	beq.n	8002372 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e1c7      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002372:	4b3b      	ldr	r3, [pc, #236]	@ (8002460 <HAL_RCC_OscConfig+0x240>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	4937      	ldr	r1, [pc, #220]	@ (8002460 <HAL_RCC_OscConfig+0x240>)
 8002382:	4313      	orrs	r3, r2
 8002384:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002386:	e03a      	b.n	80023fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d020      	beq.n	80023d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002390:	4b34      	ldr	r3, [pc, #208]	@ (8002464 <HAL_RCC_OscConfig+0x244>)
 8002392:	2201      	movs	r2, #1
 8002394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002396:	f7fe fed3 	bl	8001140 <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800239e:	f7fe fecf 	bl	8001140 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e1a8      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002460 <HAL_RCC_OscConfig+0x240>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0f0      	beq.n	800239e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023bc:	4b28      	ldr	r3, [pc, #160]	@ (8002460 <HAL_RCC_OscConfig+0x240>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	4925      	ldr	r1, [pc, #148]	@ (8002460 <HAL_RCC_OscConfig+0x240>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	600b      	str	r3, [r1, #0]
 80023d0:	e015      	b.n	80023fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023d2:	4b24      	ldr	r3, [pc, #144]	@ (8002464 <HAL_RCC_OscConfig+0x244>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d8:	f7fe feb2 	bl	8001140 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e0:	f7fe feae 	bl	8001140 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e187      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002460 <HAL_RCC_OscConfig+0x240>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f0      	bne.n	80023e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	2b00      	cmp	r3, #0
 8002408:	d036      	beq.n	8002478 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d016      	beq.n	8002440 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002412:	4b15      	ldr	r3, [pc, #84]	@ (8002468 <HAL_RCC_OscConfig+0x248>)
 8002414:	2201      	movs	r2, #1
 8002416:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002418:	f7fe fe92 	bl	8001140 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002420:	f7fe fe8e 	bl	8001140 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e167      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002432:	4b0b      	ldr	r3, [pc, #44]	@ (8002460 <HAL_RCC_OscConfig+0x240>)
 8002434:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0f0      	beq.n	8002420 <HAL_RCC_OscConfig+0x200>
 800243e:	e01b      	b.n	8002478 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002440:	4b09      	ldr	r3, [pc, #36]	@ (8002468 <HAL_RCC_OscConfig+0x248>)
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002446:	f7fe fe7b 	bl	8001140 <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800244c:	e00e      	b.n	800246c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800244e:	f7fe fe77 	bl	8001140 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d907      	bls.n	800246c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e150      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
 8002460:	40023800 	.word	0x40023800
 8002464:	42470000 	.word	0x42470000
 8002468:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800246c:	4b88      	ldr	r3, [pc, #544]	@ (8002690 <HAL_RCC_OscConfig+0x470>)
 800246e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1ea      	bne.n	800244e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0304 	and.w	r3, r3, #4
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 8097 	beq.w	80025b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002486:	2300      	movs	r3, #0
 8002488:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800248a:	4b81      	ldr	r3, [pc, #516]	@ (8002690 <HAL_RCC_OscConfig+0x470>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10f      	bne.n	80024b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	60bb      	str	r3, [r7, #8]
 800249a:	4b7d      	ldr	r3, [pc, #500]	@ (8002690 <HAL_RCC_OscConfig+0x470>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249e:	4a7c      	ldr	r2, [pc, #496]	@ (8002690 <HAL_RCC_OscConfig+0x470>)
 80024a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80024a6:	4b7a      	ldr	r3, [pc, #488]	@ (8002690 <HAL_RCC_OscConfig+0x470>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ae:	60bb      	str	r3, [r7, #8]
 80024b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024b2:	2301      	movs	r3, #1
 80024b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b6:	4b77      	ldr	r3, [pc, #476]	@ (8002694 <HAL_RCC_OscConfig+0x474>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d118      	bne.n	80024f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024c2:	4b74      	ldr	r3, [pc, #464]	@ (8002694 <HAL_RCC_OscConfig+0x474>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a73      	ldr	r2, [pc, #460]	@ (8002694 <HAL_RCC_OscConfig+0x474>)
 80024c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ce:	f7fe fe37 	bl	8001140 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d6:	f7fe fe33 	bl	8001140 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e10c      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e8:	4b6a      	ldr	r3, [pc, #424]	@ (8002694 <HAL_RCC_OscConfig+0x474>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0f0      	beq.n	80024d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d106      	bne.n	800250a <HAL_RCC_OscConfig+0x2ea>
 80024fc:	4b64      	ldr	r3, [pc, #400]	@ (8002690 <HAL_RCC_OscConfig+0x470>)
 80024fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002500:	4a63      	ldr	r2, [pc, #396]	@ (8002690 <HAL_RCC_OscConfig+0x470>)
 8002502:	f043 0301 	orr.w	r3, r3, #1
 8002506:	6713      	str	r3, [r2, #112]	@ 0x70
 8002508:	e01c      	b.n	8002544 <HAL_RCC_OscConfig+0x324>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	2b05      	cmp	r3, #5
 8002510:	d10c      	bne.n	800252c <HAL_RCC_OscConfig+0x30c>
 8002512:	4b5f      	ldr	r3, [pc, #380]	@ (8002690 <HAL_RCC_OscConfig+0x470>)
 8002514:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002516:	4a5e      	ldr	r2, [pc, #376]	@ (8002690 <HAL_RCC_OscConfig+0x470>)
 8002518:	f043 0304 	orr.w	r3, r3, #4
 800251c:	6713      	str	r3, [r2, #112]	@ 0x70
 800251e:	4b5c      	ldr	r3, [pc, #368]	@ (8002690 <HAL_RCC_OscConfig+0x470>)
 8002520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002522:	4a5b      	ldr	r2, [pc, #364]	@ (8002690 <HAL_RCC_OscConfig+0x470>)
 8002524:	f043 0301 	orr.w	r3, r3, #1
 8002528:	6713      	str	r3, [r2, #112]	@ 0x70
 800252a:	e00b      	b.n	8002544 <HAL_RCC_OscConfig+0x324>
 800252c:	4b58      	ldr	r3, [pc, #352]	@ (8002690 <HAL_RCC_OscConfig+0x470>)
 800252e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002530:	4a57      	ldr	r2, [pc, #348]	@ (8002690 <HAL_RCC_OscConfig+0x470>)
 8002532:	f023 0301 	bic.w	r3, r3, #1
 8002536:	6713      	str	r3, [r2, #112]	@ 0x70
 8002538:	4b55      	ldr	r3, [pc, #340]	@ (8002690 <HAL_RCC_OscConfig+0x470>)
 800253a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800253c:	4a54      	ldr	r2, [pc, #336]	@ (8002690 <HAL_RCC_OscConfig+0x470>)
 800253e:	f023 0304 	bic.w	r3, r3, #4
 8002542:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d015      	beq.n	8002578 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800254c:	f7fe fdf8 	bl	8001140 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002552:	e00a      	b.n	800256a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002554:	f7fe fdf4 	bl	8001140 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002562:	4293      	cmp	r3, r2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e0cb      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800256a:	4b49      	ldr	r3, [pc, #292]	@ (8002690 <HAL_RCC_OscConfig+0x470>)
 800256c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0ee      	beq.n	8002554 <HAL_RCC_OscConfig+0x334>
 8002576:	e014      	b.n	80025a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002578:	f7fe fde2 	bl	8001140 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800257e:	e00a      	b.n	8002596 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002580:	f7fe fdde 	bl	8001140 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800258e:	4293      	cmp	r3, r2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e0b5      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002596:	4b3e      	ldr	r3, [pc, #248]	@ (8002690 <HAL_RCC_OscConfig+0x470>)
 8002598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1ee      	bne.n	8002580 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025a2:	7dfb      	ldrb	r3, [r7, #23]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d105      	bne.n	80025b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025a8:	4b39      	ldr	r3, [pc, #228]	@ (8002690 <HAL_RCC_OscConfig+0x470>)
 80025aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ac:	4a38      	ldr	r2, [pc, #224]	@ (8002690 <HAL_RCC_OscConfig+0x470>)
 80025ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 80a1 	beq.w	8002700 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025be:	4b34      	ldr	r3, [pc, #208]	@ (8002690 <HAL_RCC_OscConfig+0x470>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 030c 	and.w	r3, r3, #12
 80025c6:	2b08      	cmp	r3, #8
 80025c8:	d05c      	beq.n	8002684 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d141      	bne.n	8002656 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d2:	4b31      	ldr	r3, [pc, #196]	@ (8002698 <HAL_RCC_OscConfig+0x478>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d8:	f7fe fdb2 	bl	8001140 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e0:	f7fe fdae 	bl	8001140 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e087      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025f2:	4b27      	ldr	r3, [pc, #156]	@ (8002690 <HAL_RCC_OscConfig+0x470>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f0      	bne.n	80025e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69da      	ldr	r2, [r3, #28]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	431a      	orrs	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800260c:	019b      	lsls	r3, r3, #6
 800260e:	431a      	orrs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002614:	085b      	lsrs	r3, r3, #1
 8002616:	3b01      	subs	r3, #1
 8002618:	041b      	lsls	r3, r3, #16
 800261a:	431a      	orrs	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002620:	061b      	lsls	r3, r3, #24
 8002622:	491b      	ldr	r1, [pc, #108]	@ (8002690 <HAL_RCC_OscConfig+0x470>)
 8002624:	4313      	orrs	r3, r2
 8002626:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002628:	4b1b      	ldr	r3, [pc, #108]	@ (8002698 <HAL_RCC_OscConfig+0x478>)
 800262a:	2201      	movs	r2, #1
 800262c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262e:	f7fe fd87 	bl	8001140 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002634:	e008      	b.n	8002648 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002636:	f7fe fd83 	bl	8001140 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e05c      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002648:	4b11      	ldr	r3, [pc, #68]	@ (8002690 <HAL_RCC_OscConfig+0x470>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0f0      	beq.n	8002636 <HAL_RCC_OscConfig+0x416>
 8002654:	e054      	b.n	8002700 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002656:	4b10      	ldr	r3, [pc, #64]	@ (8002698 <HAL_RCC_OscConfig+0x478>)
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265c:	f7fe fd70 	bl	8001140 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002664:	f7fe fd6c 	bl	8001140 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e045      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002676:	4b06      	ldr	r3, [pc, #24]	@ (8002690 <HAL_RCC_OscConfig+0x470>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1f0      	bne.n	8002664 <HAL_RCC_OscConfig+0x444>
 8002682:	e03d      	b.n	8002700 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d107      	bne.n	800269c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e038      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
 8002690:	40023800 	.word	0x40023800
 8002694:	40007000 	.word	0x40007000
 8002698:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800269c:	4b1b      	ldr	r3, [pc, #108]	@ (800270c <HAL_RCC_OscConfig+0x4ec>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d028      	beq.n	80026fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d121      	bne.n	80026fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d11a      	bne.n	80026fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80026cc:	4013      	ands	r3, r2
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80026d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d111      	bne.n	80026fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e2:	085b      	lsrs	r3, r3, #1
 80026e4:	3b01      	subs	r3, #1
 80026e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d107      	bne.n	80026fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d001      	beq.n	8002700 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e000      	b.n	8002702 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40023800 	.word	0x40023800

08002710 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e0cc      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002724:	4b68      	ldr	r3, [pc, #416]	@ (80028c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	429a      	cmp	r2, r3
 8002730:	d90c      	bls.n	800274c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002732:	4b65      	ldr	r3, [pc, #404]	@ (80028c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800273a:	4b63      	ldr	r3, [pc, #396]	@ (80028c8 <HAL_RCC_ClockConfig+0x1b8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d001      	beq.n	800274c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e0b8      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d020      	beq.n	800279a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	d005      	beq.n	8002770 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002764:	4b59      	ldr	r3, [pc, #356]	@ (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	4a58      	ldr	r2, [pc, #352]	@ (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800276e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0308 	and.w	r3, r3, #8
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800277c:	4b53      	ldr	r3, [pc, #332]	@ (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	4a52      	ldr	r2, [pc, #328]	@ (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002782:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002786:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002788:	4b50      	ldr	r3, [pc, #320]	@ (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	494d      	ldr	r1, [pc, #308]	@ (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002796:	4313      	orrs	r3, r2
 8002798:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d044      	beq.n	8002830 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d107      	bne.n	80027be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ae:	4b47      	ldr	r3, [pc, #284]	@ (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d119      	bne.n	80027ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e07f      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d003      	beq.n	80027ce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027ca:	2b03      	cmp	r3, #3
 80027cc:	d107      	bne.n	80027de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ce:	4b3f      	ldr	r3, [pc, #252]	@ (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d109      	bne.n	80027ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e06f      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027de:	4b3b      	ldr	r3, [pc, #236]	@ (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e067      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ee:	4b37      	ldr	r3, [pc, #220]	@ (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f023 0203 	bic.w	r2, r3, #3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	4934      	ldr	r1, [pc, #208]	@ (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002800:	f7fe fc9e 	bl	8001140 <HAL_GetTick>
 8002804:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002806:	e00a      	b.n	800281e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002808:	f7fe fc9a 	bl	8001140 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002816:	4293      	cmp	r3, r2
 8002818:	d901      	bls.n	800281e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e04f      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281e:	4b2b      	ldr	r3, [pc, #172]	@ (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 020c 	and.w	r2, r3, #12
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	429a      	cmp	r2, r3
 800282e:	d1eb      	bne.n	8002808 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002830:	4b25      	ldr	r3, [pc, #148]	@ (80028c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	429a      	cmp	r2, r3
 800283c:	d20c      	bcs.n	8002858 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283e:	4b22      	ldr	r3, [pc, #136]	@ (80028c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002846:	4b20      	ldr	r3, [pc, #128]	@ (80028c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	429a      	cmp	r2, r3
 8002852:	d001      	beq.n	8002858 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e032      	b.n	80028be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b00      	cmp	r3, #0
 8002862:	d008      	beq.n	8002876 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002864:	4b19      	ldr	r3, [pc, #100]	@ (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	4916      	ldr	r1, [pc, #88]	@ (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	4313      	orrs	r3, r2
 8002874:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b00      	cmp	r3, #0
 8002880:	d009      	beq.n	8002896 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002882:	4b12      	ldr	r3, [pc, #72]	@ (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	490e      	ldr	r1, [pc, #56]	@ (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 8002892:	4313      	orrs	r3, r2
 8002894:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002896:	f000 f821 	bl	80028dc <HAL_RCC_GetSysClockFreq>
 800289a:	4602      	mov	r2, r0
 800289c:	4b0b      	ldr	r3, [pc, #44]	@ (80028cc <HAL_RCC_ClockConfig+0x1bc>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	091b      	lsrs	r3, r3, #4
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	490a      	ldr	r1, [pc, #40]	@ (80028d0 <HAL_RCC_ClockConfig+0x1c0>)
 80028a8:	5ccb      	ldrb	r3, [r1, r3]
 80028aa:	fa22 f303 	lsr.w	r3, r2, r3
 80028ae:	4a09      	ldr	r2, [pc, #36]	@ (80028d4 <HAL_RCC_ClockConfig+0x1c4>)
 80028b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80028b2:	4b09      	ldr	r3, [pc, #36]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c8>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fe fa30 	bl	8000d1c <HAL_InitTick>

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40023c00 	.word	0x40023c00
 80028cc:	40023800 	.word	0x40023800
 80028d0:	0800844c 	.word	0x0800844c
 80028d4:	20000000 	.word	0x20000000
 80028d8:	20000004 	.word	0x20000004

080028dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028e0:	b090      	sub	sp, #64	@ 0x40
 80028e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80028e4:	2300      	movs	r3, #0
 80028e6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028f4:	4b59      	ldr	r3, [pc, #356]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0x180>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f003 030c 	and.w	r3, r3, #12
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	d00d      	beq.n	800291c <HAL_RCC_GetSysClockFreq+0x40>
 8002900:	2b08      	cmp	r3, #8
 8002902:	f200 80a1 	bhi.w	8002a48 <HAL_RCC_GetSysClockFreq+0x16c>
 8002906:	2b00      	cmp	r3, #0
 8002908:	d002      	beq.n	8002910 <HAL_RCC_GetSysClockFreq+0x34>
 800290a:	2b04      	cmp	r3, #4
 800290c:	d003      	beq.n	8002916 <HAL_RCC_GetSysClockFreq+0x3a>
 800290e:	e09b      	b.n	8002a48 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002910:	4b53      	ldr	r3, [pc, #332]	@ (8002a60 <HAL_RCC_GetSysClockFreq+0x184>)
 8002912:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002914:	e09b      	b.n	8002a4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002916:	4b53      	ldr	r3, [pc, #332]	@ (8002a64 <HAL_RCC_GetSysClockFreq+0x188>)
 8002918:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800291a:	e098      	b.n	8002a4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800291c:	4b4f      	ldr	r3, [pc, #316]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0x180>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002924:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002926:	4b4d      	ldr	r3, [pc, #308]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d028      	beq.n	8002984 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002932:	4b4a      	ldr	r3, [pc, #296]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	099b      	lsrs	r3, r3, #6
 8002938:	2200      	movs	r2, #0
 800293a:	623b      	str	r3, [r7, #32]
 800293c:	627a      	str	r2, [r7, #36]	@ 0x24
 800293e:	6a3b      	ldr	r3, [r7, #32]
 8002940:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002944:	2100      	movs	r1, #0
 8002946:	4b47      	ldr	r3, [pc, #284]	@ (8002a64 <HAL_RCC_GetSysClockFreq+0x188>)
 8002948:	fb03 f201 	mul.w	r2, r3, r1
 800294c:	2300      	movs	r3, #0
 800294e:	fb00 f303 	mul.w	r3, r0, r3
 8002952:	4413      	add	r3, r2
 8002954:	4a43      	ldr	r2, [pc, #268]	@ (8002a64 <HAL_RCC_GetSysClockFreq+0x188>)
 8002956:	fba0 1202 	umull	r1, r2, r0, r2
 800295a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800295c:	460a      	mov	r2, r1
 800295e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002960:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002962:	4413      	add	r3, r2
 8002964:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002968:	2200      	movs	r2, #0
 800296a:	61bb      	str	r3, [r7, #24]
 800296c:	61fa      	str	r2, [r7, #28]
 800296e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002972:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002976:	f7fd fc93 	bl	80002a0 <__aeabi_uldivmod>
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	4613      	mov	r3, r2
 8002980:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002982:	e053      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002984:	4b35      	ldr	r3, [pc, #212]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	099b      	lsrs	r3, r3, #6
 800298a:	2200      	movs	r2, #0
 800298c:	613b      	str	r3, [r7, #16]
 800298e:	617a      	str	r2, [r7, #20]
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002996:	f04f 0b00 	mov.w	fp, #0
 800299a:	4652      	mov	r2, sl
 800299c:	465b      	mov	r3, fp
 800299e:	f04f 0000 	mov.w	r0, #0
 80029a2:	f04f 0100 	mov.w	r1, #0
 80029a6:	0159      	lsls	r1, r3, #5
 80029a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029ac:	0150      	lsls	r0, r2, #5
 80029ae:	4602      	mov	r2, r0
 80029b0:	460b      	mov	r3, r1
 80029b2:	ebb2 080a 	subs.w	r8, r2, sl
 80029b6:	eb63 090b 	sbc.w	r9, r3, fp
 80029ba:	f04f 0200 	mov.w	r2, #0
 80029be:	f04f 0300 	mov.w	r3, #0
 80029c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80029c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80029ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80029ce:	ebb2 0408 	subs.w	r4, r2, r8
 80029d2:	eb63 0509 	sbc.w	r5, r3, r9
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	00eb      	lsls	r3, r5, #3
 80029e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029e4:	00e2      	lsls	r2, r4, #3
 80029e6:	4614      	mov	r4, r2
 80029e8:	461d      	mov	r5, r3
 80029ea:	eb14 030a 	adds.w	r3, r4, sl
 80029ee:	603b      	str	r3, [r7, #0]
 80029f0:	eb45 030b 	adc.w	r3, r5, fp
 80029f4:	607b      	str	r3, [r7, #4]
 80029f6:	f04f 0200 	mov.w	r2, #0
 80029fa:	f04f 0300 	mov.w	r3, #0
 80029fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a02:	4629      	mov	r1, r5
 8002a04:	028b      	lsls	r3, r1, #10
 8002a06:	4621      	mov	r1, r4
 8002a08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a0c:	4621      	mov	r1, r4
 8002a0e:	028a      	lsls	r2, r1, #10
 8002a10:	4610      	mov	r0, r2
 8002a12:	4619      	mov	r1, r3
 8002a14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a16:	2200      	movs	r2, #0
 8002a18:	60bb      	str	r3, [r7, #8]
 8002a1a:	60fa      	str	r2, [r7, #12]
 8002a1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a20:	f7fd fc3e 	bl	80002a0 <__aeabi_uldivmod>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	4613      	mov	r3, r2
 8002a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	0c1b      	lsrs	r3, r3, #16
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	3301      	adds	r3, #1
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002a3c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a44:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a46:	e002      	b.n	8002a4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a48:	4b05      	ldr	r3, [pc, #20]	@ (8002a60 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a4a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002a4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3740      	adds	r7, #64	@ 0x40
 8002a54:	46bd      	mov	sp, r7
 8002a56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	00f42400 	.word	0x00f42400
 8002a64:	017d7840 	.word	0x017d7840

08002a68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a6c:	4b03      	ldr	r3, [pc, #12]	@ (8002a7c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	20000000 	.word	0x20000000

08002a80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a84:	f7ff fff0 	bl	8002a68 <HAL_RCC_GetHCLKFreq>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	4b05      	ldr	r3, [pc, #20]	@ (8002aa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	0a9b      	lsrs	r3, r3, #10
 8002a90:	f003 0307 	and.w	r3, r3, #7
 8002a94:	4903      	ldr	r1, [pc, #12]	@ (8002aa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a96:	5ccb      	ldrb	r3, [r1, r3]
 8002a98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	0800845c 	.word	0x0800845c

08002aa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002aac:	f7ff ffdc 	bl	8002a68 <HAL_RCC_GetHCLKFreq>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	4b05      	ldr	r3, [pc, #20]	@ (8002ac8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	0b5b      	lsrs	r3, r3, #13
 8002ab8:	f003 0307 	and.w	r3, r3, #7
 8002abc:	4903      	ldr	r1, [pc, #12]	@ (8002acc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002abe:	5ccb      	ldrb	r3, [r1, r3]
 8002ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	0800845c 	.word	0x0800845c

08002ad0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	220f      	movs	r2, #15
 8002ade:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ae0:	4b12      	ldr	r3, [pc, #72]	@ (8002b2c <HAL_RCC_GetClockConfig+0x5c>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f003 0203 	and.w	r2, r3, #3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002aec:	4b0f      	ldr	r3, [pc, #60]	@ (8002b2c <HAL_RCC_GetClockConfig+0x5c>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002af8:	4b0c      	ldr	r3, [pc, #48]	@ (8002b2c <HAL_RCC_GetClockConfig+0x5c>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002b04:	4b09      	ldr	r3, [pc, #36]	@ (8002b2c <HAL_RCC_GetClockConfig+0x5c>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	08db      	lsrs	r3, r3, #3
 8002b0a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b12:	4b07      	ldr	r3, [pc, #28]	@ (8002b30 <HAL_RCC_GetClockConfig+0x60>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0207 	and.w	r2, r3, #7
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	601a      	str	r2, [r3, #0]
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	40023c00 	.word	0x40023c00

08002b34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e041      	b.n	8002bca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d106      	bne.n	8002b60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f839 	bl	8002bd2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2202      	movs	r2, #2
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	3304      	adds	r3, #4
 8002b70:	4619      	mov	r1, r3
 8002b72:	4610      	mov	r0, r2
 8002b74:	f000 f9c0 	bl	8002ef8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
	...

08002be8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d001      	beq.n	8002c00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e04e      	b.n	8002c9e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2202      	movs	r2, #2
 8002c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f042 0201 	orr.w	r2, r2, #1
 8002c16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a23      	ldr	r2, [pc, #140]	@ (8002cac <HAL_TIM_Base_Start_IT+0xc4>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d022      	beq.n	8002c68 <HAL_TIM_Base_Start_IT+0x80>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c2a:	d01d      	beq.n	8002c68 <HAL_TIM_Base_Start_IT+0x80>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a1f      	ldr	r2, [pc, #124]	@ (8002cb0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d018      	beq.n	8002c68 <HAL_TIM_Base_Start_IT+0x80>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a1e      	ldr	r2, [pc, #120]	@ (8002cb4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d013      	beq.n	8002c68 <HAL_TIM_Base_Start_IT+0x80>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a1c      	ldr	r2, [pc, #112]	@ (8002cb8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d00e      	beq.n	8002c68 <HAL_TIM_Base_Start_IT+0x80>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a1b      	ldr	r2, [pc, #108]	@ (8002cbc <HAL_TIM_Base_Start_IT+0xd4>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d009      	beq.n	8002c68 <HAL_TIM_Base_Start_IT+0x80>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a19      	ldr	r2, [pc, #100]	@ (8002cc0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d004      	beq.n	8002c68 <HAL_TIM_Base_Start_IT+0x80>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a18      	ldr	r2, [pc, #96]	@ (8002cc4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d111      	bne.n	8002c8c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2b06      	cmp	r3, #6
 8002c78:	d010      	beq.n	8002c9c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f042 0201 	orr.w	r2, r2, #1
 8002c88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c8a:	e007      	b.n	8002c9c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0201 	orr.w	r2, r2, #1
 8002c9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	40010000 	.word	0x40010000
 8002cb0:	40000400 	.word	0x40000400
 8002cb4:	40000800 	.word	0x40000800
 8002cb8:	40000c00 	.word	0x40000c00
 8002cbc:	40010400 	.word	0x40010400
 8002cc0:	40014000 	.word	0x40014000
 8002cc4:	40001800 	.word	0x40001800

08002cc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d020      	beq.n	8002d2c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d01b      	beq.n	8002d2c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f06f 0202 	mvn.w	r2, #2
 8002cfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	f003 0303 	and.w	r3, r3, #3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 f8d2 	bl	8002ebc <HAL_TIM_IC_CaptureCallback>
 8002d18:	e005      	b.n	8002d26 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f8c4 	bl	8002ea8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 f8d5 	bl	8002ed0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	f003 0304 	and.w	r3, r3, #4
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d020      	beq.n	8002d78 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d01b      	beq.n	8002d78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f06f 0204 	mvn.w	r2, #4
 8002d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2202      	movs	r2, #2
 8002d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f8ac 	bl	8002ebc <HAL_TIM_IC_CaptureCallback>
 8002d64:	e005      	b.n	8002d72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f89e 	bl	8002ea8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 f8af 	bl	8002ed0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d020      	beq.n	8002dc4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f003 0308 	and.w	r3, r3, #8
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d01b      	beq.n	8002dc4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f06f 0208 	mvn.w	r2, #8
 8002d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2204      	movs	r2, #4
 8002d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	f003 0303 	and.w	r3, r3, #3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f886 	bl	8002ebc <HAL_TIM_IC_CaptureCallback>
 8002db0:	e005      	b.n	8002dbe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f878 	bl	8002ea8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 f889 	bl	8002ed0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	f003 0310 	and.w	r3, r3, #16
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d020      	beq.n	8002e10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f003 0310 	and.w	r3, r3, #16
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d01b      	beq.n	8002e10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f06f 0210 	mvn.w	r2, #16
 8002de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2208      	movs	r2, #8
 8002de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f860 	bl	8002ebc <HAL_TIM_IC_CaptureCallback>
 8002dfc:	e005      	b.n	8002e0a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 f852 	bl	8002ea8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 f863 	bl	8002ed0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00c      	beq.n	8002e34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d007      	beq.n	8002e34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f06f 0201 	mvn.w	r2, #1
 8002e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7fd fe3a 	bl	8000aa8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00c      	beq.n	8002e58 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d007      	beq.n	8002e58 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f900 	bl	8003058 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00c      	beq.n	8002e7c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d007      	beq.n	8002e7c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f834 	bl	8002ee4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	f003 0320 	and.w	r3, r3, #32
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00c      	beq.n	8002ea0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f003 0320 	and.w	r3, r3, #32
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d007      	beq.n	8002ea0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f06f 0220 	mvn.w	r2, #32
 8002e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f8d2 	bl	8003044 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ea0:	bf00      	nop
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a43      	ldr	r2, [pc, #268]	@ (8003018 <TIM_Base_SetConfig+0x120>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d013      	beq.n	8002f38 <TIM_Base_SetConfig+0x40>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f16:	d00f      	beq.n	8002f38 <TIM_Base_SetConfig+0x40>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a40      	ldr	r2, [pc, #256]	@ (800301c <TIM_Base_SetConfig+0x124>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d00b      	beq.n	8002f38 <TIM_Base_SetConfig+0x40>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a3f      	ldr	r2, [pc, #252]	@ (8003020 <TIM_Base_SetConfig+0x128>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d007      	beq.n	8002f38 <TIM_Base_SetConfig+0x40>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a3e      	ldr	r2, [pc, #248]	@ (8003024 <TIM_Base_SetConfig+0x12c>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d003      	beq.n	8002f38 <TIM_Base_SetConfig+0x40>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a3d      	ldr	r2, [pc, #244]	@ (8003028 <TIM_Base_SetConfig+0x130>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d108      	bne.n	8002f4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a32      	ldr	r2, [pc, #200]	@ (8003018 <TIM_Base_SetConfig+0x120>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d02b      	beq.n	8002faa <TIM_Base_SetConfig+0xb2>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f58:	d027      	beq.n	8002faa <TIM_Base_SetConfig+0xb2>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a2f      	ldr	r2, [pc, #188]	@ (800301c <TIM_Base_SetConfig+0x124>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d023      	beq.n	8002faa <TIM_Base_SetConfig+0xb2>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a2e      	ldr	r2, [pc, #184]	@ (8003020 <TIM_Base_SetConfig+0x128>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d01f      	beq.n	8002faa <TIM_Base_SetConfig+0xb2>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a2d      	ldr	r2, [pc, #180]	@ (8003024 <TIM_Base_SetConfig+0x12c>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d01b      	beq.n	8002faa <TIM_Base_SetConfig+0xb2>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a2c      	ldr	r2, [pc, #176]	@ (8003028 <TIM_Base_SetConfig+0x130>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d017      	beq.n	8002faa <TIM_Base_SetConfig+0xb2>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a2b      	ldr	r2, [pc, #172]	@ (800302c <TIM_Base_SetConfig+0x134>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d013      	beq.n	8002faa <TIM_Base_SetConfig+0xb2>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a2a      	ldr	r2, [pc, #168]	@ (8003030 <TIM_Base_SetConfig+0x138>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d00f      	beq.n	8002faa <TIM_Base_SetConfig+0xb2>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a29      	ldr	r2, [pc, #164]	@ (8003034 <TIM_Base_SetConfig+0x13c>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d00b      	beq.n	8002faa <TIM_Base_SetConfig+0xb2>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a28      	ldr	r2, [pc, #160]	@ (8003038 <TIM_Base_SetConfig+0x140>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d007      	beq.n	8002faa <TIM_Base_SetConfig+0xb2>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a27      	ldr	r2, [pc, #156]	@ (800303c <TIM_Base_SetConfig+0x144>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d003      	beq.n	8002faa <TIM_Base_SetConfig+0xb2>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a26      	ldr	r2, [pc, #152]	@ (8003040 <TIM_Base_SetConfig+0x148>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d108      	bne.n	8002fbc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	689a      	ldr	r2, [r3, #8]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a0e      	ldr	r2, [pc, #56]	@ (8003018 <TIM_Base_SetConfig+0x120>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d003      	beq.n	8002fea <TIM_Base_SetConfig+0xf2>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a10      	ldr	r2, [pc, #64]	@ (8003028 <TIM_Base_SetConfig+0x130>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d103      	bne.n	8002ff2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	691a      	ldr	r2, [r3, #16]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f043 0204 	orr.w	r2, r3, #4
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	601a      	str	r2, [r3, #0]
}
 800300a:	bf00      	nop
 800300c:	3714      	adds	r7, #20
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	40010000 	.word	0x40010000
 800301c:	40000400 	.word	0x40000400
 8003020:	40000800 	.word	0x40000800
 8003024:	40000c00 	.word	0x40000c00
 8003028:	40010400 	.word	0x40010400
 800302c:	40014000 	.word	0x40014000
 8003030:	40014400 	.word	0x40014400
 8003034:	40014800 	.word	0x40014800
 8003038:	40001800 	.word	0x40001800
 800303c:	40001c00 	.word	0x40001c00
 8003040:	40002000 	.word	0x40002000

08003044 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e042      	b.n	8003104 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d106      	bne.n	8003098 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7fd fd8e 	bl	8000bb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2224      	movs	r2, #36	@ 0x24
 800309c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68da      	ldr	r2, [r3, #12]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 febd 	bl	8003e30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	691a      	ldr	r2, [r3, #16]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80030c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	695a      	ldr	r2, [r3, #20]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80030d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68da      	ldr	r2, [r3, #12]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80030e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2220      	movs	r2, #32
 80030f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2220      	movs	r2, #32
 80030f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b08c      	sub	sp, #48	@ 0x30
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	4613      	mov	r3, r2
 8003118:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b20      	cmp	r3, #32
 8003124:	d146      	bne.n	80031b4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d002      	beq.n	8003132 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800312c:	88fb      	ldrh	r3, [r7, #6]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e03f      	b.n	80031b6 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2201      	movs	r2, #1
 800313a:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003142:	88fb      	ldrh	r3, [r7, #6]
 8003144:	461a      	mov	r2, r3
 8003146:	68b9      	ldr	r1, [r7, #8]
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f000 fc09 	bl	8003960 <UART_Start_Receive_DMA>
 800314e:	4603      	mov	r3, r0
 8003150:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003158:	2b01      	cmp	r3, #1
 800315a:	d125      	bne.n	80031a8 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 800315c:	2300      	movs	r3, #0
 800315e:	613b      	str	r3, [r7, #16]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	613b      	str	r3, [r7, #16]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	613b      	str	r3, [r7, #16]
 8003170:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	330c      	adds	r3, #12
 8003178:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	e853 3f00 	ldrex	r3, [r3]
 8003180:	617b      	str	r3, [r7, #20]
   return(result);
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f043 0310 	orr.w	r3, r3, #16
 8003188:	62bb      	str	r3, [r7, #40]	@ 0x28
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	330c      	adds	r3, #12
 8003190:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003192:	627a      	str	r2, [r7, #36]	@ 0x24
 8003194:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003196:	6a39      	ldr	r1, [r7, #32]
 8003198:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800319a:	e841 2300 	strex	r3, r2, [r1]
 800319e:	61fb      	str	r3, [r7, #28]
   return(result);
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1e5      	bne.n	8003172 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 80031a6:	e002      	b.n	80031ae <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 80031ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80031b2:	e000      	b.n	80031b6 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 80031b4:	2302      	movs	r3, #2
  }
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3730      	adds	r7, #48	@ 0x30
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
	...

080031c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b0ba      	sub	sp, #232	@ 0xe8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80031ec:	2300      	movs	r3, #0
 80031ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80031f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031f6:	f003 030f 	and.w	r3, r3, #15
 80031fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80031fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10f      	bne.n	8003226 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800320a:	f003 0320 	and.w	r3, r3, #32
 800320e:	2b00      	cmp	r3, #0
 8003210:	d009      	beq.n	8003226 <HAL_UART_IRQHandler+0x66>
 8003212:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003216:	f003 0320 	and.w	r3, r3, #32
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 fd48 	bl	8003cb4 <UART_Receive_IT>
      return;
 8003224:	e273      	b.n	800370e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003226:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 80de 	beq.w	80033ec <HAL_UART_IRQHandler+0x22c>
 8003230:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b00      	cmp	r3, #0
 800323a:	d106      	bne.n	800324a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800323c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003240:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003244:	2b00      	cmp	r3, #0
 8003246:	f000 80d1 	beq.w	80033ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800324a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00b      	beq.n	800326e <HAL_UART_IRQHandler+0xae>
 8003256:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800325a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800325e:	2b00      	cmp	r3, #0
 8003260:	d005      	beq.n	800326e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003266:	f043 0201 	orr.w	r2, r3, #1
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800326e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003272:	f003 0304 	and.w	r3, r3, #4
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00b      	beq.n	8003292 <HAL_UART_IRQHandler+0xd2>
 800327a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	d005      	beq.n	8003292 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800328a:	f043 0202 	orr.w	r2, r3, #2
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00b      	beq.n	80032b6 <HAL_UART_IRQHandler+0xf6>
 800329e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d005      	beq.n	80032b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ae:	f043 0204 	orr.w	r2, r3, #4
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80032b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032ba:	f003 0308 	and.w	r3, r3, #8
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d011      	beq.n	80032e6 <HAL_UART_IRQHandler+0x126>
 80032c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032c6:	f003 0320 	and.w	r3, r3, #32
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d105      	bne.n	80032da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80032ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d005      	beq.n	80032e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032de:	f043 0208 	orr.w	r2, r3, #8
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f000 820a 	beq.w	8003704 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032f4:	f003 0320 	and.w	r3, r3, #32
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d008      	beq.n	800330e <HAL_UART_IRQHandler+0x14e>
 80032fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003300:	f003 0320 	and.w	r3, r3, #32
 8003304:	2b00      	cmp	r3, #0
 8003306:	d002      	beq.n	800330e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 fcd3 	bl	8003cb4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003318:	2b40      	cmp	r3, #64	@ 0x40
 800331a:	bf0c      	ite	eq
 800331c:	2301      	moveq	r3, #1
 800331e:	2300      	movne	r3, #0
 8003320:	b2db      	uxtb	r3, r3
 8003322:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	2b00      	cmp	r3, #0
 8003330:	d103      	bne.n	800333a <HAL_UART_IRQHandler+0x17a>
 8003332:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003336:	2b00      	cmp	r3, #0
 8003338:	d04f      	beq.n	80033da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 fbde 	bl	8003afc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800334a:	2b40      	cmp	r3, #64	@ 0x40
 800334c:	d141      	bne.n	80033d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	3314      	adds	r3, #20
 8003354:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003358:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800335c:	e853 3f00 	ldrex	r3, [r3]
 8003360:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003364:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003368:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800336c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	3314      	adds	r3, #20
 8003376:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800337a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800337e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003382:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003386:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800338a:	e841 2300 	strex	r3, r2, [r1]
 800338e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003392:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1d9      	bne.n	800334e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d013      	beq.n	80033ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033a6:	4a8a      	ldr	r2, [pc, #552]	@ (80035d0 <HAL_UART_IRQHandler+0x410>)
 80033a8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7fe f946 	bl	8001640 <HAL_DMA_Abort_IT>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d016      	beq.n	80033e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80033c4:	4610      	mov	r0, r2
 80033c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c8:	e00e      	b.n	80033e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f9c0 	bl	8003750 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d0:	e00a      	b.n	80033e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f9bc 	bl	8003750 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d8:	e006      	b.n	80033e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f9b8 	bl	8003750 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80033e6:	e18d      	b.n	8003704 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033e8:	bf00      	nop
    return;
 80033ea:	e18b      	b.n	8003704 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	f040 8167 	bne.w	80036c4 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80033f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033fa:	f003 0310 	and.w	r3, r3, #16
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f000 8160 	beq.w	80036c4 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8003404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003408:	f003 0310 	and.w	r3, r3, #16
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 8159 	beq.w	80036c4 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003412:	2300      	movs	r3, #0
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	60bb      	str	r3, [r7, #8]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	60bb      	str	r3, [r7, #8]
 8003426:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003432:	2b40      	cmp	r3, #64	@ 0x40
 8003434:	f040 80ce 	bne.w	80035d4 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003444:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 80a9 	beq.w	80035a0 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003452:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003456:	429a      	cmp	r2, r3
 8003458:	f080 80a2 	bcs.w	80035a0 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003462:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800346e:	f000 8088 	beq.w	8003582 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	330c      	adds	r3, #12
 8003478:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800347c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003480:	e853 3f00 	ldrex	r3, [r3]
 8003484:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003488:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800348c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003490:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	330c      	adds	r3, #12
 800349a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800349e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80034a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80034aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80034ae:	e841 2300 	strex	r3, r2, [r1]
 80034b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80034b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1d9      	bne.n	8003472 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	3314      	adds	r3, #20
 80034c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034c8:	e853 3f00 	ldrex	r3, [r3]
 80034cc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80034ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80034d0:	f023 0301 	bic.w	r3, r3, #1
 80034d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	3314      	adds	r3, #20
 80034de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80034e2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80034e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80034ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80034ee:	e841 2300 	strex	r3, r2, [r1]
 80034f2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80034f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1e1      	bne.n	80034be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	3314      	adds	r3, #20
 8003500:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003502:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003504:	e853 3f00 	ldrex	r3, [r3]
 8003508:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800350a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800350c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003510:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	3314      	adds	r3, #20
 800351a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800351e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003520:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003522:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003524:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003526:	e841 2300 	strex	r3, r2, [r1]
 800352a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800352c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1e3      	bne.n	80034fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2220      	movs	r2, #32
 8003536:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	330c      	adds	r3, #12
 8003546:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003548:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800354a:	e853 3f00 	ldrex	r3, [r3]
 800354e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003550:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003552:	f023 0310 	bic.w	r3, r3, #16
 8003556:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	330c      	adds	r3, #12
 8003560:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003564:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003566:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003568:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800356a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800356c:	e841 2300 	strex	r3, r2, [r1]
 8003570:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003572:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1e3      	bne.n	8003540 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800357c:	4618      	mov	r0, r3
 800357e:	f7fd ffef 	bl	8001560 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2202      	movs	r2, #2
 8003586:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003590:	b29b      	uxth	r3, r3
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	b29b      	uxth	r3, r3
 8003596:	4619      	mov	r1, r3
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f7fd f869 	bl	8000670 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800359e:	e0b3      	b.n	8003708 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80035a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80035a8:	429a      	cmp	r2, r3
 80035aa:	f040 80ad 	bne.w	8003708 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035b2:	69db      	ldr	r3, [r3, #28]
 80035b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035b8:	f040 80a6 	bne.w	8003708 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2202      	movs	r2, #2
 80035c0:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80035c6:	4619      	mov	r1, r3
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7fd f851 	bl	8000670 <HAL_UARTEx_RxEventCallback>
      return;
 80035ce:	e09b      	b.n	8003708 <HAL_UART_IRQHandler+0x548>
 80035d0:	08003bc3 	.word	0x08003bc3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035dc:	b29b      	uxth	r3, r3
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f000 808e 	beq.w	800370c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80035f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 8089 	beq.w	800370c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	330c      	adds	r3, #12
 8003600:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003604:	e853 3f00 	ldrex	r3, [r3]
 8003608:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800360a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800360c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003610:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	330c      	adds	r3, #12
 800361a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800361e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003620:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003622:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003624:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003626:	e841 2300 	strex	r3, r2, [r1]
 800362a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800362c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1e3      	bne.n	80035fa <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	3314      	adds	r3, #20
 8003638:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363c:	e853 3f00 	ldrex	r3, [r3]
 8003640:	623b      	str	r3, [r7, #32]
   return(result);
 8003642:	6a3b      	ldr	r3, [r7, #32]
 8003644:	f023 0301 	bic.w	r3, r3, #1
 8003648:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	3314      	adds	r3, #20
 8003652:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003656:	633a      	str	r2, [r7, #48]	@ 0x30
 8003658:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800365a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800365c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800365e:	e841 2300 	strex	r3, r2, [r1]
 8003662:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1e3      	bne.n	8003632 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2220      	movs	r2, #32
 800366e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	330c      	adds	r3, #12
 800367e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	e853 3f00 	ldrex	r3, [r3]
 8003686:	60fb      	str	r3, [r7, #12]
   return(result);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f023 0310 	bic.w	r3, r3, #16
 800368e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	330c      	adds	r3, #12
 8003698:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800369c:	61fa      	str	r2, [r7, #28]
 800369e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a0:	69b9      	ldr	r1, [r7, #24]
 80036a2:	69fa      	ldr	r2, [r7, #28]
 80036a4:	e841 2300 	strex	r3, r2, [r1]
 80036a8:	617b      	str	r3, [r7, #20]
   return(result);
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1e3      	bne.n	8003678 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2202      	movs	r2, #2
 80036b4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80036ba:	4619      	mov	r1, r3
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7fc ffd7 	bl	8000670 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80036c2:	e023      	b.n	800370c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80036c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d009      	beq.n	80036e4 <HAL_UART_IRQHandler+0x524>
 80036d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d003      	beq.n	80036e4 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 fa81 	bl	8003be4 <UART_Transmit_IT>
    return;
 80036e2:	e014      	b.n	800370e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80036e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00e      	beq.n	800370e <HAL_UART_IRQHandler+0x54e>
 80036f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d008      	beq.n	800370e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 fac1 	bl	8003c84 <UART_EndTransmit_IT>
    return;
 8003702:	e004      	b.n	800370e <HAL_UART_IRQHandler+0x54e>
    return;
 8003704:	bf00      	nop
 8003706:	e002      	b.n	800370e <HAL_UART_IRQHandler+0x54e>
      return;
 8003708:	bf00      	nop
 800370a:	e000      	b.n	800370e <HAL_UART_IRQHandler+0x54e>
      return;
 800370c:	bf00      	nop
  }
}
 800370e:	37e8      	adds	r7, #232	@ 0xe8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b09c      	sub	sp, #112	@ 0x70
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003770:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800377c:	2b00      	cmp	r3, #0
 800377e:	d172      	bne.n	8003866 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003780:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003782:	2200      	movs	r2, #0
 8003784:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003786:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	330c      	adds	r3, #12
 800378c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003790:	e853 3f00 	ldrex	r3, [r3]
 8003794:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003796:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003798:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800379c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800379e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	330c      	adds	r3, #12
 80037a4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80037a6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80037a8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80037ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80037ae:	e841 2300 	strex	r3, r2, [r1]
 80037b2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80037b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1e5      	bne.n	8003786 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	3314      	adds	r3, #20
 80037c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037c4:	e853 3f00 	ldrex	r3, [r3]
 80037c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80037ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037cc:	f023 0301 	bic.w	r3, r3, #1
 80037d0:	667b      	str	r3, [r7, #100]	@ 0x64
 80037d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	3314      	adds	r3, #20
 80037d8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80037da:	647a      	str	r2, [r7, #68]	@ 0x44
 80037dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80037e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037e2:	e841 2300 	strex	r3, r2, [r1]
 80037e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80037e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1e5      	bne.n	80037ba <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	3314      	adds	r3, #20
 80037f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f8:	e853 3f00 	ldrex	r3, [r3]
 80037fc:	623b      	str	r3, [r7, #32]
   return(result);
 80037fe:	6a3b      	ldr	r3, [r7, #32]
 8003800:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003804:	663b      	str	r3, [r7, #96]	@ 0x60
 8003806:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	3314      	adds	r3, #20
 800380c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800380e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003810:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003812:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003814:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003816:	e841 2300 	strex	r3, r2, [r1]
 800381a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800381c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1e5      	bne.n	80037ee <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003822:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003824:	2220      	movs	r2, #32
 8003826:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800382a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800382c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800382e:	2b01      	cmp	r3, #1
 8003830:	d119      	bne.n	8003866 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003832:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	330c      	adds	r3, #12
 8003838:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	e853 3f00 	ldrex	r3, [r3]
 8003840:	60fb      	str	r3, [r7, #12]
   return(result);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f023 0310 	bic.w	r3, r3, #16
 8003848:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800384a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	330c      	adds	r3, #12
 8003850:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003852:	61fa      	str	r2, [r7, #28]
 8003854:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003856:	69b9      	ldr	r1, [r7, #24]
 8003858:	69fa      	ldr	r2, [r7, #28]
 800385a:	e841 2300 	strex	r3, r2, [r1]
 800385e:	617b      	str	r3, [r7, #20]
   return(result);
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1e5      	bne.n	8003832 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003866:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003868:	2200      	movs	r2, #0
 800386a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800386c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800386e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003870:	2b01      	cmp	r3, #1
 8003872:	d106      	bne.n	8003882 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003874:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003876:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003878:	4619      	mov	r1, r3
 800387a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800387c:	f7fc fef8 	bl	8000670 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003880:	e002      	b.n	8003888 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003882:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003884:	f7ff ff50 	bl	8003728 <HAL_UART_RxCpltCallback>
}
 8003888:	bf00      	nop
 800388a:	3770      	adds	r7, #112	@ 0x70
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800389c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2201      	movs	r2, #1
 80038a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d108      	bne.n	80038be <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80038b0:	085b      	lsrs	r3, r3, #1
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	4619      	mov	r1, r3
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f7fc feda 	bl	8000670 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80038bc:	e002      	b.n	80038c4 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f7ff ff3c 	bl	800373c <HAL_UART_RxHalfCpltCallback>
}
 80038c4:	bf00      	nop
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80038d4:	2300      	movs	r3, #0
 80038d6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038dc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038e8:	2b80      	cmp	r3, #128	@ 0x80
 80038ea:	bf0c      	ite	eq
 80038ec:	2301      	moveq	r3, #1
 80038ee:	2300      	movne	r3, #0
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b21      	cmp	r3, #33	@ 0x21
 80038fe:	d108      	bne.n	8003912 <UART_DMAError+0x46>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d005      	beq.n	8003912 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	2200      	movs	r2, #0
 800390a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800390c:	68b8      	ldr	r0, [r7, #8]
 800390e:	f000 f8cd 	bl	8003aac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800391c:	2b40      	cmp	r3, #64	@ 0x40
 800391e:	bf0c      	ite	eq
 8003920:	2301      	moveq	r3, #1
 8003922:	2300      	movne	r3, #0
 8003924:	b2db      	uxtb	r3, r3
 8003926:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b22      	cmp	r3, #34	@ 0x22
 8003932:	d108      	bne.n	8003946 <UART_DMAError+0x7a>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d005      	beq.n	8003946 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	2200      	movs	r2, #0
 800393e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003940:	68b8      	ldr	r0, [r7, #8]
 8003942:	f000 f8db 	bl	8003afc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800394a:	f043 0210 	orr.w	r2, r3, #16
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003952:	68b8      	ldr	r0, [r7, #8]
 8003954:	f7ff fefc 	bl	8003750 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003958:	bf00      	nop
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b098      	sub	sp, #96	@ 0x60
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	4613      	mov	r3, r2
 800396c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800396e:	68ba      	ldr	r2, [r7, #8]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	88fa      	ldrh	r2, [r7, #6]
 8003978:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2222      	movs	r2, #34	@ 0x22
 8003984:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800398c:	4a44      	ldr	r2, [pc, #272]	@ (8003aa0 <UART_Start_Receive_DMA+0x140>)
 800398e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003994:	4a43      	ldr	r2, [pc, #268]	@ (8003aa4 <UART_Start_Receive_DMA+0x144>)
 8003996:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800399c:	4a42      	ldr	r2, [pc, #264]	@ (8003aa8 <UART_Start_Receive_DMA+0x148>)
 800399e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039a4:	2200      	movs	r2, #0
 80039a6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80039a8:	f107 0308 	add.w	r3, r7, #8
 80039ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	3304      	adds	r3, #4
 80039b8:	4619      	mov	r1, r3
 80039ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	88fb      	ldrh	r3, [r7, #6]
 80039c0:	f7fd fd76 	bl	80014b0 <HAL_DMA_Start_IT>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d008      	beq.n	80039dc <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2210      	movs	r2, #16
 80039ce:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2220      	movs	r2, #32
 80039d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e05d      	b.n	8003a98 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80039dc:	2300      	movs	r3, #0
 80039de:	613b      	str	r3, [r7, #16]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	613b      	str	r3, [r7, #16]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	613b      	str	r3, [r7, #16]
 80039f0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d019      	beq.n	8003a2e <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	330c      	adds	r3, #12
 8003a00:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a04:	e853 3f00 	ldrex	r3, [r3]
 8003a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a10:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	330c      	adds	r3, #12
 8003a18:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a1a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003a1c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003a20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a22:	e841 2300 	strex	r3, r2, [r1]
 8003a26:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003a28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1e5      	bne.n	80039fa <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	3314      	adds	r3, #20
 8003a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a38:	e853 3f00 	ldrex	r3, [r3]
 8003a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a40:	f043 0301 	orr.w	r3, r3, #1
 8003a44:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	3314      	adds	r3, #20
 8003a4c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003a4e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003a50:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a52:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003a54:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003a56:	e841 2300 	strex	r3, r2, [r1]
 8003a5a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1e5      	bne.n	8003a2e <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	3314      	adds	r3, #20
 8003a68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	e853 3f00 	ldrex	r3, [r3]
 8003a70:	617b      	str	r3, [r7, #20]
   return(result);
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a78:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	3314      	adds	r3, #20
 8003a80:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003a82:	627a      	str	r2, [r7, #36]	@ 0x24
 8003a84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a86:	6a39      	ldr	r1, [r7, #32]
 8003a88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a8a:	e841 2300 	strex	r3, r2, [r1]
 8003a8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1e5      	bne.n	8003a62 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3760      	adds	r7, #96	@ 0x60
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	08003765 	.word	0x08003765
 8003aa4:	08003891 	.word	0x08003891
 8003aa8:	080038cd 	.word	0x080038cd

08003aac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b089      	sub	sp, #36	@ 0x24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	330c      	adds	r3, #12
 8003aba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	e853 3f00 	ldrex	r3, [r3]
 8003ac2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003aca:	61fb      	str	r3, [r7, #28]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	330c      	adds	r3, #12
 8003ad2:	69fa      	ldr	r2, [r7, #28]
 8003ad4:	61ba      	str	r2, [r7, #24]
 8003ad6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad8:	6979      	ldr	r1, [r7, #20]
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	e841 2300 	strex	r3, r2, [r1]
 8003ae0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1e5      	bne.n	8003ab4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2220      	movs	r2, #32
 8003aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003af0:	bf00      	nop
 8003af2:	3724      	adds	r7, #36	@ 0x24
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b095      	sub	sp, #84	@ 0x54
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	330c      	adds	r3, #12
 8003b0a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b0e:	e853 3f00 	ldrex	r3, [r3]
 8003b12:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	330c      	adds	r3, #12
 8003b22:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b24:	643a      	str	r2, [r7, #64]	@ 0x40
 8003b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b28:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b2a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b2c:	e841 2300 	strex	r3, r2, [r1]
 8003b30:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1e5      	bne.n	8003b04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	3314      	adds	r3, #20
 8003b3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	e853 3f00 	ldrex	r3, [r3]
 8003b46:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	f023 0301 	bic.w	r3, r3, #1
 8003b4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	3314      	adds	r3, #20
 8003b56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b58:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b60:	e841 2300 	strex	r3, r2, [r1]
 8003b64:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1e5      	bne.n	8003b38 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d119      	bne.n	8003ba8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	330c      	adds	r3, #12
 8003b7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	e853 3f00 	ldrex	r3, [r3]
 8003b82:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	f023 0310 	bic.w	r3, r3, #16
 8003b8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	330c      	adds	r3, #12
 8003b92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b94:	61ba      	str	r2, [r7, #24]
 8003b96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b98:	6979      	ldr	r1, [r7, #20]
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	e841 2300 	strex	r3, r2, [r1]
 8003ba0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1e5      	bne.n	8003b74 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2220      	movs	r2, #32
 8003bac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003bb6:	bf00      	nop
 8003bb8:	3754      	adds	r7, #84	@ 0x54
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr

08003bc2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b084      	sub	sp, #16
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f7ff fdba 	bl	8003750 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bdc:	bf00      	nop
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b21      	cmp	r3, #33	@ 0x21
 8003bf6:	d13e      	bne.n	8003c76 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c00:	d114      	bne.n	8003c2c <UART_Transmit_IT+0x48>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d110      	bne.n	8003c2c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	881b      	ldrh	r3, [r3, #0]
 8003c14:	461a      	mov	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c1e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a1b      	ldr	r3, [r3, #32]
 8003c24:	1c9a      	adds	r2, r3, #2
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	621a      	str	r2, [r3, #32]
 8003c2a:	e008      	b.n	8003c3e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	1c59      	adds	r1, r3, #1
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	6211      	str	r1, [r2, #32]
 8003c36:	781a      	ldrb	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	3b01      	subs	r3, #1
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10f      	bne.n	8003c72 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68da      	ldr	r2, [r3, #12]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c60:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68da      	ldr	r2, [r3, #12]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c70:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c72:	2300      	movs	r3, #0
 8003c74:	e000      	b.n	8003c78 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c76:	2302      	movs	r3, #2
  }
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3714      	adds	r7, #20
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68da      	ldr	r2, [r3, #12]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c9a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f7ff fd35 	bl	8003714 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b08c      	sub	sp, #48	@ 0x30
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b22      	cmp	r3, #34	@ 0x22
 8003cce:	f040 80aa 	bne.w	8003e26 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cda:	d115      	bne.n	8003d08 <UART_Receive_IT+0x54>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d111      	bne.n	8003d08 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cfa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d00:	1c9a      	adds	r2, r3, #2
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d06:	e024      	b.n	8003d52 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d16:	d007      	beq.n	8003d28 <UART_Receive_IT+0x74>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d10a      	bne.n	8003d36 <UART_Receive_IT+0x82>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d106      	bne.n	8003d36 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	b2da      	uxtb	r2, r3
 8003d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d32:	701a      	strb	r2, [r3, #0]
 8003d34:	e008      	b.n	8003d48 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d42:	b2da      	uxtb	r2, r3
 8003d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d46:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d4c:	1c5a      	adds	r2, r3, #1
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	4619      	mov	r1, r3
 8003d60:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d15d      	bne.n	8003e22 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68da      	ldr	r2, [r3, #12]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 0220 	bic.w	r2, r2, #32
 8003d74:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68da      	ldr	r2, [r3, #12]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d84:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	695a      	ldr	r2, [r3, #20]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 0201 	bic.w	r2, r2, #1
 8003d94:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2220      	movs	r2, #32
 8003d9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d135      	bne.n	8003e18 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	330c      	adds	r3, #12
 8003db8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	e853 3f00 	ldrex	r3, [r3]
 8003dc0:	613b      	str	r3, [r7, #16]
   return(result);
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f023 0310 	bic.w	r3, r3, #16
 8003dc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	330c      	adds	r3, #12
 8003dd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dd2:	623a      	str	r2, [r7, #32]
 8003dd4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd6:	69f9      	ldr	r1, [r7, #28]
 8003dd8:	6a3a      	ldr	r2, [r7, #32]
 8003dda:	e841 2300 	strex	r3, r2, [r1]
 8003dde:	61bb      	str	r3, [r7, #24]
   return(result);
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1e5      	bne.n	8003db2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0310 	and.w	r3, r3, #16
 8003df0:	2b10      	cmp	r3, #16
 8003df2:	d10a      	bne.n	8003e0a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003df4:	2300      	movs	r3, #0
 8003df6:	60fb      	str	r3, [r7, #12]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	60fb      	str	r3, [r7, #12]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	60fb      	str	r3, [r7, #12]
 8003e08:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e0e:	4619      	mov	r1, r3
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f7fc fc2d 	bl	8000670 <HAL_UARTEx_RxEventCallback>
 8003e16:	e002      	b.n	8003e1e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f7ff fc85 	bl	8003728 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	e002      	b.n	8003e28 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003e22:	2300      	movs	r3, #0
 8003e24:	e000      	b.n	8003e28 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003e26:	2302      	movs	r3, #2
  }
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3730      	adds	r7, #48	@ 0x30
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e34:	b0c0      	sub	sp, #256	@ 0x100
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e4c:	68d9      	ldr	r1, [r3, #12]
 8003e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	ea40 0301 	orr.w	r3, r0, r1
 8003e58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e5e:	689a      	ldr	r2, [r3, #8]
 8003e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	431a      	orrs	r2, r3
 8003e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003e88:	f021 010c 	bic.w	r1, r1, #12
 8003e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003e96:	430b      	orrs	r3, r1
 8003e98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eaa:	6999      	ldr	r1, [r3, #24]
 8003eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	ea40 0301 	orr.w	r3, r0, r1
 8003eb6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	4b8f      	ldr	r3, [pc, #572]	@ (80040fc <UART_SetConfig+0x2cc>)
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d005      	beq.n	8003ed0 <UART_SetConfig+0xa0>
 8003ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	4b8d      	ldr	r3, [pc, #564]	@ (8004100 <UART_SetConfig+0x2d0>)
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d104      	bne.n	8003eda <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ed0:	f7fe fdea 	bl	8002aa8 <HAL_RCC_GetPCLK2Freq>
 8003ed4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003ed8:	e003      	b.n	8003ee2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003eda:	f7fe fdd1 	bl	8002a80 <HAL_RCC_GetPCLK1Freq>
 8003ede:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ee6:	69db      	ldr	r3, [r3, #28]
 8003ee8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003eec:	f040 810c 	bne.w	8004108 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ef0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003efa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003efe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003f02:	4622      	mov	r2, r4
 8003f04:	462b      	mov	r3, r5
 8003f06:	1891      	adds	r1, r2, r2
 8003f08:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003f0a:	415b      	adcs	r3, r3
 8003f0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003f12:	4621      	mov	r1, r4
 8003f14:	eb12 0801 	adds.w	r8, r2, r1
 8003f18:	4629      	mov	r1, r5
 8003f1a:	eb43 0901 	adc.w	r9, r3, r1
 8003f1e:	f04f 0200 	mov.w	r2, #0
 8003f22:	f04f 0300 	mov.w	r3, #0
 8003f26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f32:	4690      	mov	r8, r2
 8003f34:	4699      	mov	r9, r3
 8003f36:	4623      	mov	r3, r4
 8003f38:	eb18 0303 	adds.w	r3, r8, r3
 8003f3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003f40:	462b      	mov	r3, r5
 8003f42:	eb49 0303 	adc.w	r3, r9, r3
 8003f46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003f56:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003f5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003f5e:	460b      	mov	r3, r1
 8003f60:	18db      	adds	r3, r3, r3
 8003f62:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f64:	4613      	mov	r3, r2
 8003f66:	eb42 0303 	adc.w	r3, r2, r3
 8003f6a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003f70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003f74:	f7fc f994 	bl	80002a0 <__aeabi_uldivmod>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	4b61      	ldr	r3, [pc, #388]	@ (8004104 <UART_SetConfig+0x2d4>)
 8003f7e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f82:	095b      	lsrs	r3, r3, #5
 8003f84:	011c      	lsls	r4, r3, #4
 8003f86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f90:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003f94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003f98:	4642      	mov	r2, r8
 8003f9a:	464b      	mov	r3, r9
 8003f9c:	1891      	adds	r1, r2, r2
 8003f9e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003fa0:	415b      	adcs	r3, r3
 8003fa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fa4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003fa8:	4641      	mov	r1, r8
 8003faa:	eb12 0a01 	adds.w	sl, r2, r1
 8003fae:	4649      	mov	r1, r9
 8003fb0:	eb43 0b01 	adc.w	fp, r3, r1
 8003fb4:	f04f 0200 	mov.w	r2, #0
 8003fb8:	f04f 0300 	mov.w	r3, #0
 8003fbc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003fc0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003fc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fc8:	4692      	mov	sl, r2
 8003fca:	469b      	mov	fp, r3
 8003fcc:	4643      	mov	r3, r8
 8003fce:	eb1a 0303 	adds.w	r3, sl, r3
 8003fd2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003fd6:	464b      	mov	r3, r9
 8003fd8:	eb4b 0303 	adc.w	r3, fp, r3
 8003fdc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003fec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003ff0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	18db      	adds	r3, r3, r3
 8003ff8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	eb42 0303 	adc.w	r3, r2, r3
 8004000:	647b      	str	r3, [r7, #68]	@ 0x44
 8004002:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004006:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800400a:	f7fc f949 	bl	80002a0 <__aeabi_uldivmod>
 800400e:	4602      	mov	r2, r0
 8004010:	460b      	mov	r3, r1
 8004012:	4611      	mov	r1, r2
 8004014:	4b3b      	ldr	r3, [pc, #236]	@ (8004104 <UART_SetConfig+0x2d4>)
 8004016:	fba3 2301 	umull	r2, r3, r3, r1
 800401a:	095b      	lsrs	r3, r3, #5
 800401c:	2264      	movs	r2, #100	@ 0x64
 800401e:	fb02 f303 	mul.w	r3, r2, r3
 8004022:	1acb      	subs	r3, r1, r3
 8004024:	00db      	lsls	r3, r3, #3
 8004026:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800402a:	4b36      	ldr	r3, [pc, #216]	@ (8004104 <UART_SetConfig+0x2d4>)
 800402c:	fba3 2302 	umull	r2, r3, r3, r2
 8004030:	095b      	lsrs	r3, r3, #5
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004038:	441c      	add	r4, r3
 800403a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800403e:	2200      	movs	r2, #0
 8004040:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004044:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004048:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800404c:	4642      	mov	r2, r8
 800404e:	464b      	mov	r3, r9
 8004050:	1891      	adds	r1, r2, r2
 8004052:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004054:	415b      	adcs	r3, r3
 8004056:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004058:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800405c:	4641      	mov	r1, r8
 800405e:	1851      	adds	r1, r2, r1
 8004060:	6339      	str	r1, [r7, #48]	@ 0x30
 8004062:	4649      	mov	r1, r9
 8004064:	414b      	adcs	r3, r1
 8004066:	637b      	str	r3, [r7, #52]	@ 0x34
 8004068:	f04f 0200 	mov.w	r2, #0
 800406c:	f04f 0300 	mov.w	r3, #0
 8004070:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004074:	4659      	mov	r1, fp
 8004076:	00cb      	lsls	r3, r1, #3
 8004078:	4651      	mov	r1, sl
 800407a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800407e:	4651      	mov	r1, sl
 8004080:	00ca      	lsls	r2, r1, #3
 8004082:	4610      	mov	r0, r2
 8004084:	4619      	mov	r1, r3
 8004086:	4603      	mov	r3, r0
 8004088:	4642      	mov	r2, r8
 800408a:	189b      	adds	r3, r3, r2
 800408c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004090:	464b      	mov	r3, r9
 8004092:	460a      	mov	r2, r1
 8004094:	eb42 0303 	adc.w	r3, r2, r3
 8004098:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800409c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80040a8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80040ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80040b0:	460b      	mov	r3, r1
 80040b2:	18db      	adds	r3, r3, r3
 80040b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040b6:	4613      	mov	r3, r2
 80040b8:	eb42 0303 	adc.w	r3, r2, r3
 80040bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80040c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80040c6:	f7fc f8eb 	bl	80002a0 <__aeabi_uldivmod>
 80040ca:	4602      	mov	r2, r0
 80040cc:	460b      	mov	r3, r1
 80040ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004104 <UART_SetConfig+0x2d4>)
 80040d0:	fba3 1302 	umull	r1, r3, r3, r2
 80040d4:	095b      	lsrs	r3, r3, #5
 80040d6:	2164      	movs	r1, #100	@ 0x64
 80040d8:	fb01 f303 	mul.w	r3, r1, r3
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	3332      	adds	r3, #50	@ 0x32
 80040e2:	4a08      	ldr	r2, [pc, #32]	@ (8004104 <UART_SetConfig+0x2d4>)
 80040e4:	fba2 2303 	umull	r2, r3, r2, r3
 80040e8:	095b      	lsrs	r3, r3, #5
 80040ea:	f003 0207 	and.w	r2, r3, #7
 80040ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4422      	add	r2, r4
 80040f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80040f8:	e106      	b.n	8004308 <UART_SetConfig+0x4d8>
 80040fa:	bf00      	nop
 80040fc:	40011000 	.word	0x40011000
 8004100:	40011400 	.word	0x40011400
 8004104:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004108:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800410c:	2200      	movs	r2, #0
 800410e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004112:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004116:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800411a:	4642      	mov	r2, r8
 800411c:	464b      	mov	r3, r9
 800411e:	1891      	adds	r1, r2, r2
 8004120:	6239      	str	r1, [r7, #32]
 8004122:	415b      	adcs	r3, r3
 8004124:	627b      	str	r3, [r7, #36]	@ 0x24
 8004126:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800412a:	4641      	mov	r1, r8
 800412c:	1854      	adds	r4, r2, r1
 800412e:	4649      	mov	r1, r9
 8004130:	eb43 0501 	adc.w	r5, r3, r1
 8004134:	f04f 0200 	mov.w	r2, #0
 8004138:	f04f 0300 	mov.w	r3, #0
 800413c:	00eb      	lsls	r3, r5, #3
 800413e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004142:	00e2      	lsls	r2, r4, #3
 8004144:	4614      	mov	r4, r2
 8004146:	461d      	mov	r5, r3
 8004148:	4643      	mov	r3, r8
 800414a:	18e3      	adds	r3, r4, r3
 800414c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004150:	464b      	mov	r3, r9
 8004152:	eb45 0303 	adc.w	r3, r5, r3
 8004156:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800415a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004166:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800416a:	f04f 0200 	mov.w	r2, #0
 800416e:	f04f 0300 	mov.w	r3, #0
 8004172:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004176:	4629      	mov	r1, r5
 8004178:	008b      	lsls	r3, r1, #2
 800417a:	4621      	mov	r1, r4
 800417c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004180:	4621      	mov	r1, r4
 8004182:	008a      	lsls	r2, r1, #2
 8004184:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004188:	f7fc f88a 	bl	80002a0 <__aeabi_uldivmod>
 800418c:	4602      	mov	r2, r0
 800418e:	460b      	mov	r3, r1
 8004190:	4b60      	ldr	r3, [pc, #384]	@ (8004314 <UART_SetConfig+0x4e4>)
 8004192:	fba3 2302 	umull	r2, r3, r3, r2
 8004196:	095b      	lsrs	r3, r3, #5
 8004198:	011c      	lsls	r4, r3, #4
 800419a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800419e:	2200      	movs	r2, #0
 80041a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80041a4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80041a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80041ac:	4642      	mov	r2, r8
 80041ae:	464b      	mov	r3, r9
 80041b0:	1891      	adds	r1, r2, r2
 80041b2:	61b9      	str	r1, [r7, #24]
 80041b4:	415b      	adcs	r3, r3
 80041b6:	61fb      	str	r3, [r7, #28]
 80041b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041bc:	4641      	mov	r1, r8
 80041be:	1851      	adds	r1, r2, r1
 80041c0:	6139      	str	r1, [r7, #16]
 80041c2:	4649      	mov	r1, r9
 80041c4:	414b      	adcs	r3, r1
 80041c6:	617b      	str	r3, [r7, #20]
 80041c8:	f04f 0200 	mov.w	r2, #0
 80041cc:	f04f 0300 	mov.w	r3, #0
 80041d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041d4:	4659      	mov	r1, fp
 80041d6:	00cb      	lsls	r3, r1, #3
 80041d8:	4651      	mov	r1, sl
 80041da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041de:	4651      	mov	r1, sl
 80041e0:	00ca      	lsls	r2, r1, #3
 80041e2:	4610      	mov	r0, r2
 80041e4:	4619      	mov	r1, r3
 80041e6:	4603      	mov	r3, r0
 80041e8:	4642      	mov	r2, r8
 80041ea:	189b      	adds	r3, r3, r2
 80041ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80041f0:	464b      	mov	r3, r9
 80041f2:	460a      	mov	r2, r1
 80041f4:	eb42 0303 	adc.w	r3, r2, r3
 80041f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80041fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004206:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004208:	f04f 0200 	mov.w	r2, #0
 800420c:	f04f 0300 	mov.w	r3, #0
 8004210:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004214:	4649      	mov	r1, r9
 8004216:	008b      	lsls	r3, r1, #2
 8004218:	4641      	mov	r1, r8
 800421a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800421e:	4641      	mov	r1, r8
 8004220:	008a      	lsls	r2, r1, #2
 8004222:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004226:	f7fc f83b 	bl	80002a0 <__aeabi_uldivmod>
 800422a:	4602      	mov	r2, r0
 800422c:	460b      	mov	r3, r1
 800422e:	4611      	mov	r1, r2
 8004230:	4b38      	ldr	r3, [pc, #224]	@ (8004314 <UART_SetConfig+0x4e4>)
 8004232:	fba3 2301 	umull	r2, r3, r3, r1
 8004236:	095b      	lsrs	r3, r3, #5
 8004238:	2264      	movs	r2, #100	@ 0x64
 800423a:	fb02 f303 	mul.w	r3, r2, r3
 800423e:	1acb      	subs	r3, r1, r3
 8004240:	011b      	lsls	r3, r3, #4
 8004242:	3332      	adds	r3, #50	@ 0x32
 8004244:	4a33      	ldr	r2, [pc, #204]	@ (8004314 <UART_SetConfig+0x4e4>)
 8004246:	fba2 2303 	umull	r2, r3, r2, r3
 800424a:	095b      	lsrs	r3, r3, #5
 800424c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004250:	441c      	add	r4, r3
 8004252:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004256:	2200      	movs	r2, #0
 8004258:	673b      	str	r3, [r7, #112]	@ 0x70
 800425a:	677a      	str	r2, [r7, #116]	@ 0x74
 800425c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004260:	4642      	mov	r2, r8
 8004262:	464b      	mov	r3, r9
 8004264:	1891      	adds	r1, r2, r2
 8004266:	60b9      	str	r1, [r7, #8]
 8004268:	415b      	adcs	r3, r3
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004270:	4641      	mov	r1, r8
 8004272:	1851      	adds	r1, r2, r1
 8004274:	6039      	str	r1, [r7, #0]
 8004276:	4649      	mov	r1, r9
 8004278:	414b      	adcs	r3, r1
 800427a:	607b      	str	r3, [r7, #4]
 800427c:	f04f 0200 	mov.w	r2, #0
 8004280:	f04f 0300 	mov.w	r3, #0
 8004284:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004288:	4659      	mov	r1, fp
 800428a:	00cb      	lsls	r3, r1, #3
 800428c:	4651      	mov	r1, sl
 800428e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004292:	4651      	mov	r1, sl
 8004294:	00ca      	lsls	r2, r1, #3
 8004296:	4610      	mov	r0, r2
 8004298:	4619      	mov	r1, r3
 800429a:	4603      	mov	r3, r0
 800429c:	4642      	mov	r2, r8
 800429e:	189b      	adds	r3, r3, r2
 80042a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042a2:	464b      	mov	r3, r9
 80042a4:	460a      	mov	r2, r1
 80042a6:	eb42 0303 	adc.w	r3, r2, r3
 80042aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80042ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80042b6:	667a      	str	r2, [r7, #100]	@ 0x64
 80042b8:	f04f 0200 	mov.w	r2, #0
 80042bc:	f04f 0300 	mov.w	r3, #0
 80042c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80042c4:	4649      	mov	r1, r9
 80042c6:	008b      	lsls	r3, r1, #2
 80042c8:	4641      	mov	r1, r8
 80042ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042ce:	4641      	mov	r1, r8
 80042d0:	008a      	lsls	r2, r1, #2
 80042d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80042d6:	f7fb ffe3 	bl	80002a0 <__aeabi_uldivmod>
 80042da:	4602      	mov	r2, r0
 80042dc:	460b      	mov	r3, r1
 80042de:	4b0d      	ldr	r3, [pc, #52]	@ (8004314 <UART_SetConfig+0x4e4>)
 80042e0:	fba3 1302 	umull	r1, r3, r3, r2
 80042e4:	095b      	lsrs	r3, r3, #5
 80042e6:	2164      	movs	r1, #100	@ 0x64
 80042e8:	fb01 f303 	mul.w	r3, r1, r3
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	011b      	lsls	r3, r3, #4
 80042f0:	3332      	adds	r3, #50	@ 0x32
 80042f2:	4a08      	ldr	r2, [pc, #32]	@ (8004314 <UART_SetConfig+0x4e4>)
 80042f4:	fba2 2303 	umull	r2, r3, r2, r3
 80042f8:	095b      	lsrs	r3, r3, #5
 80042fa:	f003 020f 	and.w	r2, r3, #15
 80042fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4422      	add	r2, r4
 8004306:	609a      	str	r2, [r3, #8]
}
 8004308:	bf00      	nop
 800430a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800430e:	46bd      	mov	sp, r7
 8004310:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004314:	51eb851f 	.word	0x51eb851f

08004318 <__NVIC_SetPriority>:
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	4603      	mov	r3, r0
 8004320:	6039      	str	r1, [r7, #0]
 8004322:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004328:	2b00      	cmp	r3, #0
 800432a:	db0a      	blt.n	8004342 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	b2da      	uxtb	r2, r3
 8004330:	490c      	ldr	r1, [pc, #48]	@ (8004364 <__NVIC_SetPriority+0x4c>)
 8004332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004336:	0112      	lsls	r2, r2, #4
 8004338:	b2d2      	uxtb	r2, r2
 800433a:	440b      	add	r3, r1
 800433c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004340:	e00a      	b.n	8004358 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	b2da      	uxtb	r2, r3
 8004346:	4908      	ldr	r1, [pc, #32]	@ (8004368 <__NVIC_SetPriority+0x50>)
 8004348:	79fb      	ldrb	r3, [r7, #7]
 800434a:	f003 030f 	and.w	r3, r3, #15
 800434e:	3b04      	subs	r3, #4
 8004350:	0112      	lsls	r2, r2, #4
 8004352:	b2d2      	uxtb	r2, r2
 8004354:	440b      	add	r3, r1
 8004356:	761a      	strb	r2, [r3, #24]
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr
 8004364:	e000e100 	.word	0xe000e100
 8004368:	e000ed00 	.word	0xe000ed00

0800436c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800436c:	b580      	push	{r7, lr}
 800436e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004370:	4b05      	ldr	r3, [pc, #20]	@ (8004388 <SysTick_Handler+0x1c>)
 8004372:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004374:	f001 fcc6 	bl	8005d04 <xTaskGetSchedulerState>
 8004378:	4603      	mov	r3, r0
 800437a:	2b01      	cmp	r3, #1
 800437c:	d001      	beq.n	8004382 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800437e:	f002 fb9b 	bl	8006ab8 <xPortSysTickHandler>
  }
}
 8004382:	bf00      	nop
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	e000e010 	.word	0xe000e010

0800438c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004390:	2100      	movs	r1, #0
 8004392:	f06f 0004 	mvn.w	r0, #4
 8004396:	f7ff ffbf 	bl	8004318 <__NVIC_SetPriority>
#endif
}
 800439a:	bf00      	nop
 800439c:	bd80      	pop	{r7, pc}
	...

080043a0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043a6:	f3ef 8305 	mrs	r3, IPSR
 80043aa:	603b      	str	r3, [r7, #0]
  return(result);
 80043ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80043b2:	f06f 0305 	mvn.w	r3, #5
 80043b6:	607b      	str	r3, [r7, #4]
 80043b8:	e00c      	b.n	80043d4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80043ba:	4b0a      	ldr	r3, [pc, #40]	@ (80043e4 <osKernelInitialize+0x44>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d105      	bne.n	80043ce <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80043c2:	4b08      	ldr	r3, [pc, #32]	@ (80043e4 <osKernelInitialize+0x44>)
 80043c4:	2201      	movs	r2, #1
 80043c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80043c8:	2300      	movs	r3, #0
 80043ca:	607b      	str	r3, [r7, #4]
 80043cc:	e002      	b.n	80043d4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80043ce:	f04f 33ff 	mov.w	r3, #4294967295
 80043d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80043d4:	687b      	ldr	r3, [r7, #4]
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	20000254 	.word	0x20000254

080043e8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043ee:	f3ef 8305 	mrs	r3, IPSR
 80043f2:	603b      	str	r3, [r7, #0]
  return(result);
 80043f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d003      	beq.n	8004402 <osKernelStart+0x1a>
    stat = osErrorISR;
 80043fa:	f06f 0305 	mvn.w	r3, #5
 80043fe:	607b      	str	r3, [r7, #4]
 8004400:	e010      	b.n	8004424 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004402:	4b0b      	ldr	r3, [pc, #44]	@ (8004430 <osKernelStart+0x48>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d109      	bne.n	800441e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800440a:	f7ff ffbf 	bl	800438c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800440e:	4b08      	ldr	r3, [pc, #32]	@ (8004430 <osKernelStart+0x48>)
 8004410:	2202      	movs	r2, #2
 8004412:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004414:	f001 f828 	bl	8005468 <vTaskStartScheduler>
      stat = osOK;
 8004418:	2300      	movs	r3, #0
 800441a:	607b      	str	r3, [r7, #4]
 800441c:	e002      	b.n	8004424 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800441e:	f04f 33ff 	mov.w	r3, #4294967295
 8004422:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004424:	687b      	ldr	r3, [r7, #4]
}
 8004426:	4618      	mov	r0, r3
 8004428:	3708      	adds	r7, #8
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	20000254 	.word	0x20000254

08004434 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004434:	b580      	push	{r7, lr}
 8004436:	b08e      	sub	sp, #56	@ 0x38
 8004438:	af04      	add	r7, sp, #16
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004440:	2300      	movs	r3, #0
 8004442:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004444:	f3ef 8305 	mrs	r3, IPSR
 8004448:	617b      	str	r3, [r7, #20]
  return(result);
 800444a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800444c:	2b00      	cmp	r3, #0
 800444e:	d17e      	bne.n	800454e <osThreadNew+0x11a>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d07b      	beq.n	800454e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004456:	2380      	movs	r3, #128	@ 0x80
 8004458:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800445a:	2318      	movs	r3, #24
 800445c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800445e:	2300      	movs	r3, #0
 8004460:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004462:	f04f 33ff 	mov.w	r3, #4294967295
 8004466:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d045      	beq.n	80044fa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <osThreadNew+0x48>
        name = attr->name;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d002      	beq.n	800448a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d008      	beq.n	80044a2 <osThreadNew+0x6e>
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	2b38      	cmp	r3, #56	@ 0x38
 8004494:	d805      	bhi.n	80044a2 <osThreadNew+0x6e>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d001      	beq.n	80044a6 <osThreadNew+0x72>
        return (NULL);
 80044a2:	2300      	movs	r3, #0
 80044a4:	e054      	b.n	8004550 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d003      	beq.n	80044b6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	089b      	lsrs	r3, r3, #2
 80044b4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00e      	beq.n	80044dc <osThreadNew+0xa8>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	2b5b      	cmp	r3, #91	@ 0x5b
 80044c4:	d90a      	bls.n	80044dc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d006      	beq.n	80044dc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d002      	beq.n	80044dc <osThreadNew+0xa8>
        mem = 1;
 80044d6:	2301      	movs	r3, #1
 80044d8:	61bb      	str	r3, [r7, #24]
 80044da:	e010      	b.n	80044fe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10c      	bne.n	80044fe <osThreadNew+0xca>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d108      	bne.n	80044fe <osThreadNew+0xca>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d104      	bne.n	80044fe <osThreadNew+0xca>
          mem = 0;
 80044f4:	2300      	movs	r3, #0
 80044f6:	61bb      	str	r3, [r7, #24]
 80044f8:	e001      	b.n	80044fe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80044fa:	2300      	movs	r3, #0
 80044fc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d110      	bne.n	8004526 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800450c:	9202      	str	r2, [sp, #8]
 800450e:	9301      	str	r3, [sp, #4]
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	9300      	str	r3, [sp, #0]
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	6a3a      	ldr	r2, [r7, #32]
 8004518:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f000 fdfe 	bl	800511c <xTaskCreateStatic>
 8004520:	4603      	mov	r3, r0
 8004522:	613b      	str	r3, [r7, #16]
 8004524:	e013      	b.n	800454e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d110      	bne.n	800454e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800452c:	6a3b      	ldr	r3, [r7, #32]
 800452e:	b29a      	uxth	r2, r3
 8004530:	f107 0310 	add.w	r3, r7, #16
 8004534:	9301      	str	r3, [sp, #4]
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	f000 fe4c 	bl	80051dc <xTaskCreate>
 8004544:	4603      	mov	r3, r0
 8004546:	2b01      	cmp	r3, #1
 8004548:	d001      	beq.n	800454e <osThreadNew+0x11a>
            hTask = NULL;
 800454a:	2300      	movs	r3, #0
 800454c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800454e:	693b      	ldr	r3, [r7, #16]
}
 8004550:	4618      	mov	r0, r3
 8004552:	3728      	adds	r7, #40	@ 0x28
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	4a07      	ldr	r2, [pc, #28]	@ (8004584 <vApplicationGetIdleTaskMemory+0x2c>)
 8004568:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	4a06      	ldr	r2, [pc, #24]	@ (8004588 <vApplicationGetIdleTaskMemory+0x30>)
 800456e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2280      	movs	r2, #128	@ 0x80
 8004574:	601a      	str	r2, [r3, #0]
}
 8004576:	bf00      	nop
 8004578:	3714      	adds	r7, #20
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	20000258 	.word	0x20000258
 8004588:	200002b4 	.word	0x200002b4

0800458c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	4a07      	ldr	r2, [pc, #28]	@ (80045b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800459c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	4a06      	ldr	r2, [pc, #24]	@ (80045bc <vApplicationGetTimerTaskMemory+0x30>)
 80045a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80045aa:	601a      	str	r2, [r3, #0]
}
 80045ac:	bf00      	nop
 80045ae:	3714      	adds	r7, #20
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr
 80045b8:	200004b4 	.word	0x200004b4
 80045bc:	20000510 	.word	0x20000510

080045c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f103 0208 	add.w	r2, r3, #8
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f04f 32ff 	mov.w	r2, #4294967295
 80045d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f103 0208 	add.w	r2, r3, #8
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f103 0208 	add.w	r2, r3, #8
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800460e:	bf00      	nop
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800461a:	b480      	push	{r7}
 800461c:	b085      	sub	sp, #20
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
 8004622:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	689a      	ldr	r2, [r3, #8]
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	683a      	ldr	r2, [r7, #0]
 800463e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	1c5a      	adds	r2, r3, #1
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	601a      	str	r2, [r3, #0]
}
 8004656:	bf00      	nop
 8004658:	3714      	adds	r7, #20
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr

08004662 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004662:	b480      	push	{r7}
 8004664:	b085      	sub	sp, #20
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
 800466a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004678:	d103      	bne.n	8004682 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	60fb      	str	r3, [r7, #12]
 8004680:	e00c      	b.n	800469c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	3308      	adds	r3, #8
 8004686:	60fb      	str	r3, [r7, #12]
 8004688:	e002      	b.n	8004690 <vListInsert+0x2e>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	60fb      	str	r3, [r7, #12]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	429a      	cmp	r2, r3
 800469a:	d2f6      	bcs.n	800468a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	683a      	ldr	r2, [r7, #0]
 80046aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	683a      	ldr	r2, [r7, #0]
 80046b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	1c5a      	adds	r2, r3, #1
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	601a      	str	r2, [r3, #0]
}
 80046c8:	bf00      	nop
 80046ca:	3714      	adds	r7, #20
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	6892      	ldr	r2, [r2, #8]
 80046ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	6852      	ldr	r2, [r2, #4]
 80046f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d103      	bne.n	8004708 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689a      	ldr	r2, [r3, #8]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	1e5a      	subs	r2, r3, #1
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
}
 800471c:	4618      	mov	r0, r3
 800471e:	3714      	adds	r7, #20
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10b      	bne.n	8004754 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800473c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004740:	f383 8811 	msr	BASEPRI, r3
 8004744:	f3bf 8f6f 	isb	sy
 8004748:	f3bf 8f4f 	dsb	sy
 800474c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800474e:	bf00      	nop
 8004750:	bf00      	nop
 8004752:	e7fd      	b.n	8004750 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004754:	f002 f920 	bl	8006998 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004760:	68f9      	ldr	r1, [r7, #12]
 8004762:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004764:	fb01 f303 	mul.w	r3, r1, r3
 8004768:	441a      	add	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004784:	3b01      	subs	r3, #1
 8004786:	68f9      	ldr	r1, [r7, #12]
 8004788:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800478a:	fb01 f303 	mul.w	r3, r1, r3
 800478e:	441a      	add	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	22ff      	movs	r2, #255	@ 0xff
 8004798:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	22ff      	movs	r2, #255	@ 0xff
 80047a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d114      	bne.n	80047d4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d01a      	beq.n	80047e8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	3310      	adds	r3, #16
 80047b6:	4618      	mov	r0, r3
 80047b8:	f001 f8e4 	bl	8005984 <xTaskRemoveFromEventList>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d012      	beq.n	80047e8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80047c2:	4b0d      	ldr	r3, [pc, #52]	@ (80047f8 <xQueueGenericReset+0xd0>)
 80047c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047c8:	601a      	str	r2, [r3, #0]
 80047ca:	f3bf 8f4f 	dsb	sy
 80047ce:	f3bf 8f6f 	isb	sy
 80047d2:	e009      	b.n	80047e8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	3310      	adds	r3, #16
 80047d8:	4618      	mov	r0, r3
 80047da:	f7ff fef1 	bl	80045c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	3324      	adds	r3, #36	@ 0x24
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7ff feec 	bl	80045c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80047e8:	f002 f908 	bl	80069fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80047ec:	2301      	movs	r3, #1
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	e000ed04 	.word	0xe000ed04

080047fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b08e      	sub	sp, #56	@ 0x38
 8004800:	af02      	add	r7, sp, #8
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
 8004808:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10b      	bne.n	8004828 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004814:	f383 8811 	msr	BASEPRI, r3
 8004818:	f3bf 8f6f 	isb	sy
 800481c:	f3bf 8f4f 	dsb	sy
 8004820:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004822:	bf00      	nop
 8004824:	bf00      	nop
 8004826:	e7fd      	b.n	8004824 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10b      	bne.n	8004846 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800482e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004832:	f383 8811 	msr	BASEPRI, r3
 8004836:	f3bf 8f6f 	isb	sy
 800483a:	f3bf 8f4f 	dsb	sy
 800483e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004840:	bf00      	nop
 8004842:	bf00      	nop
 8004844:	e7fd      	b.n	8004842 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d002      	beq.n	8004852 <xQueueGenericCreateStatic+0x56>
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <xQueueGenericCreateStatic+0x5a>
 8004852:	2301      	movs	r3, #1
 8004854:	e000      	b.n	8004858 <xQueueGenericCreateStatic+0x5c>
 8004856:	2300      	movs	r3, #0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10b      	bne.n	8004874 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800485c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004860:	f383 8811 	msr	BASEPRI, r3
 8004864:	f3bf 8f6f 	isb	sy
 8004868:	f3bf 8f4f 	dsb	sy
 800486c:	623b      	str	r3, [r7, #32]
}
 800486e:	bf00      	nop
 8004870:	bf00      	nop
 8004872:	e7fd      	b.n	8004870 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d102      	bne.n	8004880 <xQueueGenericCreateStatic+0x84>
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <xQueueGenericCreateStatic+0x88>
 8004880:	2301      	movs	r3, #1
 8004882:	e000      	b.n	8004886 <xQueueGenericCreateStatic+0x8a>
 8004884:	2300      	movs	r3, #0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10b      	bne.n	80048a2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800488a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800488e:	f383 8811 	msr	BASEPRI, r3
 8004892:	f3bf 8f6f 	isb	sy
 8004896:	f3bf 8f4f 	dsb	sy
 800489a:	61fb      	str	r3, [r7, #28]
}
 800489c:	bf00      	nop
 800489e:	bf00      	nop
 80048a0:	e7fd      	b.n	800489e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80048a2:	2350      	movs	r3, #80	@ 0x50
 80048a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	2b50      	cmp	r3, #80	@ 0x50
 80048aa:	d00b      	beq.n	80048c4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80048ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b0:	f383 8811 	msr	BASEPRI, r3
 80048b4:	f3bf 8f6f 	isb	sy
 80048b8:	f3bf 8f4f 	dsb	sy
 80048bc:	61bb      	str	r3, [r7, #24]
}
 80048be:	bf00      	nop
 80048c0:	bf00      	nop
 80048c2:	e7fd      	b.n	80048c0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80048c4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80048ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00d      	beq.n	80048ec <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80048d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80048d8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80048dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048de:	9300      	str	r3, [sp, #0]
 80048e0:	4613      	mov	r3, r2
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	68b9      	ldr	r1, [r7, #8]
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f000 f805 	bl	80048f6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80048ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3730      	adds	r7, #48	@ 0x30
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}

080048f6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80048f6:	b580      	push	{r7, lr}
 80048f8:	b084      	sub	sp, #16
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	60f8      	str	r0, [r7, #12]
 80048fe:	60b9      	str	r1, [r7, #8]
 8004900:	607a      	str	r2, [r7, #4]
 8004902:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d103      	bne.n	8004912 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	601a      	str	r2, [r3, #0]
 8004910:	e002      	b.n	8004918 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004924:	2101      	movs	r1, #1
 8004926:	69b8      	ldr	r0, [r7, #24]
 8004928:	f7ff fefe 	bl	8004728 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	78fa      	ldrb	r2, [r7, #3]
 8004930:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004934:	bf00      	nop
 8004936:	3710      	adds	r7, #16
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b08e      	sub	sp, #56	@ 0x38
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
 8004948:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800494a:	2300      	movs	r3, #0
 800494c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004954:	2b00      	cmp	r3, #0
 8004956:	d10b      	bne.n	8004970 <xQueueGenericSend+0x34>
	__asm volatile
 8004958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800495c:	f383 8811 	msr	BASEPRI, r3
 8004960:	f3bf 8f6f 	isb	sy
 8004964:	f3bf 8f4f 	dsb	sy
 8004968:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800496a:	bf00      	nop
 800496c:	bf00      	nop
 800496e:	e7fd      	b.n	800496c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d103      	bne.n	800497e <xQueueGenericSend+0x42>
 8004976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <xQueueGenericSend+0x46>
 800497e:	2301      	movs	r3, #1
 8004980:	e000      	b.n	8004984 <xQueueGenericSend+0x48>
 8004982:	2300      	movs	r3, #0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10b      	bne.n	80049a0 <xQueueGenericSend+0x64>
	__asm volatile
 8004988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800498c:	f383 8811 	msr	BASEPRI, r3
 8004990:	f3bf 8f6f 	isb	sy
 8004994:	f3bf 8f4f 	dsb	sy
 8004998:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800499a:	bf00      	nop
 800499c:	bf00      	nop
 800499e:	e7fd      	b.n	800499c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d103      	bne.n	80049ae <xQueueGenericSend+0x72>
 80049a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d101      	bne.n	80049b2 <xQueueGenericSend+0x76>
 80049ae:	2301      	movs	r3, #1
 80049b0:	e000      	b.n	80049b4 <xQueueGenericSend+0x78>
 80049b2:	2300      	movs	r3, #0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10b      	bne.n	80049d0 <xQueueGenericSend+0x94>
	__asm volatile
 80049b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049bc:	f383 8811 	msr	BASEPRI, r3
 80049c0:	f3bf 8f6f 	isb	sy
 80049c4:	f3bf 8f4f 	dsb	sy
 80049c8:	623b      	str	r3, [r7, #32]
}
 80049ca:	bf00      	nop
 80049cc:	bf00      	nop
 80049ce:	e7fd      	b.n	80049cc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049d0:	f001 f998 	bl	8005d04 <xTaskGetSchedulerState>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d102      	bne.n	80049e0 <xQueueGenericSend+0xa4>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d101      	bne.n	80049e4 <xQueueGenericSend+0xa8>
 80049e0:	2301      	movs	r3, #1
 80049e2:	e000      	b.n	80049e6 <xQueueGenericSend+0xaa>
 80049e4:	2300      	movs	r3, #0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d10b      	bne.n	8004a02 <xQueueGenericSend+0xc6>
	__asm volatile
 80049ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ee:	f383 8811 	msr	BASEPRI, r3
 80049f2:	f3bf 8f6f 	isb	sy
 80049f6:	f3bf 8f4f 	dsb	sy
 80049fa:	61fb      	str	r3, [r7, #28]
}
 80049fc:	bf00      	nop
 80049fe:	bf00      	nop
 8004a00:	e7fd      	b.n	80049fe <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a02:	f001 ffc9 	bl	8006998 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d302      	bcc.n	8004a18 <xQueueGenericSend+0xdc>
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d129      	bne.n	8004a6c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a18:	683a      	ldr	r2, [r7, #0]
 8004a1a:	68b9      	ldr	r1, [r7, #8]
 8004a1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a1e:	f000 fa0f 	bl	8004e40 <prvCopyDataToQueue>
 8004a22:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d010      	beq.n	8004a4e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a2e:	3324      	adds	r3, #36	@ 0x24
 8004a30:	4618      	mov	r0, r3
 8004a32:	f000 ffa7 	bl	8005984 <xTaskRemoveFromEventList>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d013      	beq.n	8004a64 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004a3c:	4b3f      	ldr	r3, [pc, #252]	@ (8004b3c <xQueueGenericSend+0x200>)
 8004a3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a42:	601a      	str	r2, [r3, #0]
 8004a44:	f3bf 8f4f 	dsb	sy
 8004a48:	f3bf 8f6f 	isb	sy
 8004a4c:	e00a      	b.n	8004a64 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d007      	beq.n	8004a64 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004a54:	4b39      	ldr	r3, [pc, #228]	@ (8004b3c <xQueueGenericSend+0x200>)
 8004a56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a5a:	601a      	str	r2, [r3, #0]
 8004a5c:	f3bf 8f4f 	dsb	sy
 8004a60:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004a64:	f001 ffca 	bl	80069fc <vPortExitCritical>
				return pdPASS;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e063      	b.n	8004b34 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d103      	bne.n	8004a7a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a72:	f001 ffc3 	bl	80069fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004a76:	2300      	movs	r3, #0
 8004a78:	e05c      	b.n	8004b34 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d106      	bne.n	8004a8e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a80:	f107 0314 	add.w	r3, r7, #20
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 ffe1 	bl	8005a4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a8e:	f001 ffb5 	bl	80069fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a92:	f000 fd51 	bl	8005538 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a96:	f001 ff7f 	bl	8006998 <vPortEnterCritical>
 8004a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004aa0:	b25b      	sxtb	r3, r3
 8004aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa6:	d103      	bne.n	8004ab0 <xQueueGenericSend+0x174>
 8004aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ab6:	b25b      	sxtb	r3, r3
 8004ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004abc:	d103      	bne.n	8004ac6 <xQueueGenericSend+0x18a>
 8004abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ac6:	f001 ff99 	bl	80069fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004aca:	1d3a      	adds	r2, r7, #4
 8004acc:	f107 0314 	add.w	r3, r7, #20
 8004ad0:	4611      	mov	r1, r2
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 ffd0 	bl	8005a78 <xTaskCheckForTimeOut>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d124      	bne.n	8004b28 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004ade:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004ae0:	f000 faa6 	bl	8005030 <prvIsQueueFull>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d018      	beq.n	8004b1c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aec:	3310      	adds	r3, #16
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	4611      	mov	r1, r2
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 fef4 	bl	80058e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004af8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004afa:	f000 fa31 	bl	8004f60 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004afe:	f000 fd29 	bl	8005554 <xTaskResumeAll>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f47f af7c 	bne.w	8004a02 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8004b3c <xQueueGenericSend+0x200>)
 8004b0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b10:	601a      	str	r2, [r3, #0]
 8004b12:	f3bf 8f4f 	dsb	sy
 8004b16:	f3bf 8f6f 	isb	sy
 8004b1a:	e772      	b.n	8004a02 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004b1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b1e:	f000 fa1f 	bl	8004f60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b22:	f000 fd17 	bl	8005554 <xTaskResumeAll>
 8004b26:	e76c      	b.n	8004a02 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004b28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004b2a:	f000 fa19 	bl	8004f60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b2e:	f000 fd11 	bl	8005554 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004b32:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3738      	adds	r7, #56	@ 0x38
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	e000ed04 	.word	0xe000ed04

08004b40 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b090      	sub	sp, #64	@ 0x40
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
 8004b4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10b      	bne.n	8004b70 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b5c:	f383 8811 	msr	BASEPRI, r3
 8004b60:	f3bf 8f6f 	isb	sy
 8004b64:	f3bf 8f4f 	dsb	sy
 8004b68:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004b6a:	bf00      	nop
 8004b6c:	bf00      	nop
 8004b6e:	e7fd      	b.n	8004b6c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d103      	bne.n	8004b7e <xQueueGenericSendFromISR+0x3e>
 8004b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <xQueueGenericSendFromISR+0x42>
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e000      	b.n	8004b84 <xQueueGenericSendFromISR+0x44>
 8004b82:	2300      	movs	r3, #0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d10b      	bne.n	8004ba0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b8c:	f383 8811 	msr	BASEPRI, r3
 8004b90:	f3bf 8f6f 	isb	sy
 8004b94:	f3bf 8f4f 	dsb	sy
 8004b98:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004b9a:	bf00      	nop
 8004b9c:	bf00      	nop
 8004b9e:	e7fd      	b.n	8004b9c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d103      	bne.n	8004bae <xQueueGenericSendFromISR+0x6e>
 8004ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d101      	bne.n	8004bb2 <xQueueGenericSendFromISR+0x72>
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e000      	b.n	8004bb4 <xQueueGenericSendFromISR+0x74>
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d10b      	bne.n	8004bd0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bbc:	f383 8811 	msr	BASEPRI, r3
 8004bc0:	f3bf 8f6f 	isb	sy
 8004bc4:	f3bf 8f4f 	dsb	sy
 8004bc8:	623b      	str	r3, [r7, #32]
}
 8004bca:	bf00      	nop
 8004bcc:	bf00      	nop
 8004bce:	e7fd      	b.n	8004bcc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004bd0:	f001 ffc2 	bl	8006b58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004bd4:	f3ef 8211 	mrs	r2, BASEPRI
 8004bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bdc:	f383 8811 	msr	BASEPRI, r3
 8004be0:	f3bf 8f6f 	isb	sy
 8004be4:	f3bf 8f4f 	dsb	sy
 8004be8:	61fa      	str	r2, [r7, #28]
 8004bea:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004bec:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004bee:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bf2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d302      	bcc.n	8004c02 <xQueueGenericSendFromISR+0xc2>
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d12f      	bne.n	8004c62 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c04:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c08:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	68b9      	ldr	r1, [r7, #8]
 8004c16:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004c18:	f000 f912 	bl	8004e40 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004c1c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c24:	d112      	bne.n	8004c4c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d016      	beq.n	8004c5c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c30:	3324      	adds	r3, #36	@ 0x24
 8004c32:	4618      	mov	r0, r3
 8004c34:	f000 fea6 	bl	8005984 <xTaskRemoveFromEventList>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00e      	beq.n	8004c5c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00b      	beq.n	8004c5c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	601a      	str	r2, [r3, #0]
 8004c4a:	e007      	b.n	8004c5c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004c4c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004c50:	3301      	adds	r3, #1
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	b25a      	sxtb	r2, r3
 8004c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004c60:	e001      	b.n	8004c66 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004c62:	2300      	movs	r3, #0
 8004c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c68:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004c70:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004c72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3740      	adds	r7, #64	@ 0x40
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b08c      	sub	sp, #48	@ 0x30
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10b      	bne.n	8004cae <xQueueReceive+0x32>
	__asm volatile
 8004c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c9a:	f383 8811 	msr	BASEPRI, r3
 8004c9e:	f3bf 8f6f 	isb	sy
 8004ca2:	f3bf 8f4f 	dsb	sy
 8004ca6:	623b      	str	r3, [r7, #32]
}
 8004ca8:	bf00      	nop
 8004caa:	bf00      	nop
 8004cac:	e7fd      	b.n	8004caa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d103      	bne.n	8004cbc <xQueueReceive+0x40>
 8004cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d101      	bne.n	8004cc0 <xQueueReceive+0x44>
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e000      	b.n	8004cc2 <xQueueReceive+0x46>
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10b      	bne.n	8004cde <xQueueReceive+0x62>
	__asm volatile
 8004cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cca:	f383 8811 	msr	BASEPRI, r3
 8004cce:	f3bf 8f6f 	isb	sy
 8004cd2:	f3bf 8f4f 	dsb	sy
 8004cd6:	61fb      	str	r3, [r7, #28]
}
 8004cd8:	bf00      	nop
 8004cda:	bf00      	nop
 8004cdc:	e7fd      	b.n	8004cda <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cde:	f001 f811 	bl	8005d04 <xTaskGetSchedulerState>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d102      	bne.n	8004cee <xQueueReceive+0x72>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <xQueueReceive+0x76>
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e000      	b.n	8004cf4 <xQueueReceive+0x78>
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10b      	bne.n	8004d10 <xQueueReceive+0x94>
	__asm volatile
 8004cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cfc:	f383 8811 	msr	BASEPRI, r3
 8004d00:	f3bf 8f6f 	isb	sy
 8004d04:	f3bf 8f4f 	dsb	sy
 8004d08:	61bb      	str	r3, [r7, #24]
}
 8004d0a:	bf00      	nop
 8004d0c:	bf00      	nop
 8004d0e:	e7fd      	b.n	8004d0c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d10:	f001 fe42 	bl	8006998 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d18:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d01f      	beq.n	8004d60 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d20:	68b9      	ldr	r1, [r7, #8]
 8004d22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d24:	f000 f8f6 	bl	8004f14 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d2a:	1e5a      	subs	r2, r3, #1
 8004d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d2e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00f      	beq.n	8004d58 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d3a:	3310      	adds	r3, #16
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f000 fe21 	bl	8005984 <xTaskRemoveFromEventList>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d007      	beq.n	8004d58 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004d48:	4b3c      	ldr	r3, [pc, #240]	@ (8004e3c <xQueueReceive+0x1c0>)
 8004d4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d4e:	601a      	str	r2, [r3, #0]
 8004d50:	f3bf 8f4f 	dsb	sy
 8004d54:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004d58:	f001 fe50 	bl	80069fc <vPortExitCritical>
				return pdPASS;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e069      	b.n	8004e34 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d103      	bne.n	8004d6e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d66:	f001 fe49 	bl	80069fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	e062      	b.n	8004e34 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d106      	bne.n	8004d82 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d74:	f107 0310 	add.w	r3, r7, #16
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f000 fe67 	bl	8005a4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d82:	f001 fe3b 	bl	80069fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d86:	f000 fbd7 	bl	8005538 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d8a:	f001 fe05 	bl	8006998 <vPortEnterCritical>
 8004d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d94:	b25b      	sxtb	r3, r3
 8004d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d9a:	d103      	bne.n	8004da4 <xQueueReceive+0x128>
 8004d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004daa:	b25b      	sxtb	r3, r3
 8004dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db0:	d103      	bne.n	8004dba <xQueueReceive+0x13e>
 8004db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004dba:	f001 fe1f 	bl	80069fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004dbe:	1d3a      	adds	r2, r7, #4
 8004dc0:	f107 0310 	add.w	r3, r7, #16
 8004dc4:	4611      	mov	r1, r2
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 fe56 	bl	8005a78 <xTaskCheckForTimeOut>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d123      	bne.n	8004e1a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004dd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004dd4:	f000 f916 	bl	8005004 <prvIsQueueEmpty>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d017      	beq.n	8004e0e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de0:	3324      	adds	r3, #36	@ 0x24
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	4611      	mov	r1, r2
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 fd7a 	bl	80058e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004dec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004dee:	f000 f8b7 	bl	8004f60 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004df2:	f000 fbaf 	bl	8005554 <xTaskResumeAll>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d189      	bne.n	8004d10 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8004e3c <xQueueReceive+0x1c0>)
 8004dfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e02:	601a      	str	r2, [r3, #0]
 8004e04:	f3bf 8f4f 	dsb	sy
 8004e08:	f3bf 8f6f 	isb	sy
 8004e0c:	e780      	b.n	8004d10 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004e0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e10:	f000 f8a6 	bl	8004f60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e14:	f000 fb9e 	bl	8005554 <xTaskResumeAll>
 8004e18:	e77a      	b.n	8004d10 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004e1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e1c:	f000 f8a0 	bl	8004f60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e20:	f000 fb98 	bl	8005554 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e26:	f000 f8ed 	bl	8005004 <prvIsQueueEmpty>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f43f af6f 	beq.w	8004d10 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004e32:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3730      	adds	r7, #48	@ 0x30
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	e000ed04 	.word	0xe000ed04

08004e40 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e54:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10d      	bne.n	8004e7a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d14d      	bne.n	8004f02 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f000 ff68 	bl	8005d40 <xTaskPriorityDisinherit>
 8004e70:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	609a      	str	r2, [r3, #8]
 8004e78:	e043      	b.n	8004f02 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d119      	bne.n	8004eb4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6858      	ldr	r0, [r3, #4]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e88:	461a      	mov	r2, r3
 8004e8a:	68b9      	ldr	r1, [r7, #8]
 8004e8c:	f002 fab9 	bl	8007402 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	685a      	ldr	r2, [r3, #4]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e98:	441a      	add	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d32b      	bcc.n	8004f02 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	605a      	str	r2, [r3, #4]
 8004eb2:	e026      	b.n	8004f02 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	68d8      	ldr	r0, [r3, #12]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	68b9      	ldr	r1, [r7, #8]
 8004ec0:	f002 fa9f 	bl	8007402 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	68da      	ldr	r2, [r3, #12]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ecc:	425b      	negs	r3, r3
 8004ece:	441a      	add	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	68da      	ldr	r2, [r3, #12]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d207      	bcs.n	8004ef0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	689a      	ldr	r2, [r3, #8]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee8:	425b      	negs	r3, r3
 8004eea:	441a      	add	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d105      	bne.n	8004f02 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d002      	beq.n	8004f02 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	3b01      	subs	r3, #1
 8004f00:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	1c5a      	adds	r2, r3, #1
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004f0a:	697b      	ldr	r3, [r7, #20]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3718      	adds	r7, #24
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d018      	beq.n	8004f58 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68da      	ldr	r2, [r3, #12]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f2e:	441a      	add	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	68da      	ldr	r2, [r3, #12]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d303      	bcc.n	8004f48 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68d9      	ldr	r1, [r3, #12]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f50:	461a      	mov	r2, r3
 8004f52:	6838      	ldr	r0, [r7, #0]
 8004f54:	f002 fa55 	bl	8007402 <memcpy>
	}
}
 8004f58:	bf00      	nop
 8004f5a:	3708      	adds	r7, #8
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004f68:	f001 fd16 	bl	8006998 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f72:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f74:	e011      	b.n	8004f9a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d012      	beq.n	8004fa4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	3324      	adds	r3, #36	@ 0x24
 8004f82:	4618      	mov	r0, r3
 8004f84:	f000 fcfe 	bl	8005984 <xTaskRemoveFromEventList>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d001      	beq.n	8004f92 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004f8e:	f000 fdd7 	bl	8005b40 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004f92:	7bfb      	ldrb	r3, [r7, #15]
 8004f94:	3b01      	subs	r3, #1
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	dce9      	bgt.n	8004f76 <prvUnlockQueue+0x16>
 8004fa2:	e000      	b.n	8004fa6 <prvUnlockQueue+0x46>
					break;
 8004fa4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	22ff      	movs	r2, #255	@ 0xff
 8004faa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004fae:	f001 fd25 	bl	80069fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004fb2:	f001 fcf1 	bl	8006998 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004fbc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004fbe:	e011      	b.n	8004fe4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d012      	beq.n	8004fee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	3310      	adds	r3, #16
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f000 fcd9 	bl	8005984 <xTaskRemoveFromEventList>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d001      	beq.n	8004fdc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004fd8:	f000 fdb2 	bl	8005b40 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004fdc:	7bbb      	ldrb	r3, [r7, #14]
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004fe4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	dce9      	bgt.n	8004fc0 <prvUnlockQueue+0x60>
 8004fec:	e000      	b.n	8004ff0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004fee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	22ff      	movs	r2, #255	@ 0xff
 8004ff4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004ff8:	f001 fd00 	bl	80069fc <vPortExitCritical>
}
 8004ffc:	bf00      	nop
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800500c:	f001 fcc4 	bl	8006998 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005014:	2b00      	cmp	r3, #0
 8005016:	d102      	bne.n	800501e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005018:	2301      	movs	r3, #1
 800501a:	60fb      	str	r3, [r7, #12]
 800501c:	e001      	b.n	8005022 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800501e:	2300      	movs	r3, #0
 8005020:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005022:	f001 fceb 	bl	80069fc <vPortExitCritical>

	return xReturn;
 8005026:	68fb      	ldr	r3, [r7, #12]
}
 8005028:	4618      	mov	r0, r3
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005038:	f001 fcae 	bl	8006998 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005044:	429a      	cmp	r2, r3
 8005046:	d102      	bne.n	800504e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005048:	2301      	movs	r3, #1
 800504a:	60fb      	str	r3, [r7, #12]
 800504c:	e001      	b.n	8005052 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800504e:	2300      	movs	r3, #0
 8005050:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005052:	f001 fcd3 	bl	80069fc <vPortExitCritical>

	return xReturn;
 8005056:	68fb      	ldr	r3, [r7, #12]
}
 8005058:	4618      	mov	r0, r3
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800506a:	2300      	movs	r3, #0
 800506c:	60fb      	str	r3, [r7, #12]
 800506e:	e014      	b.n	800509a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005070:	4a0f      	ldr	r2, [pc, #60]	@ (80050b0 <vQueueAddToRegistry+0x50>)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d10b      	bne.n	8005094 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800507c:	490c      	ldr	r1, [pc, #48]	@ (80050b0 <vQueueAddToRegistry+0x50>)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	683a      	ldr	r2, [r7, #0]
 8005082:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005086:	4a0a      	ldr	r2, [pc, #40]	@ (80050b0 <vQueueAddToRegistry+0x50>)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	00db      	lsls	r3, r3, #3
 800508c:	4413      	add	r3, r2
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005092:	e006      	b.n	80050a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	3301      	adds	r3, #1
 8005098:	60fb      	str	r3, [r7, #12]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2b07      	cmp	r3, #7
 800509e:	d9e7      	bls.n	8005070 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80050a0:	bf00      	nop
 80050a2:	bf00      	nop
 80050a4:	3714      	adds	r7, #20
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	20000910 	.word	0x20000910

080050b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b086      	sub	sp, #24
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80050c4:	f001 fc68 	bl	8006998 <vPortEnterCritical>
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80050ce:	b25b      	sxtb	r3, r3
 80050d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d4:	d103      	bne.n	80050de <vQueueWaitForMessageRestricted+0x2a>
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80050e4:	b25b      	sxtb	r3, r3
 80050e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ea:	d103      	bne.n	80050f4 <vQueueWaitForMessageRestricted+0x40>
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050f4:	f001 fc82 	bl	80069fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d106      	bne.n	800510e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	3324      	adds	r3, #36	@ 0x24
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	68b9      	ldr	r1, [r7, #8]
 8005108:	4618      	mov	r0, r3
 800510a:	f000 fc0f 	bl	800592c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800510e:	6978      	ldr	r0, [r7, #20]
 8005110:	f7ff ff26 	bl	8004f60 <prvUnlockQueue>
	}
 8005114:	bf00      	nop
 8005116:	3718      	adds	r7, #24
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800511c:	b580      	push	{r7, lr}
 800511e:	b08e      	sub	sp, #56	@ 0x38
 8005120:	af04      	add	r7, sp, #16
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
 8005128:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800512a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10b      	bne.n	8005148 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005134:	f383 8811 	msr	BASEPRI, r3
 8005138:	f3bf 8f6f 	isb	sy
 800513c:	f3bf 8f4f 	dsb	sy
 8005140:	623b      	str	r3, [r7, #32]
}
 8005142:	bf00      	nop
 8005144:	bf00      	nop
 8005146:	e7fd      	b.n	8005144 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800514a:	2b00      	cmp	r3, #0
 800514c:	d10b      	bne.n	8005166 <xTaskCreateStatic+0x4a>
	__asm volatile
 800514e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005152:	f383 8811 	msr	BASEPRI, r3
 8005156:	f3bf 8f6f 	isb	sy
 800515a:	f3bf 8f4f 	dsb	sy
 800515e:	61fb      	str	r3, [r7, #28]
}
 8005160:	bf00      	nop
 8005162:	bf00      	nop
 8005164:	e7fd      	b.n	8005162 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005166:	235c      	movs	r3, #92	@ 0x5c
 8005168:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	2b5c      	cmp	r3, #92	@ 0x5c
 800516e:	d00b      	beq.n	8005188 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005174:	f383 8811 	msr	BASEPRI, r3
 8005178:	f3bf 8f6f 	isb	sy
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	61bb      	str	r3, [r7, #24]
}
 8005182:	bf00      	nop
 8005184:	bf00      	nop
 8005186:	e7fd      	b.n	8005184 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005188:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800518a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800518c:	2b00      	cmp	r3, #0
 800518e:	d01e      	beq.n	80051ce <xTaskCreateStatic+0xb2>
 8005190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005192:	2b00      	cmp	r3, #0
 8005194:	d01b      	beq.n	80051ce <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005198:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800519a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800519e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80051a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a2:	2202      	movs	r2, #2
 80051a4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80051a8:	2300      	movs	r3, #0
 80051aa:	9303      	str	r3, [sp, #12]
 80051ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ae:	9302      	str	r3, [sp, #8]
 80051b0:	f107 0314 	add.w	r3, r7, #20
 80051b4:	9301      	str	r3, [sp, #4]
 80051b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b8:	9300      	str	r3, [sp, #0]
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	68b9      	ldr	r1, [r7, #8]
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f000 f850 	bl	8005266 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051c6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80051c8:	f000 f8de 	bl	8005388 <prvAddNewTaskToReadyList>
 80051cc:	e001      	b.n	80051d2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80051ce:	2300      	movs	r3, #0
 80051d0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80051d2:	697b      	ldr	r3, [r7, #20]
	}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3728      	adds	r7, #40	@ 0x28
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b08c      	sub	sp, #48	@ 0x30
 80051e0:	af04      	add	r7, sp, #16
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	603b      	str	r3, [r7, #0]
 80051e8:	4613      	mov	r3, r2
 80051ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80051ec:	88fb      	ldrh	r3, [r7, #6]
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4618      	mov	r0, r3
 80051f2:	f001 fcf3 	bl	8006bdc <pvPortMalloc>
 80051f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00e      	beq.n	800521c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80051fe:	205c      	movs	r0, #92	@ 0x5c
 8005200:	f001 fcec 	bl	8006bdc <pvPortMalloc>
 8005204:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d003      	beq.n	8005214 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	631a      	str	r2, [r3, #48]	@ 0x30
 8005212:	e005      	b.n	8005220 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005214:	6978      	ldr	r0, [r7, #20]
 8005216:	f001 fdaf 	bl	8006d78 <vPortFree>
 800521a:	e001      	b.n	8005220 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800521c:	2300      	movs	r3, #0
 800521e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d017      	beq.n	8005256 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800522e:	88fa      	ldrh	r2, [r7, #6]
 8005230:	2300      	movs	r3, #0
 8005232:	9303      	str	r3, [sp, #12]
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	9302      	str	r3, [sp, #8]
 8005238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800523a:	9301      	str	r3, [sp, #4]
 800523c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800523e:	9300      	str	r3, [sp, #0]
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	68b9      	ldr	r1, [r7, #8]
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f000 f80e 	bl	8005266 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800524a:	69f8      	ldr	r0, [r7, #28]
 800524c:	f000 f89c 	bl	8005388 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005250:	2301      	movs	r3, #1
 8005252:	61bb      	str	r3, [r7, #24]
 8005254:	e002      	b.n	800525c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005256:	f04f 33ff 	mov.w	r3, #4294967295
 800525a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800525c:	69bb      	ldr	r3, [r7, #24]
	}
 800525e:	4618      	mov	r0, r3
 8005260:	3720      	adds	r7, #32
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b088      	sub	sp, #32
 800526a:	af00      	add	r7, sp, #0
 800526c:	60f8      	str	r0, [r7, #12]
 800526e:	60b9      	str	r1, [r7, #8]
 8005270:	607a      	str	r2, [r7, #4]
 8005272:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005276:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	461a      	mov	r2, r3
 800527e:	21a5      	movs	r1, #165	@ 0xa5
 8005280:	f001 ffd5 	bl	800722e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005286:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800528e:	3b01      	subs	r3, #1
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	4413      	add	r3, r2
 8005294:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	f023 0307 	bic.w	r3, r3, #7
 800529c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	f003 0307 	and.w	r3, r3, #7
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00b      	beq.n	80052c0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80052a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ac:	f383 8811 	msr	BASEPRI, r3
 80052b0:	f3bf 8f6f 	isb	sy
 80052b4:	f3bf 8f4f 	dsb	sy
 80052b8:	617b      	str	r3, [r7, #20]
}
 80052ba:	bf00      	nop
 80052bc:	bf00      	nop
 80052be:	e7fd      	b.n	80052bc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d01f      	beq.n	8005306 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052c6:	2300      	movs	r3, #0
 80052c8:	61fb      	str	r3, [r7, #28]
 80052ca:	e012      	b.n	80052f2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80052cc:	68ba      	ldr	r2, [r7, #8]
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	4413      	add	r3, r2
 80052d2:	7819      	ldrb	r1, [r3, #0]
 80052d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	4413      	add	r3, r2
 80052da:	3334      	adds	r3, #52	@ 0x34
 80052dc:	460a      	mov	r2, r1
 80052de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	4413      	add	r3, r2
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d006      	beq.n	80052fa <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	3301      	adds	r3, #1
 80052f0:	61fb      	str	r3, [r7, #28]
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	2b0f      	cmp	r3, #15
 80052f6:	d9e9      	bls.n	80052cc <prvInitialiseNewTask+0x66>
 80052f8:	e000      	b.n	80052fc <prvInitialiseNewTask+0x96>
			{
				break;
 80052fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80052fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005304:	e003      	b.n	800530e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005308:	2200      	movs	r2, #0
 800530a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800530e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005310:	2b37      	cmp	r3, #55	@ 0x37
 8005312:	d901      	bls.n	8005318 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005314:	2337      	movs	r3, #55	@ 0x37
 8005316:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800531a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800531c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800531e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005320:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005322:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005326:	2200      	movs	r2, #0
 8005328:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800532a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800532c:	3304      	adds	r3, #4
 800532e:	4618      	mov	r0, r3
 8005330:	f7ff f966 	bl	8004600 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005336:	3318      	adds	r3, #24
 8005338:	4618      	mov	r0, r3
 800533a:	f7ff f961 	bl	8004600 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800533e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005340:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005342:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005346:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800534a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800534c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800534e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005350:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005352:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005356:	2200      	movs	r2, #0
 8005358:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800535a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800535c:	2200      	movs	r2, #0
 800535e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005362:	683a      	ldr	r2, [r7, #0]
 8005364:	68f9      	ldr	r1, [r7, #12]
 8005366:	69b8      	ldr	r0, [r7, #24]
 8005368:	f001 f9e4 	bl	8006734 <pxPortInitialiseStack>
 800536c:	4602      	mov	r2, r0
 800536e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005370:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005374:	2b00      	cmp	r3, #0
 8005376:	d002      	beq.n	800537e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800537a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800537c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800537e:	bf00      	nop
 8005380:	3720      	adds	r7, #32
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
	...

08005388 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005390:	f001 fb02 	bl	8006998 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005394:	4b2d      	ldr	r3, [pc, #180]	@ (800544c <prvAddNewTaskToReadyList+0xc4>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	3301      	adds	r3, #1
 800539a:	4a2c      	ldr	r2, [pc, #176]	@ (800544c <prvAddNewTaskToReadyList+0xc4>)
 800539c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800539e:	4b2c      	ldr	r3, [pc, #176]	@ (8005450 <prvAddNewTaskToReadyList+0xc8>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d109      	bne.n	80053ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80053a6:	4a2a      	ldr	r2, [pc, #168]	@ (8005450 <prvAddNewTaskToReadyList+0xc8>)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80053ac:	4b27      	ldr	r3, [pc, #156]	@ (800544c <prvAddNewTaskToReadyList+0xc4>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d110      	bne.n	80053d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80053b4:	f000 fbe8 	bl	8005b88 <prvInitialiseTaskLists>
 80053b8:	e00d      	b.n	80053d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80053ba:	4b26      	ldr	r3, [pc, #152]	@ (8005454 <prvAddNewTaskToReadyList+0xcc>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d109      	bne.n	80053d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80053c2:	4b23      	ldr	r3, [pc, #140]	@ (8005450 <prvAddNewTaskToReadyList+0xc8>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d802      	bhi.n	80053d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80053d0:	4a1f      	ldr	r2, [pc, #124]	@ (8005450 <prvAddNewTaskToReadyList+0xc8>)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80053d6:	4b20      	ldr	r3, [pc, #128]	@ (8005458 <prvAddNewTaskToReadyList+0xd0>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	3301      	adds	r3, #1
 80053dc:	4a1e      	ldr	r2, [pc, #120]	@ (8005458 <prvAddNewTaskToReadyList+0xd0>)
 80053de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80053e0:	4b1d      	ldr	r3, [pc, #116]	@ (8005458 <prvAddNewTaskToReadyList+0xd0>)
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053ec:	4b1b      	ldr	r3, [pc, #108]	@ (800545c <prvAddNewTaskToReadyList+0xd4>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d903      	bls.n	80053fc <prvAddNewTaskToReadyList+0x74>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f8:	4a18      	ldr	r2, [pc, #96]	@ (800545c <prvAddNewTaskToReadyList+0xd4>)
 80053fa:	6013      	str	r3, [r2, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005400:	4613      	mov	r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	4413      	add	r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	4a15      	ldr	r2, [pc, #84]	@ (8005460 <prvAddNewTaskToReadyList+0xd8>)
 800540a:	441a      	add	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	3304      	adds	r3, #4
 8005410:	4619      	mov	r1, r3
 8005412:	4610      	mov	r0, r2
 8005414:	f7ff f901 	bl	800461a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005418:	f001 faf0 	bl	80069fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800541c:	4b0d      	ldr	r3, [pc, #52]	@ (8005454 <prvAddNewTaskToReadyList+0xcc>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00e      	beq.n	8005442 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005424:	4b0a      	ldr	r3, [pc, #40]	@ (8005450 <prvAddNewTaskToReadyList+0xc8>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800542e:	429a      	cmp	r2, r3
 8005430:	d207      	bcs.n	8005442 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005432:	4b0c      	ldr	r3, [pc, #48]	@ (8005464 <prvAddNewTaskToReadyList+0xdc>)
 8005434:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005438:	601a      	str	r2, [r3, #0]
 800543a:	f3bf 8f4f 	dsb	sy
 800543e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005442:	bf00      	nop
 8005444:	3708      	adds	r7, #8
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	20000e24 	.word	0x20000e24
 8005450:	20000950 	.word	0x20000950
 8005454:	20000e30 	.word	0x20000e30
 8005458:	20000e40 	.word	0x20000e40
 800545c:	20000e2c 	.word	0x20000e2c
 8005460:	20000954 	.word	0x20000954
 8005464:	e000ed04 	.word	0xe000ed04

08005468 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b08a      	sub	sp, #40	@ 0x28
 800546c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800546e:	2300      	movs	r3, #0
 8005470:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005472:	2300      	movs	r3, #0
 8005474:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005476:	463a      	mov	r2, r7
 8005478:	1d39      	adds	r1, r7, #4
 800547a:	f107 0308 	add.w	r3, r7, #8
 800547e:	4618      	mov	r0, r3
 8005480:	f7ff f86a 	bl	8004558 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005484:	6839      	ldr	r1, [r7, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	9202      	str	r2, [sp, #8]
 800548c:	9301      	str	r3, [sp, #4]
 800548e:	2300      	movs	r3, #0
 8005490:	9300      	str	r3, [sp, #0]
 8005492:	2300      	movs	r3, #0
 8005494:	460a      	mov	r2, r1
 8005496:	4922      	ldr	r1, [pc, #136]	@ (8005520 <vTaskStartScheduler+0xb8>)
 8005498:	4822      	ldr	r0, [pc, #136]	@ (8005524 <vTaskStartScheduler+0xbc>)
 800549a:	f7ff fe3f 	bl	800511c <xTaskCreateStatic>
 800549e:	4603      	mov	r3, r0
 80054a0:	4a21      	ldr	r2, [pc, #132]	@ (8005528 <vTaskStartScheduler+0xc0>)
 80054a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80054a4:	4b20      	ldr	r3, [pc, #128]	@ (8005528 <vTaskStartScheduler+0xc0>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d002      	beq.n	80054b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80054ac:	2301      	movs	r3, #1
 80054ae:	617b      	str	r3, [r7, #20]
 80054b0:	e001      	b.n	80054b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80054b2:	2300      	movs	r3, #0
 80054b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d102      	bne.n	80054c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80054bc:	f000 fde0 	bl	8006080 <xTimerCreateTimerTask>
 80054c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d116      	bne.n	80054f6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80054c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054cc:	f383 8811 	msr	BASEPRI, r3
 80054d0:	f3bf 8f6f 	isb	sy
 80054d4:	f3bf 8f4f 	dsb	sy
 80054d8:	613b      	str	r3, [r7, #16]
}
 80054da:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80054dc:	4b13      	ldr	r3, [pc, #76]	@ (800552c <vTaskStartScheduler+0xc4>)
 80054de:	f04f 32ff 	mov.w	r2, #4294967295
 80054e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80054e4:	4b12      	ldr	r3, [pc, #72]	@ (8005530 <vTaskStartScheduler+0xc8>)
 80054e6:	2201      	movs	r2, #1
 80054e8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80054ea:	4b12      	ldr	r3, [pc, #72]	@ (8005534 <vTaskStartScheduler+0xcc>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80054f0:	f001 f9ae 	bl	8006850 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80054f4:	e00f      	b.n	8005516 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fc:	d10b      	bne.n	8005516 <vTaskStartScheduler+0xae>
	__asm volatile
 80054fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005502:	f383 8811 	msr	BASEPRI, r3
 8005506:	f3bf 8f6f 	isb	sy
 800550a:	f3bf 8f4f 	dsb	sy
 800550e:	60fb      	str	r3, [r7, #12]
}
 8005510:	bf00      	nop
 8005512:	bf00      	nop
 8005514:	e7fd      	b.n	8005512 <vTaskStartScheduler+0xaa>
}
 8005516:	bf00      	nop
 8005518:	3718      	adds	r7, #24
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	080083ec 	.word	0x080083ec
 8005524:	08005b59 	.word	0x08005b59
 8005528:	20000e48 	.word	0x20000e48
 800552c:	20000e44 	.word	0x20000e44
 8005530:	20000e30 	.word	0x20000e30
 8005534:	20000e28 	.word	0x20000e28

08005538 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005538:	b480      	push	{r7}
 800553a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800553c:	4b04      	ldr	r3, [pc, #16]	@ (8005550 <vTaskSuspendAll+0x18>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	3301      	adds	r3, #1
 8005542:	4a03      	ldr	r2, [pc, #12]	@ (8005550 <vTaskSuspendAll+0x18>)
 8005544:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005546:	bf00      	nop
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr
 8005550:	20000e4c 	.word	0x20000e4c

08005554 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800555a:	2300      	movs	r3, #0
 800555c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800555e:	2300      	movs	r3, #0
 8005560:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005562:	4b42      	ldr	r3, [pc, #264]	@ (800566c <xTaskResumeAll+0x118>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10b      	bne.n	8005582 <xTaskResumeAll+0x2e>
	__asm volatile
 800556a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800556e:	f383 8811 	msr	BASEPRI, r3
 8005572:	f3bf 8f6f 	isb	sy
 8005576:	f3bf 8f4f 	dsb	sy
 800557a:	603b      	str	r3, [r7, #0]
}
 800557c:	bf00      	nop
 800557e:	bf00      	nop
 8005580:	e7fd      	b.n	800557e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005582:	f001 fa09 	bl	8006998 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005586:	4b39      	ldr	r3, [pc, #228]	@ (800566c <xTaskResumeAll+0x118>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	3b01      	subs	r3, #1
 800558c:	4a37      	ldr	r2, [pc, #220]	@ (800566c <xTaskResumeAll+0x118>)
 800558e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005590:	4b36      	ldr	r3, [pc, #216]	@ (800566c <xTaskResumeAll+0x118>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d162      	bne.n	800565e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005598:	4b35      	ldr	r3, [pc, #212]	@ (8005670 <xTaskResumeAll+0x11c>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d05e      	beq.n	800565e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055a0:	e02f      	b.n	8005602 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055a2:	4b34      	ldr	r3, [pc, #208]	@ (8005674 <xTaskResumeAll+0x120>)
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	3318      	adds	r3, #24
 80055ae:	4618      	mov	r0, r3
 80055b0:	f7ff f890 	bl	80046d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	3304      	adds	r3, #4
 80055b8:	4618      	mov	r0, r3
 80055ba:	f7ff f88b 	bl	80046d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055c2:	4b2d      	ldr	r3, [pc, #180]	@ (8005678 <xTaskResumeAll+0x124>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d903      	bls.n	80055d2 <xTaskResumeAll+0x7e>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ce:	4a2a      	ldr	r2, [pc, #168]	@ (8005678 <xTaskResumeAll+0x124>)
 80055d0:	6013      	str	r3, [r2, #0]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055d6:	4613      	mov	r3, r2
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	4413      	add	r3, r2
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	4a27      	ldr	r2, [pc, #156]	@ (800567c <xTaskResumeAll+0x128>)
 80055e0:	441a      	add	r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	3304      	adds	r3, #4
 80055e6:	4619      	mov	r1, r3
 80055e8:	4610      	mov	r0, r2
 80055ea:	f7ff f816 	bl	800461a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055f2:	4b23      	ldr	r3, [pc, #140]	@ (8005680 <xTaskResumeAll+0x12c>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d302      	bcc.n	8005602 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80055fc:	4b21      	ldr	r3, [pc, #132]	@ (8005684 <xTaskResumeAll+0x130>)
 80055fe:	2201      	movs	r2, #1
 8005600:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005602:	4b1c      	ldr	r3, [pc, #112]	@ (8005674 <xTaskResumeAll+0x120>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1cb      	bne.n	80055a2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d001      	beq.n	8005614 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005610:	f000 fb58 	bl	8005cc4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005614:	4b1c      	ldr	r3, [pc, #112]	@ (8005688 <xTaskResumeAll+0x134>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d010      	beq.n	8005642 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005620:	f000 f846 	bl	80056b0 <xTaskIncrementTick>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d002      	beq.n	8005630 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800562a:	4b16      	ldr	r3, [pc, #88]	@ (8005684 <xTaskResumeAll+0x130>)
 800562c:	2201      	movs	r2, #1
 800562e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	3b01      	subs	r3, #1
 8005634:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1f1      	bne.n	8005620 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800563c:	4b12      	ldr	r3, [pc, #72]	@ (8005688 <xTaskResumeAll+0x134>)
 800563e:	2200      	movs	r2, #0
 8005640:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005642:	4b10      	ldr	r3, [pc, #64]	@ (8005684 <xTaskResumeAll+0x130>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d009      	beq.n	800565e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800564a:	2301      	movs	r3, #1
 800564c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800564e:	4b0f      	ldr	r3, [pc, #60]	@ (800568c <xTaskResumeAll+0x138>)
 8005650:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005654:	601a      	str	r2, [r3, #0]
 8005656:	f3bf 8f4f 	dsb	sy
 800565a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800565e:	f001 f9cd 	bl	80069fc <vPortExitCritical>

	return xAlreadyYielded;
 8005662:	68bb      	ldr	r3, [r7, #8]
}
 8005664:	4618      	mov	r0, r3
 8005666:	3710      	adds	r7, #16
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	20000e4c 	.word	0x20000e4c
 8005670:	20000e24 	.word	0x20000e24
 8005674:	20000de4 	.word	0x20000de4
 8005678:	20000e2c 	.word	0x20000e2c
 800567c:	20000954 	.word	0x20000954
 8005680:	20000950 	.word	0x20000950
 8005684:	20000e38 	.word	0x20000e38
 8005688:	20000e34 	.word	0x20000e34
 800568c:	e000ed04 	.word	0xe000ed04

08005690 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005696:	4b05      	ldr	r3, [pc, #20]	@ (80056ac <xTaskGetTickCount+0x1c>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800569c:	687b      	ldr	r3, [r7, #4]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	370c      	adds	r7, #12
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	20000e28 	.word	0x20000e28

080056b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b086      	sub	sp, #24
 80056b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80056b6:	2300      	movs	r3, #0
 80056b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056ba:	4b4f      	ldr	r3, [pc, #316]	@ (80057f8 <xTaskIncrementTick+0x148>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	f040 8090 	bne.w	80057e4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80056c4:	4b4d      	ldr	r3, [pc, #308]	@ (80057fc <xTaskIncrementTick+0x14c>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	3301      	adds	r3, #1
 80056ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80056cc:	4a4b      	ldr	r2, [pc, #300]	@ (80057fc <xTaskIncrementTick+0x14c>)
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d121      	bne.n	800571c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80056d8:	4b49      	ldr	r3, [pc, #292]	@ (8005800 <xTaskIncrementTick+0x150>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00b      	beq.n	80056fa <xTaskIncrementTick+0x4a>
	__asm volatile
 80056e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e6:	f383 8811 	msr	BASEPRI, r3
 80056ea:	f3bf 8f6f 	isb	sy
 80056ee:	f3bf 8f4f 	dsb	sy
 80056f2:	603b      	str	r3, [r7, #0]
}
 80056f4:	bf00      	nop
 80056f6:	bf00      	nop
 80056f8:	e7fd      	b.n	80056f6 <xTaskIncrementTick+0x46>
 80056fa:	4b41      	ldr	r3, [pc, #260]	@ (8005800 <xTaskIncrementTick+0x150>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	60fb      	str	r3, [r7, #12]
 8005700:	4b40      	ldr	r3, [pc, #256]	@ (8005804 <xTaskIncrementTick+0x154>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a3e      	ldr	r2, [pc, #248]	@ (8005800 <xTaskIncrementTick+0x150>)
 8005706:	6013      	str	r3, [r2, #0]
 8005708:	4a3e      	ldr	r2, [pc, #248]	@ (8005804 <xTaskIncrementTick+0x154>)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6013      	str	r3, [r2, #0]
 800570e:	4b3e      	ldr	r3, [pc, #248]	@ (8005808 <xTaskIncrementTick+0x158>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	3301      	adds	r3, #1
 8005714:	4a3c      	ldr	r2, [pc, #240]	@ (8005808 <xTaskIncrementTick+0x158>)
 8005716:	6013      	str	r3, [r2, #0]
 8005718:	f000 fad4 	bl	8005cc4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800571c:	4b3b      	ldr	r3, [pc, #236]	@ (800580c <xTaskIncrementTick+0x15c>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	429a      	cmp	r2, r3
 8005724:	d349      	bcc.n	80057ba <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005726:	4b36      	ldr	r3, [pc, #216]	@ (8005800 <xTaskIncrementTick+0x150>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d104      	bne.n	800573a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005730:	4b36      	ldr	r3, [pc, #216]	@ (800580c <xTaskIncrementTick+0x15c>)
 8005732:	f04f 32ff 	mov.w	r2, #4294967295
 8005736:	601a      	str	r2, [r3, #0]
					break;
 8005738:	e03f      	b.n	80057ba <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800573a:	4b31      	ldr	r3, [pc, #196]	@ (8005800 <xTaskIncrementTick+0x150>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800574a:	693a      	ldr	r2, [r7, #16]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	429a      	cmp	r2, r3
 8005750:	d203      	bcs.n	800575a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005752:	4a2e      	ldr	r2, [pc, #184]	@ (800580c <xTaskIncrementTick+0x15c>)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005758:	e02f      	b.n	80057ba <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	3304      	adds	r3, #4
 800575e:	4618      	mov	r0, r3
 8005760:	f7fe ffb8 	bl	80046d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005768:	2b00      	cmp	r3, #0
 800576a:	d004      	beq.n	8005776 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	3318      	adds	r3, #24
 8005770:	4618      	mov	r0, r3
 8005772:	f7fe ffaf 	bl	80046d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800577a:	4b25      	ldr	r3, [pc, #148]	@ (8005810 <xTaskIncrementTick+0x160>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	429a      	cmp	r2, r3
 8005780:	d903      	bls.n	800578a <xTaskIncrementTick+0xda>
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005786:	4a22      	ldr	r2, [pc, #136]	@ (8005810 <xTaskIncrementTick+0x160>)
 8005788:	6013      	str	r3, [r2, #0]
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800578e:	4613      	mov	r3, r2
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	4413      	add	r3, r2
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	4a1f      	ldr	r2, [pc, #124]	@ (8005814 <xTaskIncrementTick+0x164>)
 8005798:	441a      	add	r2, r3
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	3304      	adds	r3, #4
 800579e:	4619      	mov	r1, r3
 80057a0:	4610      	mov	r0, r2
 80057a2:	f7fe ff3a 	bl	800461a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057aa:	4b1b      	ldr	r3, [pc, #108]	@ (8005818 <xTaskIncrementTick+0x168>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d3b8      	bcc.n	8005726 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80057b4:	2301      	movs	r3, #1
 80057b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057b8:	e7b5      	b.n	8005726 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80057ba:	4b17      	ldr	r3, [pc, #92]	@ (8005818 <xTaskIncrementTick+0x168>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057c0:	4914      	ldr	r1, [pc, #80]	@ (8005814 <xTaskIncrementTick+0x164>)
 80057c2:	4613      	mov	r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	4413      	add	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	440b      	add	r3, r1
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d901      	bls.n	80057d6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80057d2:	2301      	movs	r3, #1
 80057d4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80057d6:	4b11      	ldr	r3, [pc, #68]	@ (800581c <xTaskIncrementTick+0x16c>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d007      	beq.n	80057ee <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80057de:	2301      	movs	r3, #1
 80057e0:	617b      	str	r3, [r7, #20]
 80057e2:	e004      	b.n	80057ee <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80057e4:	4b0e      	ldr	r3, [pc, #56]	@ (8005820 <xTaskIncrementTick+0x170>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	3301      	adds	r3, #1
 80057ea:	4a0d      	ldr	r2, [pc, #52]	@ (8005820 <xTaskIncrementTick+0x170>)
 80057ec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80057ee:	697b      	ldr	r3, [r7, #20]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3718      	adds	r7, #24
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	20000e4c 	.word	0x20000e4c
 80057fc:	20000e28 	.word	0x20000e28
 8005800:	20000ddc 	.word	0x20000ddc
 8005804:	20000de0 	.word	0x20000de0
 8005808:	20000e3c 	.word	0x20000e3c
 800580c:	20000e44 	.word	0x20000e44
 8005810:	20000e2c 	.word	0x20000e2c
 8005814:	20000954 	.word	0x20000954
 8005818:	20000950 	.word	0x20000950
 800581c:	20000e38 	.word	0x20000e38
 8005820:	20000e34 	.word	0x20000e34

08005824 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005824:	b480      	push	{r7}
 8005826:	b085      	sub	sp, #20
 8005828:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800582a:	4b28      	ldr	r3, [pc, #160]	@ (80058cc <vTaskSwitchContext+0xa8>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d003      	beq.n	800583a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005832:	4b27      	ldr	r3, [pc, #156]	@ (80058d0 <vTaskSwitchContext+0xac>)
 8005834:	2201      	movs	r2, #1
 8005836:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005838:	e042      	b.n	80058c0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800583a:	4b25      	ldr	r3, [pc, #148]	@ (80058d0 <vTaskSwitchContext+0xac>)
 800583c:	2200      	movs	r2, #0
 800583e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005840:	4b24      	ldr	r3, [pc, #144]	@ (80058d4 <vTaskSwitchContext+0xb0>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	60fb      	str	r3, [r7, #12]
 8005846:	e011      	b.n	800586c <vTaskSwitchContext+0x48>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d10b      	bne.n	8005866 <vTaskSwitchContext+0x42>
	__asm volatile
 800584e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005852:	f383 8811 	msr	BASEPRI, r3
 8005856:	f3bf 8f6f 	isb	sy
 800585a:	f3bf 8f4f 	dsb	sy
 800585e:	607b      	str	r3, [r7, #4]
}
 8005860:	bf00      	nop
 8005862:	bf00      	nop
 8005864:	e7fd      	b.n	8005862 <vTaskSwitchContext+0x3e>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	3b01      	subs	r3, #1
 800586a:	60fb      	str	r3, [r7, #12]
 800586c:	491a      	ldr	r1, [pc, #104]	@ (80058d8 <vTaskSwitchContext+0xb4>)
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	4613      	mov	r3, r2
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4413      	add	r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	440b      	add	r3, r1
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d0e3      	beq.n	8005848 <vTaskSwitchContext+0x24>
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	4613      	mov	r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	4413      	add	r3, r2
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	4a13      	ldr	r2, [pc, #76]	@ (80058d8 <vTaskSwitchContext+0xb4>)
 800588c:	4413      	add	r3, r2
 800588e:	60bb      	str	r3, [r7, #8]
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	685a      	ldr	r2, [r3, #4]
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	605a      	str	r2, [r3, #4]
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	685a      	ldr	r2, [r3, #4]
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	3308      	adds	r3, #8
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d104      	bne.n	80058b0 <vTaskSwitchContext+0x8c>
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	685a      	ldr	r2, [r3, #4]
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	605a      	str	r2, [r3, #4]
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	4a09      	ldr	r2, [pc, #36]	@ (80058dc <vTaskSwitchContext+0xb8>)
 80058b8:	6013      	str	r3, [r2, #0]
 80058ba:	4a06      	ldr	r2, [pc, #24]	@ (80058d4 <vTaskSwitchContext+0xb0>)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6013      	str	r3, [r2, #0]
}
 80058c0:	bf00      	nop
 80058c2:	3714      	adds	r7, #20
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr
 80058cc:	20000e4c 	.word	0x20000e4c
 80058d0:	20000e38 	.word	0x20000e38
 80058d4:	20000e2c 	.word	0x20000e2c
 80058d8:	20000954 	.word	0x20000954
 80058dc:	20000950 	.word	0x20000950

080058e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d10b      	bne.n	8005908 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80058f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f4:	f383 8811 	msr	BASEPRI, r3
 80058f8:	f3bf 8f6f 	isb	sy
 80058fc:	f3bf 8f4f 	dsb	sy
 8005900:	60fb      	str	r3, [r7, #12]
}
 8005902:	bf00      	nop
 8005904:	bf00      	nop
 8005906:	e7fd      	b.n	8005904 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005908:	4b07      	ldr	r3, [pc, #28]	@ (8005928 <vTaskPlaceOnEventList+0x48>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	3318      	adds	r3, #24
 800590e:	4619      	mov	r1, r3
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f7fe fea6 	bl	8004662 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005916:	2101      	movs	r1, #1
 8005918:	6838      	ldr	r0, [r7, #0]
 800591a:	f000 fb5d 	bl	8005fd8 <prvAddCurrentTaskToDelayedList>
}
 800591e:	bf00      	nop
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	20000950 	.word	0x20000950

0800592c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800592c:	b580      	push	{r7, lr}
 800592e:	b086      	sub	sp, #24
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d10b      	bne.n	8005956 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800593e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005942:	f383 8811 	msr	BASEPRI, r3
 8005946:	f3bf 8f6f 	isb	sy
 800594a:	f3bf 8f4f 	dsb	sy
 800594e:	617b      	str	r3, [r7, #20]
}
 8005950:	bf00      	nop
 8005952:	bf00      	nop
 8005954:	e7fd      	b.n	8005952 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005956:	4b0a      	ldr	r3, [pc, #40]	@ (8005980 <vTaskPlaceOnEventListRestricted+0x54>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	3318      	adds	r3, #24
 800595c:	4619      	mov	r1, r3
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f7fe fe5b 	bl	800461a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d002      	beq.n	8005970 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800596a:	f04f 33ff 	mov.w	r3, #4294967295
 800596e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005970:	6879      	ldr	r1, [r7, #4]
 8005972:	68b8      	ldr	r0, [r7, #8]
 8005974:	f000 fb30 	bl	8005fd8 <prvAddCurrentTaskToDelayedList>
	}
 8005978:	bf00      	nop
 800597a:	3718      	adds	r7, #24
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}
 8005980:	20000950 	.word	0x20000950

08005984 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b086      	sub	sp, #24
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10b      	bne.n	80059b2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800599a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800599e:	f383 8811 	msr	BASEPRI, r3
 80059a2:	f3bf 8f6f 	isb	sy
 80059a6:	f3bf 8f4f 	dsb	sy
 80059aa:	60fb      	str	r3, [r7, #12]
}
 80059ac:	bf00      	nop
 80059ae:	bf00      	nop
 80059b0:	e7fd      	b.n	80059ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	3318      	adds	r3, #24
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fe fe8c 	bl	80046d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059bc:	4b1d      	ldr	r3, [pc, #116]	@ (8005a34 <xTaskRemoveFromEventList+0xb0>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d11d      	bne.n	8005a00 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	3304      	adds	r3, #4
 80059c8:	4618      	mov	r0, r3
 80059ca:	f7fe fe83 	bl	80046d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059d2:	4b19      	ldr	r3, [pc, #100]	@ (8005a38 <xTaskRemoveFromEventList+0xb4>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d903      	bls.n	80059e2 <xTaskRemoveFromEventList+0x5e>
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059de:	4a16      	ldr	r2, [pc, #88]	@ (8005a38 <xTaskRemoveFromEventList+0xb4>)
 80059e0:	6013      	str	r3, [r2, #0]
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059e6:	4613      	mov	r3, r2
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	4413      	add	r3, r2
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	4a13      	ldr	r2, [pc, #76]	@ (8005a3c <xTaskRemoveFromEventList+0xb8>)
 80059f0:	441a      	add	r2, r3
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	3304      	adds	r3, #4
 80059f6:	4619      	mov	r1, r3
 80059f8:	4610      	mov	r0, r2
 80059fa:	f7fe fe0e 	bl	800461a <vListInsertEnd>
 80059fe:	e005      	b.n	8005a0c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	3318      	adds	r3, #24
 8005a04:	4619      	mov	r1, r3
 8005a06:	480e      	ldr	r0, [pc, #56]	@ (8005a40 <xTaskRemoveFromEventList+0xbc>)
 8005a08:	f7fe fe07 	bl	800461a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a10:	4b0c      	ldr	r3, [pc, #48]	@ (8005a44 <xTaskRemoveFromEventList+0xc0>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d905      	bls.n	8005a26 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8005a48 <xTaskRemoveFromEventList+0xc4>)
 8005a20:	2201      	movs	r2, #1
 8005a22:	601a      	str	r2, [r3, #0]
 8005a24:	e001      	b.n	8005a2a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005a26:	2300      	movs	r3, #0
 8005a28:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005a2a:	697b      	ldr	r3, [r7, #20]
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3718      	adds	r7, #24
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	20000e4c 	.word	0x20000e4c
 8005a38:	20000e2c 	.word	0x20000e2c
 8005a3c:	20000954 	.word	0x20000954
 8005a40:	20000de4 	.word	0x20000de4
 8005a44:	20000950 	.word	0x20000950
 8005a48:	20000e38 	.word	0x20000e38

08005a4c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a54:	4b06      	ldr	r3, [pc, #24]	@ (8005a70 <vTaskInternalSetTimeOutState+0x24>)
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005a5c:	4b05      	ldr	r3, [pc, #20]	@ (8005a74 <vTaskInternalSetTimeOutState+0x28>)
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	605a      	str	r2, [r3, #4]
}
 8005a64:	bf00      	nop
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr
 8005a70:	20000e3c 	.word	0x20000e3c
 8005a74:	20000e28 	.word	0x20000e28

08005a78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b088      	sub	sp, #32
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d10b      	bne.n	8005aa0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a8c:	f383 8811 	msr	BASEPRI, r3
 8005a90:	f3bf 8f6f 	isb	sy
 8005a94:	f3bf 8f4f 	dsb	sy
 8005a98:	613b      	str	r3, [r7, #16]
}
 8005a9a:	bf00      	nop
 8005a9c:	bf00      	nop
 8005a9e:	e7fd      	b.n	8005a9c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10b      	bne.n	8005abe <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aaa:	f383 8811 	msr	BASEPRI, r3
 8005aae:	f3bf 8f6f 	isb	sy
 8005ab2:	f3bf 8f4f 	dsb	sy
 8005ab6:	60fb      	str	r3, [r7, #12]
}
 8005ab8:	bf00      	nop
 8005aba:	bf00      	nop
 8005abc:	e7fd      	b.n	8005aba <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005abe:	f000 ff6b 	bl	8006998 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005ac2:	4b1d      	ldr	r3, [pc, #116]	@ (8005b38 <xTaskCheckForTimeOut+0xc0>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	69ba      	ldr	r2, [r7, #24]
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ada:	d102      	bne.n	8005ae2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005adc:	2300      	movs	r3, #0
 8005ade:	61fb      	str	r3, [r7, #28]
 8005ae0:	e023      	b.n	8005b2a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	4b15      	ldr	r3, [pc, #84]	@ (8005b3c <xTaskCheckForTimeOut+0xc4>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d007      	beq.n	8005afe <xTaskCheckForTimeOut+0x86>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d302      	bcc.n	8005afe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005af8:	2301      	movs	r3, #1
 8005afa:	61fb      	str	r3, [r7, #28]
 8005afc:	e015      	b.n	8005b2a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d20b      	bcs.n	8005b20 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	1ad2      	subs	r2, r2, r3
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f7ff ff99 	bl	8005a4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	61fb      	str	r3, [r7, #28]
 8005b1e:	e004      	b.n	8005b2a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	2200      	movs	r2, #0
 8005b24:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005b26:	2301      	movs	r3, #1
 8005b28:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005b2a:	f000 ff67 	bl	80069fc <vPortExitCritical>

	return xReturn;
 8005b2e:	69fb      	ldr	r3, [r7, #28]
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3720      	adds	r7, #32
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	20000e28 	.word	0x20000e28
 8005b3c:	20000e3c 	.word	0x20000e3c

08005b40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005b40:	b480      	push	{r7}
 8005b42:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005b44:	4b03      	ldr	r3, [pc, #12]	@ (8005b54 <vTaskMissedYield+0x14>)
 8005b46:	2201      	movs	r2, #1
 8005b48:	601a      	str	r2, [r3, #0]
}
 8005b4a:	bf00      	nop
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr
 8005b54:	20000e38 	.word	0x20000e38

08005b58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b60:	f000 f852 	bl	8005c08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b64:	4b06      	ldr	r3, [pc, #24]	@ (8005b80 <prvIdleTask+0x28>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d9f9      	bls.n	8005b60 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b6c:	4b05      	ldr	r3, [pc, #20]	@ (8005b84 <prvIdleTask+0x2c>)
 8005b6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b72:	601a      	str	r2, [r3, #0]
 8005b74:	f3bf 8f4f 	dsb	sy
 8005b78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b7c:	e7f0      	b.n	8005b60 <prvIdleTask+0x8>
 8005b7e:	bf00      	nop
 8005b80:	20000954 	.word	0x20000954
 8005b84:	e000ed04 	.word	0xe000ed04

08005b88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b8e:	2300      	movs	r3, #0
 8005b90:	607b      	str	r3, [r7, #4]
 8005b92:	e00c      	b.n	8005bae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	4613      	mov	r3, r2
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	4413      	add	r3, r2
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	4a12      	ldr	r2, [pc, #72]	@ (8005be8 <prvInitialiseTaskLists+0x60>)
 8005ba0:	4413      	add	r3, r2
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7fe fd0c 	bl	80045c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	3301      	adds	r3, #1
 8005bac:	607b      	str	r3, [r7, #4]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2b37      	cmp	r3, #55	@ 0x37
 8005bb2:	d9ef      	bls.n	8005b94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005bb4:	480d      	ldr	r0, [pc, #52]	@ (8005bec <prvInitialiseTaskLists+0x64>)
 8005bb6:	f7fe fd03 	bl	80045c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005bba:	480d      	ldr	r0, [pc, #52]	@ (8005bf0 <prvInitialiseTaskLists+0x68>)
 8005bbc:	f7fe fd00 	bl	80045c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005bc0:	480c      	ldr	r0, [pc, #48]	@ (8005bf4 <prvInitialiseTaskLists+0x6c>)
 8005bc2:	f7fe fcfd 	bl	80045c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005bc6:	480c      	ldr	r0, [pc, #48]	@ (8005bf8 <prvInitialiseTaskLists+0x70>)
 8005bc8:	f7fe fcfa 	bl	80045c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005bcc:	480b      	ldr	r0, [pc, #44]	@ (8005bfc <prvInitialiseTaskLists+0x74>)
 8005bce:	f7fe fcf7 	bl	80045c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8005c00 <prvInitialiseTaskLists+0x78>)
 8005bd4:	4a05      	ldr	r2, [pc, #20]	@ (8005bec <prvInitialiseTaskLists+0x64>)
 8005bd6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8005c04 <prvInitialiseTaskLists+0x7c>)
 8005bda:	4a05      	ldr	r2, [pc, #20]	@ (8005bf0 <prvInitialiseTaskLists+0x68>)
 8005bdc:	601a      	str	r2, [r3, #0]
}
 8005bde:	bf00      	nop
 8005be0:	3708      	adds	r7, #8
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	20000954 	.word	0x20000954
 8005bec:	20000db4 	.word	0x20000db4
 8005bf0:	20000dc8 	.word	0x20000dc8
 8005bf4:	20000de4 	.word	0x20000de4
 8005bf8:	20000df8 	.word	0x20000df8
 8005bfc:	20000e10 	.word	0x20000e10
 8005c00:	20000ddc 	.word	0x20000ddc
 8005c04:	20000de0 	.word	0x20000de0

08005c08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c0e:	e019      	b.n	8005c44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c10:	f000 fec2 	bl	8006998 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c14:	4b10      	ldr	r3, [pc, #64]	@ (8005c58 <prvCheckTasksWaitingTermination+0x50>)
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	3304      	adds	r3, #4
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7fe fd57 	bl	80046d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c26:	4b0d      	ldr	r3, [pc, #52]	@ (8005c5c <prvCheckTasksWaitingTermination+0x54>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	4a0b      	ldr	r2, [pc, #44]	@ (8005c5c <prvCheckTasksWaitingTermination+0x54>)
 8005c2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c30:	4b0b      	ldr	r3, [pc, #44]	@ (8005c60 <prvCheckTasksWaitingTermination+0x58>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	3b01      	subs	r3, #1
 8005c36:	4a0a      	ldr	r2, [pc, #40]	@ (8005c60 <prvCheckTasksWaitingTermination+0x58>)
 8005c38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c3a:	f000 fedf 	bl	80069fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 f810 	bl	8005c64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c44:	4b06      	ldr	r3, [pc, #24]	@ (8005c60 <prvCheckTasksWaitingTermination+0x58>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d1e1      	bne.n	8005c10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c4c:	bf00      	nop
 8005c4e:	bf00      	nop
 8005c50:	3708      	adds	r7, #8
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	20000df8 	.word	0x20000df8
 8005c5c:	20000e24 	.word	0x20000e24
 8005c60:	20000e0c 	.word	0x20000e0c

08005c64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d108      	bne.n	8005c88 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f001 f87c 	bl	8006d78 <vPortFree>
				vPortFree( pxTCB );
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f001 f879 	bl	8006d78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c86:	e019      	b.n	8005cbc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d103      	bne.n	8005c9a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f001 f870 	bl	8006d78 <vPortFree>
	}
 8005c98:	e010      	b.n	8005cbc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d00b      	beq.n	8005cbc <prvDeleteTCB+0x58>
	__asm volatile
 8005ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca8:	f383 8811 	msr	BASEPRI, r3
 8005cac:	f3bf 8f6f 	isb	sy
 8005cb0:	f3bf 8f4f 	dsb	sy
 8005cb4:	60fb      	str	r3, [r7, #12]
}
 8005cb6:	bf00      	nop
 8005cb8:	bf00      	nop
 8005cba:	e7fd      	b.n	8005cb8 <prvDeleteTCB+0x54>
	}
 8005cbc:	bf00      	nop
 8005cbe:	3710      	adds	r7, #16
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cca:	4b0c      	ldr	r3, [pc, #48]	@ (8005cfc <prvResetNextTaskUnblockTime+0x38>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d104      	bne.n	8005cde <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8005d00 <prvResetNextTaskUnblockTime+0x3c>)
 8005cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8005cda:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005cdc:	e008      	b.n	8005cf0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cde:	4b07      	ldr	r3, [pc, #28]	@ (8005cfc <prvResetNextTaskUnblockTime+0x38>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	4a04      	ldr	r2, [pc, #16]	@ (8005d00 <prvResetNextTaskUnblockTime+0x3c>)
 8005cee:	6013      	str	r3, [r2, #0]
}
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr
 8005cfc:	20000ddc 	.word	0x20000ddc
 8005d00:	20000e44 	.word	0x20000e44

08005d04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8005d38 <xTaskGetSchedulerState+0x34>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d102      	bne.n	8005d18 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d12:	2301      	movs	r3, #1
 8005d14:	607b      	str	r3, [r7, #4]
 8005d16:	e008      	b.n	8005d2a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d18:	4b08      	ldr	r3, [pc, #32]	@ (8005d3c <xTaskGetSchedulerState+0x38>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d102      	bne.n	8005d26 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005d20:	2302      	movs	r3, #2
 8005d22:	607b      	str	r3, [r7, #4]
 8005d24:	e001      	b.n	8005d2a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d26:	2300      	movs	r3, #0
 8005d28:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005d2a:	687b      	ldr	r3, [r7, #4]
	}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr
 8005d38:	20000e30 	.word	0x20000e30
 8005d3c:	20000e4c 	.word	0x20000e4c

08005d40 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b086      	sub	sp, #24
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d058      	beq.n	8005e08 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005d56:	4b2f      	ldr	r3, [pc, #188]	@ (8005e14 <xTaskPriorityDisinherit+0xd4>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d00b      	beq.n	8005d78 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d64:	f383 8811 	msr	BASEPRI, r3
 8005d68:	f3bf 8f6f 	isb	sy
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	60fb      	str	r3, [r7, #12]
}
 8005d72:	bf00      	nop
 8005d74:	bf00      	nop
 8005d76:	e7fd      	b.n	8005d74 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d10b      	bne.n	8005d98 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d84:	f383 8811 	msr	BASEPRI, r3
 8005d88:	f3bf 8f6f 	isb	sy
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	60bb      	str	r3, [r7, #8]
}
 8005d92:	bf00      	nop
 8005d94:	bf00      	nop
 8005d96:	e7fd      	b.n	8005d94 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d9c:	1e5a      	subs	r2, r3, #1
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d02c      	beq.n	8005e08 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d128      	bne.n	8005e08 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	3304      	adds	r3, #4
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7fe fc8a 	bl	80046d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dcc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dd8:	4b0f      	ldr	r3, [pc, #60]	@ (8005e18 <xTaskPriorityDisinherit+0xd8>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d903      	bls.n	8005de8 <xTaskPriorityDisinherit+0xa8>
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005de4:	4a0c      	ldr	r2, [pc, #48]	@ (8005e18 <xTaskPriorityDisinherit+0xd8>)
 8005de6:	6013      	str	r3, [r2, #0]
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dec:	4613      	mov	r3, r2
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4413      	add	r3, r2
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	4a09      	ldr	r2, [pc, #36]	@ (8005e1c <xTaskPriorityDisinherit+0xdc>)
 8005df6:	441a      	add	r2, r3
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	3304      	adds	r3, #4
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	4610      	mov	r0, r2
 8005e00:	f7fe fc0b 	bl	800461a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005e04:	2301      	movs	r3, #1
 8005e06:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e08:	697b      	ldr	r3, [r7, #20]
	}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3718      	adds	r7, #24
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	20000950 	.word	0x20000950
 8005e18:	20000e2c 	.word	0x20000e2c
 8005e1c:	20000954 	.word	0x20000954

08005e20 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8005e2a:	f000 fdb5 	bl	8006998 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8005e2e:	4b1e      	ldr	r3, [pc, #120]	@ (8005ea8 <ulTaskNotifyTake+0x88>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d113      	bne.n	8005e60 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8005e38:	4b1b      	ldr	r3, [pc, #108]	@ (8005ea8 <ulTaskNotifyTake+0x88>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00b      	beq.n	8005e60 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005e48:	2101      	movs	r1, #1
 8005e4a:	6838      	ldr	r0, [r7, #0]
 8005e4c:	f000 f8c4 	bl	8005fd8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8005e50:	4b16      	ldr	r3, [pc, #88]	@ (8005eac <ulTaskNotifyTake+0x8c>)
 8005e52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e56:	601a      	str	r2, [r3, #0]
 8005e58:	f3bf 8f4f 	dsb	sy
 8005e5c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005e60:	f000 fdcc 	bl	80069fc <vPortExitCritical>

		taskENTER_CRITICAL();
 8005e64:	f000 fd98 	bl	8006998 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8005e68:	4b0f      	ldr	r3, [pc, #60]	@ (8005ea8 <ulTaskNotifyTake+0x88>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e6e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00c      	beq.n	8005e90 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d004      	beq.n	8005e86 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8005e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8005ea8 <ulTaskNotifyTake+0x88>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2200      	movs	r2, #0
 8005e82:	655a      	str	r2, [r3, #84]	@ 0x54
 8005e84:	e004      	b.n	8005e90 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8005e86:	4b08      	ldr	r3, [pc, #32]	@ (8005ea8 <ulTaskNotifyTake+0x88>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	3a01      	subs	r2, #1
 8005e8e:	655a      	str	r2, [r3, #84]	@ 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005e90:	4b05      	ldr	r3, [pc, #20]	@ (8005ea8 <ulTaskNotifyTake+0x88>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		}
		taskEXIT_CRITICAL();
 8005e9a:	f000 fdaf 	bl	80069fc <vPortExitCritical>

		return ulReturn;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
	}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3710      	adds	r7, #16
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	20000950 	.word	0x20000950
 8005eac:	e000ed04 	.word	0xe000ed04

08005eb0 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b08a      	sub	sp, #40	@ 0x28
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d10b      	bne.n	8005ed8 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 8005ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec4:	f383 8811 	msr	BASEPRI, r3
 8005ec8:	f3bf 8f6f 	isb	sy
 8005ecc:	f3bf 8f4f 	dsb	sy
 8005ed0:	61bb      	str	r3, [r7, #24]
}
 8005ed2:	bf00      	nop
 8005ed4:	bf00      	nop
 8005ed6:	e7fd      	b.n	8005ed4 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ed8:	f000 fe3e 	bl	8006b58 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 8005ee0:	f3ef 8211 	mrs	r2, BASEPRI
 8005ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee8:	f383 8811 	msr	BASEPRI, r3
 8005eec:	f3bf 8f6f 	isb	sy
 8005ef0:	f3bf 8f4f 	dsb	sy
 8005ef4:	617a      	str	r2, [r7, #20]
 8005ef6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005ef8:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005efa:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005efe:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005f02:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f06:	2202      	movs	r2, #2
 8005f08:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8005f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f10:	1c5a      	adds	r2, r3, #1
 8005f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f14:	655a      	str	r2, [r3, #84]	@ 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005f16:	7ffb      	ldrb	r3, [r7, #31]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d147      	bne.n	8005fac <vTaskNotifyGiveFromISR+0xfc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00b      	beq.n	8005f3c <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 8005f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f28:	f383 8811 	msr	BASEPRI, r3
 8005f2c:	f3bf 8f6f 	isb	sy
 8005f30:	f3bf 8f4f 	dsb	sy
 8005f34:	60fb      	str	r3, [r7, #12]
}
 8005f36:	bf00      	nop
 8005f38:	bf00      	nop
 8005f3a:	e7fd      	b.n	8005f38 <vTaskNotifyGiveFromISR+0x88>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f3c:	4b20      	ldr	r3, [pc, #128]	@ (8005fc0 <vTaskNotifyGiveFromISR+0x110>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d11d      	bne.n	8005f80 <vTaskNotifyGiveFromISR+0xd0>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f46:	3304      	adds	r3, #4
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7fe fbc3 	bl	80046d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f52:	4b1c      	ldr	r3, [pc, #112]	@ (8005fc4 <vTaskNotifyGiveFromISR+0x114>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d903      	bls.n	8005f62 <vTaskNotifyGiveFromISR+0xb2>
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f5e:	4a19      	ldr	r2, [pc, #100]	@ (8005fc4 <vTaskNotifyGiveFromISR+0x114>)
 8005f60:	6013      	str	r3, [r2, #0]
 8005f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f66:	4613      	mov	r3, r2
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	4413      	add	r3, r2
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4a16      	ldr	r2, [pc, #88]	@ (8005fc8 <vTaskNotifyGiveFromISR+0x118>)
 8005f70:	441a      	add	r2, r3
 8005f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f74:	3304      	adds	r3, #4
 8005f76:	4619      	mov	r1, r3
 8005f78:	4610      	mov	r0, r2
 8005f7a:	f7fe fb4e 	bl	800461a <vListInsertEnd>
 8005f7e:	e005      	b.n	8005f8c <vTaskNotifyGiveFromISR+0xdc>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f82:	3318      	adds	r3, #24
 8005f84:	4619      	mov	r1, r3
 8005f86:	4811      	ldr	r0, [pc, #68]	@ (8005fcc <vTaskNotifyGiveFromISR+0x11c>)
 8005f88:	f7fe fb47 	bl	800461a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f90:	4b0f      	ldr	r3, [pc, #60]	@ (8005fd0 <vTaskNotifyGiveFromISR+0x120>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d908      	bls.n	8005fac <vTaskNotifyGiveFromISR+0xfc>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d002      	beq.n	8005fa6 <vTaskNotifyGiveFromISR+0xf6>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8005fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8005fd4 <vTaskNotifyGiveFromISR+0x124>)
 8005fa8:	2201      	movs	r2, #1
 8005faa:	601a      	str	r2, [r3, #0]
 8005fac:	6a3b      	ldr	r3, [r7, #32]
 8005fae:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	f383 8811 	msr	BASEPRI, r3
}
 8005fb6:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8005fb8:	bf00      	nop
 8005fba:	3728      	adds	r7, #40	@ 0x28
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	20000e4c 	.word	0x20000e4c
 8005fc4:	20000e2c 	.word	0x20000e2c
 8005fc8:	20000954 	.word	0x20000954
 8005fcc:	20000de4 	.word	0x20000de4
 8005fd0:	20000950 	.word	0x20000950
 8005fd4:	20000e38 	.word	0x20000e38

08005fd8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005fe2:	4b21      	ldr	r3, [pc, #132]	@ (8006068 <prvAddCurrentTaskToDelayedList+0x90>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fe8:	4b20      	ldr	r3, [pc, #128]	@ (800606c <prvAddCurrentTaskToDelayedList+0x94>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	3304      	adds	r3, #4
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7fe fb70 	bl	80046d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ffa:	d10a      	bne.n	8006012 <prvAddCurrentTaskToDelayedList+0x3a>
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d007      	beq.n	8006012 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006002:	4b1a      	ldr	r3, [pc, #104]	@ (800606c <prvAddCurrentTaskToDelayedList+0x94>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	3304      	adds	r3, #4
 8006008:	4619      	mov	r1, r3
 800600a:	4819      	ldr	r0, [pc, #100]	@ (8006070 <prvAddCurrentTaskToDelayedList+0x98>)
 800600c:	f7fe fb05 	bl	800461a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006010:	e026      	b.n	8006060 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4413      	add	r3, r2
 8006018:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800601a:	4b14      	ldr	r3, [pc, #80]	@ (800606c <prvAddCurrentTaskToDelayedList+0x94>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006022:	68ba      	ldr	r2, [r7, #8]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	429a      	cmp	r2, r3
 8006028:	d209      	bcs.n	800603e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800602a:	4b12      	ldr	r3, [pc, #72]	@ (8006074 <prvAddCurrentTaskToDelayedList+0x9c>)
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	4b0f      	ldr	r3, [pc, #60]	@ (800606c <prvAddCurrentTaskToDelayedList+0x94>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	3304      	adds	r3, #4
 8006034:	4619      	mov	r1, r3
 8006036:	4610      	mov	r0, r2
 8006038:	f7fe fb13 	bl	8004662 <vListInsert>
}
 800603c:	e010      	b.n	8006060 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800603e:	4b0e      	ldr	r3, [pc, #56]	@ (8006078 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	4b0a      	ldr	r3, [pc, #40]	@ (800606c <prvAddCurrentTaskToDelayedList+0x94>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	3304      	adds	r3, #4
 8006048:	4619      	mov	r1, r3
 800604a:	4610      	mov	r0, r2
 800604c:	f7fe fb09 	bl	8004662 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006050:	4b0a      	ldr	r3, [pc, #40]	@ (800607c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68ba      	ldr	r2, [r7, #8]
 8006056:	429a      	cmp	r2, r3
 8006058:	d202      	bcs.n	8006060 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800605a:	4a08      	ldr	r2, [pc, #32]	@ (800607c <prvAddCurrentTaskToDelayedList+0xa4>)
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	6013      	str	r3, [r2, #0]
}
 8006060:	bf00      	nop
 8006062:	3710      	adds	r7, #16
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	20000e28 	.word	0x20000e28
 800606c:	20000950 	.word	0x20000950
 8006070:	20000e10 	.word	0x20000e10
 8006074:	20000de0 	.word	0x20000de0
 8006078:	20000ddc 	.word	0x20000ddc
 800607c:	20000e44 	.word	0x20000e44

08006080 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b08a      	sub	sp, #40	@ 0x28
 8006084:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006086:	2300      	movs	r3, #0
 8006088:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800608a:	f000 fb13 	bl	80066b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800608e:	4b1d      	ldr	r3, [pc, #116]	@ (8006104 <xTimerCreateTimerTask+0x84>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d021      	beq.n	80060da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006096:	2300      	movs	r3, #0
 8006098:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800609a:	2300      	movs	r3, #0
 800609c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800609e:	1d3a      	adds	r2, r7, #4
 80060a0:	f107 0108 	add.w	r1, r7, #8
 80060a4:	f107 030c 	add.w	r3, r7, #12
 80060a8:	4618      	mov	r0, r3
 80060aa:	f7fe fa6f 	bl	800458c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80060ae:	6879      	ldr	r1, [r7, #4]
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	9202      	str	r2, [sp, #8]
 80060b6:	9301      	str	r3, [sp, #4]
 80060b8:	2302      	movs	r3, #2
 80060ba:	9300      	str	r3, [sp, #0]
 80060bc:	2300      	movs	r3, #0
 80060be:	460a      	mov	r2, r1
 80060c0:	4911      	ldr	r1, [pc, #68]	@ (8006108 <xTimerCreateTimerTask+0x88>)
 80060c2:	4812      	ldr	r0, [pc, #72]	@ (800610c <xTimerCreateTimerTask+0x8c>)
 80060c4:	f7ff f82a 	bl	800511c <xTaskCreateStatic>
 80060c8:	4603      	mov	r3, r0
 80060ca:	4a11      	ldr	r2, [pc, #68]	@ (8006110 <xTimerCreateTimerTask+0x90>)
 80060cc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80060ce:	4b10      	ldr	r3, [pc, #64]	@ (8006110 <xTimerCreateTimerTask+0x90>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d001      	beq.n	80060da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80060d6:	2301      	movs	r3, #1
 80060d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10b      	bne.n	80060f8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80060e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	613b      	str	r3, [r7, #16]
}
 80060f2:	bf00      	nop
 80060f4:	bf00      	nop
 80060f6:	e7fd      	b.n	80060f4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80060f8:	697b      	ldr	r3, [r7, #20]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3718      	adds	r7, #24
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	20000e80 	.word	0x20000e80
 8006108:	080083f4 	.word	0x080083f4
 800610c:	0800624d 	.word	0x0800624d
 8006110:	20000e84 	.word	0x20000e84

08006114 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b08a      	sub	sp, #40	@ 0x28
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	607a      	str	r2, [r7, #4]
 8006120:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006122:	2300      	movs	r3, #0
 8006124:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10b      	bne.n	8006144 <xTimerGenericCommand+0x30>
	__asm volatile
 800612c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006130:	f383 8811 	msr	BASEPRI, r3
 8006134:	f3bf 8f6f 	isb	sy
 8006138:	f3bf 8f4f 	dsb	sy
 800613c:	623b      	str	r3, [r7, #32]
}
 800613e:	bf00      	nop
 8006140:	bf00      	nop
 8006142:	e7fd      	b.n	8006140 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006144:	4b19      	ldr	r3, [pc, #100]	@ (80061ac <xTimerGenericCommand+0x98>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d02a      	beq.n	80061a2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	2b05      	cmp	r3, #5
 800615c:	dc18      	bgt.n	8006190 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800615e:	f7ff fdd1 	bl	8005d04 <xTaskGetSchedulerState>
 8006162:	4603      	mov	r3, r0
 8006164:	2b02      	cmp	r3, #2
 8006166:	d109      	bne.n	800617c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006168:	4b10      	ldr	r3, [pc, #64]	@ (80061ac <xTimerGenericCommand+0x98>)
 800616a:	6818      	ldr	r0, [r3, #0]
 800616c:	f107 0110 	add.w	r1, r7, #16
 8006170:	2300      	movs	r3, #0
 8006172:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006174:	f7fe fbe2 	bl	800493c <xQueueGenericSend>
 8006178:	6278      	str	r0, [r7, #36]	@ 0x24
 800617a:	e012      	b.n	80061a2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800617c:	4b0b      	ldr	r3, [pc, #44]	@ (80061ac <xTimerGenericCommand+0x98>)
 800617e:	6818      	ldr	r0, [r3, #0]
 8006180:	f107 0110 	add.w	r1, r7, #16
 8006184:	2300      	movs	r3, #0
 8006186:	2200      	movs	r2, #0
 8006188:	f7fe fbd8 	bl	800493c <xQueueGenericSend>
 800618c:	6278      	str	r0, [r7, #36]	@ 0x24
 800618e:	e008      	b.n	80061a2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006190:	4b06      	ldr	r3, [pc, #24]	@ (80061ac <xTimerGenericCommand+0x98>)
 8006192:	6818      	ldr	r0, [r3, #0]
 8006194:	f107 0110 	add.w	r1, r7, #16
 8006198:	2300      	movs	r3, #0
 800619a:	683a      	ldr	r2, [r7, #0]
 800619c:	f7fe fcd0 	bl	8004b40 <xQueueGenericSendFromISR>
 80061a0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80061a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3728      	adds	r7, #40	@ 0x28
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	20000e80 	.word	0x20000e80

080061b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b088      	sub	sp, #32
 80061b4:	af02      	add	r7, sp, #8
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061ba:	4b23      	ldr	r3, [pc, #140]	@ (8006248 <prvProcessExpiredTimer+0x98>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	3304      	adds	r3, #4
 80061c8:	4618      	mov	r0, r3
 80061ca:	f7fe fa83 	bl	80046d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80061d4:	f003 0304 	and.w	r3, r3, #4
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d023      	beq.n	8006224 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	699a      	ldr	r2, [r3, #24]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	18d1      	adds	r1, r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	683a      	ldr	r2, [r7, #0]
 80061e8:	6978      	ldr	r0, [r7, #20]
 80061ea:	f000 f8d5 	bl	8006398 <prvInsertTimerInActiveList>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d020      	beq.n	8006236 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80061f4:	2300      	movs	r3, #0
 80061f6:	9300      	str	r3, [sp, #0]
 80061f8:	2300      	movs	r3, #0
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	2100      	movs	r1, #0
 80061fe:	6978      	ldr	r0, [r7, #20]
 8006200:	f7ff ff88 	bl	8006114 <xTimerGenericCommand>
 8006204:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d114      	bne.n	8006236 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800620c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006210:	f383 8811 	msr	BASEPRI, r3
 8006214:	f3bf 8f6f 	isb	sy
 8006218:	f3bf 8f4f 	dsb	sy
 800621c:	60fb      	str	r3, [r7, #12]
}
 800621e:	bf00      	nop
 8006220:	bf00      	nop
 8006222:	e7fd      	b.n	8006220 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800622a:	f023 0301 	bic.w	r3, r3, #1
 800622e:	b2da      	uxtb	r2, r3
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	6978      	ldr	r0, [r7, #20]
 800623c:	4798      	blx	r3
}
 800623e:	bf00      	nop
 8006240:	3718      	adds	r7, #24
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	20000e78 	.word	0x20000e78

0800624c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006254:	f107 0308 	add.w	r3, r7, #8
 8006258:	4618      	mov	r0, r3
 800625a:	f000 f859 	bl	8006310 <prvGetNextExpireTime>
 800625e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	4619      	mov	r1, r3
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	f000 f805 	bl	8006274 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800626a:	f000 f8d7 	bl	800641c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800626e:	bf00      	nop
 8006270:	e7f0      	b.n	8006254 <prvTimerTask+0x8>
	...

08006274 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800627e:	f7ff f95b 	bl	8005538 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006282:	f107 0308 	add.w	r3, r7, #8
 8006286:	4618      	mov	r0, r3
 8006288:	f000 f866 	bl	8006358 <prvSampleTimeNow>
 800628c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d130      	bne.n	80062f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d10a      	bne.n	80062b0 <prvProcessTimerOrBlockTask+0x3c>
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d806      	bhi.n	80062b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80062a2:	f7ff f957 	bl	8005554 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80062a6:	68f9      	ldr	r1, [r7, #12]
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f7ff ff81 	bl	80061b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80062ae:	e024      	b.n	80062fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d008      	beq.n	80062c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80062b6:	4b13      	ldr	r3, [pc, #76]	@ (8006304 <prvProcessTimerOrBlockTask+0x90>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d101      	bne.n	80062c4 <prvProcessTimerOrBlockTask+0x50>
 80062c0:	2301      	movs	r3, #1
 80062c2:	e000      	b.n	80062c6 <prvProcessTimerOrBlockTask+0x52>
 80062c4:	2300      	movs	r3, #0
 80062c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80062c8:	4b0f      	ldr	r3, [pc, #60]	@ (8006308 <prvProcessTimerOrBlockTask+0x94>)
 80062ca:	6818      	ldr	r0, [r3, #0]
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	683a      	ldr	r2, [r7, #0]
 80062d4:	4619      	mov	r1, r3
 80062d6:	f7fe feed 	bl	80050b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80062da:	f7ff f93b 	bl	8005554 <xTaskResumeAll>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d10a      	bne.n	80062fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80062e4:	4b09      	ldr	r3, [pc, #36]	@ (800630c <prvProcessTimerOrBlockTask+0x98>)
 80062e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062ea:	601a      	str	r2, [r3, #0]
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	f3bf 8f6f 	isb	sy
}
 80062f4:	e001      	b.n	80062fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80062f6:	f7ff f92d 	bl	8005554 <xTaskResumeAll>
}
 80062fa:	bf00      	nop
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	20000e7c 	.word	0x20000e7c
 8006308:	20000e80 	.word	0x20000e80
 800630c:	e000ed04 	.word	0xe000ed04

08006310 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006318:	4b0e      	ldr	r3, [pc, #56]	@ (8006354 <prvGetNextExpireTime+0x44>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d101      	bne.n	8006326 <prvGetNextExpireTime+0x16>
 8006322:	2201      	movs	r2, #1
 8006324:	e000      	b.n	8006328 <prvGetNextExpireTime+0x18>
 8006326:	2200      	movs	r2, #0
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d105      	bne.n	8006340 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006334:	4b07      	ldr	r3, [pc, #28]	@ (8006354 <prvGetNextExpireTime+0x44>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	60fb      	str	r3, [r7, #12]
 800633e:	e001      	b.n	8006344 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006340:	2300      	movs	r3, #0
 8006342:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006344:	68fb      	ldr	r3, [r7, #12]
}
 8006346:	4618      	mov	r0, r3
 8006348:	3714      	adds	r7, #20
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	20000e78 	.word	0x20000e78

08006358 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006360:	f7ff f996 	bl	8005690 <xTaskGetTickCount>
 8006364:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006366:	4b0b      	ldr	r3, [pc, #44]	@ (8006394 <prvSampleTimeNow+0x3c>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	429a      	cmp	r2, r3
 800636e:	d205      	bcs.n	800637c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006370:	f000 f93a 	bl	80065e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	601a      	str	r2, [r3, #0]
 800637a:	e002      	b.n	8006382 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006382:	4a04      	ldr	r2, [pc, #16]	@ (8006394 <prvSampleTimeNow+0x3c>)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006388:	68fb      	ldr	r3, [r7, #12]
}
 800638a:	4618      	mov	r0, r3
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	20000e88 	.word	0x20000e88

08006398 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b086      	sub	sp, #24
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
 80063a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80063a6:	2300      	movs	r3, #0
 80063a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	68ba      	ldr	r2, [r7, #8]
 80063ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d812      	bhi.n	80063e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	1ad2      	subs	r2, r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	699b      	ldr	r3, [r3, #24]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d302      	bcc.n	80063d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80063cc:	2301      	movs	r3, #1
 80063ce:	617b      	str	r3, [r7, #20]
 80063d0:	e01b      	b.n	800640a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80063d2:	4b10      	ldr	r3, [pc, #64]	@ (8006414 <prvInsertTimerInActiveList+0x7c>)
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	3304      	adds	r3, #4
 80063da:	4619      	mov	r1, r3
 80063dc:	4610      	mov	r0, r2
 80063de:	f7fe f940 	bl	8004662 <vListInsert>
 80063e2:	e012      	b.n	800640a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d206      	bcs.n	80063fa <prvInsertTimerInActiveList+0x62>
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d302      	bcc.n	80063fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80063f4:	2301      	movs	r3, #1
 80063f6:	617b      	str	r3, [r7, #20]
 80063f8:	e007      	b.n	800640a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80063fa:	4b07      	ldr	r3, [pc, #28]	@ (8006418 <prvInsertTimerInActiveList+0x80>)
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	3304      	adds	r3, #4
 8006402:	4619      	mov	r1, r3
 8006404:	4610      	mov	r0, r2
 8006406:	f7fe f92c 	bl	8004662 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800640a:	697b      	ldr	r3, [r7, #20]
}
 800640c:	4618      	mov	r0, r3
 800640e:	3718      	adds	r7, #24
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	20000e7c 	.word	0x20000e7c
 8006418:	20000e78 	.word	0x20000e78

0800641c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b08e      	sub	sp, #56	@ 0x38
 8006420:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006422:	e0ce      	b.n	80065c2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	da19      	bge.n	800645e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800642a:	1d3b      	adds	r3, r7, #4
 800642c:	3304      	adds	r3, #4
 800642e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006432:	2b00      	cmp	r3, #0
 8006434:	d10b      	bne.n	800644e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800643a:	f383 8811 	msr	BASEPRI, r3
 800643e:	f3bf 8f6f 	isb	sy
 8006442:	f3bf 8f4f 	dsb	sy
 8006446:	61fb      	str	r3, [r7, #28]
}
 8006448:	bf00      	nop
 800644a:	bf00      	nop
 800644c:	e7fd      	b.n	800644a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800644e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006454:	6850      	ldr	r0, [r2, #4]
 8006456:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006458:	6892      	ldr	r2, [r2, #8]
 800645a:	4611      	mov	r1, r2
 800645c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2b00      	cmp	r3, #0
 8006462:	f2c0 80ae 	blt.w	80065c2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800646a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800646c:	695b      	ldr	r3, [r3, #20]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d004      	beq.n	800647c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006474:	3304      	adds	r3, #4
 8006476:	4618      	mov	r0, r3
 8006478:	f7fe f92c 	bl	80046d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800647c:	463b      	mov	r3, r7
 800647e:	4618      	mov	r0, r3
 8006480:	f7ff ff6a 	bl	8006358 <prvSampleTimeNow>
 8006484:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2b09      	cmp	r3, #9
 800648a:	f200 8097 	bhi.w	80065bc <prvProcessReceivedCommands+0x1a0>
 800648e:	a201      	add	r2, pc, #4	@ (adr r2, 8006494 <prvProcessReceivedCommands+0x78>)
 8006490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006494:	080064bd 	.word	0x080064bd
 8006498:	080064bd 	.word	0x080064bd
 800649c:	080064bd 	.word	0x080064bd
 80064a0:	08006533 	.word	0x08006533
 80064a4:	08006547 	.word	0x08006547
 80064a8:	08006593 	.word	0x08006593
 80064ac:	080064bd 	.word	0x080064bd
 80064b0:	080064bd 	.word	0x080064bd
 80064b4:	08006533 	.word	0x08006533
 80064b8:	08006547 	.word	0x08006547
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80064bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80064c2:	f043 0301 	orr.w	r3, r3, #1
 80064c6:	b2da      	uxtb	r2, r3
 80064c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80064ce:	68ba      	ldr	r2, [r7, #8]
 80064d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064d2:	699b      	ldr	r3, [r3, #24]
 80064d4:	18d1      	adds	r1, r2, r3
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064dc:	f7ff ff5c 	bl	8006398 <prvInsertTimerInActiveList>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d06c      	beq.n	80065c0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80064ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80064f4:	f003 0304 	and.w	r3, r3, #4
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d061      	beq.n	80065c0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	441a      	add	r2, r3
 8006504:	2300      	movs	r3, #0
 8006506:	9300      	str	r3, [sp, #0]
 8006508:	2300      	movs	r3, #0
 800650a:	2100      	movs	r1, #0
 800650c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800650e:	f7ff fe01 	bl	8006114 <xTimerGenericCommand>
 8006512:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006514:	6a3b      	ldr	r3, [r7, #32]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d152      	bne.n	80065c0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800651a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800651e:	f383 8811 	msr	BASEPRI, r3
 8006522:	f3bf 8f6f 	isb	sy
 8006526:	f3bf 8f4f 	dsb	sy
 800652a:	61bb      	str	r3, [r7, #24]
}
 800652c:	bf00      	nop
 800652e:	bf00      	nop
 8006530:	e7fd      	b.n	800652e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006534:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006538:	f023 0301 	bic.w	r3, r3, #1
 800653c:	b2da      	uxtb	r2, r3
 800653e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006540:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006544:	e03d      	b.n	80065c2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006548:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800654c:	f043 0301 	orr.w	r3, r3, #1
 8006550:	b2da      	uxtb	r2, r3
 8006552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006554:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006558:	68ba      	ldr	r2, [r7, #8]
 800655a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800655c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800655e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d10b      	bne.n	800657e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800656a:	f383 8811 	msr	BASEPRI, r3
 800656e:	f3bf 8f6f 	isb	sy
 8006572:	f3bf 8f4f 	dsb	sy
 8006576:	617b      	str	r3, [r7, #20]
}
 8006578:	bf00      	nop
 800657a:	bf00      	nop
 800657c:	e7fd      	b.n	800657a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800657e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006580:	699a      	ldr	r2, [r3, #24]
 8006582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006584:	18d1      	adds	r1, r2, r3
 8006586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006588:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800658a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800658c:	f7ff ff04 	bl	8006398 <prvInsertTimerInActiveList>
					break;
 8006590:	e017      	b.n	80065c2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006594:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006598:	f003 0302 	and.w	r3, r3, #2
 800659c:	2b00      	cmp	r3, #0
 800659e:	d103      	bne.n	80065a8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80065a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80065a2:	f000 fbe9 	bl	8006d78 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80065a6:	e00c      	b.n	80065c2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80065ae:	f023 0301 	bic.w	r3, r3, #1
 80065b2:	b2da      	uxtb	r2, r3
 80065b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80065ba:	e002      	b.n	80065c2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80065bc:	bf00      	nop
 80065be:	e000      	b.n	80065c2 <prvProcessReceivedCommands+0x1a6>
					break;
 80065c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80065c2:	4b08      	ldr	r3, [pc, #32]	@ (80065e4 <prvProcessReceivedCommands+0x1c8>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	1d39      	adds	r1, r7, #4
 80065c8:	2200      	movs	r2, #0
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7fe fb56 	bl	8004c7c <xQueueReceive>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	f47f af26 	bne.w	8006424 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80065d8:	bf00      	nop
 80065da:	bf00      	nop
 80065dc:	3730      	adds	r7, #48	@ 0x30
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	20000e80 	.word	0x20000e80

080065e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b088      	sub	sp, #32
 80065ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80065ee:	e049      	b.n	8006684 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80065f0:	4b2e      	ldr	r3, [pc, #184]	@ (80066ac <prvSwitchTimerLists+0xc4>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065fa:	4b2c      	ldr	r3, [pc, #176]	@ (80066ac <prvSwitchTimerLists+0xc4>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	3304      	adds	r3, #4
 8006608:	4618      	mov	r0, r3
 800660a:	f7fe f863 	bl	80046d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800661c:	f003 0304 	and.w	r3, r3, #4
 8006620:	2b00      	cmp	r3, #0
 8006622:	d02f      	beq.n	8006684 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	699b      	ldr	r3, [r3, #24]
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	4413      	add	r3, r2
 800662c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	429a      	cmp	r2, r3
 8006634:	d90e      	bls.n	8006654 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	68ba      	ldr	r2, [r7, #8]
 800663a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006642:	4b1a      	ldr	r3, [pc, #104]	@ (80066ac <prvSwitchTimerLists+0xc4>)
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	3304      	adds	r3, #4
 800664a:	4619      	mov	r1, r3
 800664c:	4610      	mov	r0, r2
 800664e:	f7fe f808 	bl	8004662 <vListInsert>
 8006652:	e017      	b.n	8006684 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006654:	2300      	movs	r3, #0
 8006656:	9300      	str	r3, [sp, #0]
 8006658:	2300      	movs	r3, #0
 800665a:	693a      	ldr	r2, [r7, #16]
 800665c:	2100      	movs	r1, #0
 800665e:	68f8      	ldr	r0, [r7, #12]
 8006660:	f7ff fd58 	bl	8006114 <xTimerGenericCommand>
 8006664:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d10b      	bne.n	8006684 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800666c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006670:	f383 8811 	msr	BASEPRI, r3
 8006674:	f3bf 8f6f 	isb	sy
 8006678:	f3bf 8f4f 	dsb	sy
 800667c:	603b      	str	r3, [r7, #0]
}
 800667e:	bf00      	nop
 8006680:	bf00      	nop
 8006682:	e7fd      	b.n	8006680 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006684:	4b09      	ldr	r3, [pc, #36]	@ (80066ac <prvSwitchTimerLists+0xc4>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1b0      	bne.n	80065f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800668e:	4b07      	ldr	r3, [pc, #28]	@ (80066ac <prvSwitchTimerLists+0xc4>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006694:	4b06      	ldr	r3, [pc, #24]	@ (80066b0 <prvSwitchTimerLists+0xc8>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a04      	ldr	r2, [pc, #16]	@ (80066ac <prvSwitchTimerLists+0xc4>)
 800669a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800669c:	4a04      	ldr	r2, [pc, #16]	@ (80066b0 <prvSwitchTimerLists+0xc8>)
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	6013      	str	r3, [r2, #0]
}
 80066a2:	bf00      	nop
 80066a4:	3718      	adds	r7, #24
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	20000e78 	.word	0x20000e78
 80066b0:	20000e7c 	.word	0x20000e7c

080066b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80066ba:	f000 f96d 	bl	8006998 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80066be:	4b15      	ldr	r3, [pc, #84]	@ (8006714 <prvCheckForValidListAndQueue+0x60>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d120      	bne.n	8006708 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80066c6:	4814      	ldr	r0, [pc, #80]	@ (8006718 <prvCheckForValidListAndQueue+0x64>)
 80066c8:	f7fd ff7a 	bl	80045c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80066cc:	4813      	ldr	r0, [pc, #76]	@ (800671c <prvCheckForValidListAndQueue+0x68>)
 80066ce:	f7fd ff77 	bl	80045c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80066d2:	4b13      	ldr	r3, [pc, #76]	@ (8006720 <prvCheckForValidListAndQueue+0x6c>)
 80066d4:	4a10      	ldr	r2, [pc, #64]	@ (8006718 <prvCheckForValidListAndQueue+0x64>)
 80066d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80066d8:	4b12      	ldr	r3, [pc, #72]	@ (8006724 <prvCheckForValidListAndQueue+0x70>)
 80066da:	4a10      	ldr	r2, [pc, #64]	@ (800671c <prvCheckForValidListAndQueue+0x68>)
 80066dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80066de:	2300      	movs	r3, #0
 80066e0:	9300      	str	r3, [sp, #0]
 80066e2:	4b11      	ldr	r3, [pc, #68]	@ (8006728 <prvCheckForValidListAndQueue+0x74>)
 80066e4:	4a11      	ldr	r2, [pc, #68]	@ (800672c <prvCheckForValidListAndQueue+0x78>)
 80066e6:	2110      	movs	r1, #16
 80066e8:	200a      	movs	r0, #10
 80066ea:	f7fe f887 	bl	80047fc <xQueueGenericCreateStatic>
 80066ee:	4603      	mov	r3, r0
 80066f0:	4a08      	ldr	r2, [pc, #32]	@ (8006714 <prvCheckForValidListAndQueue+0x60>)
 80066f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80066f4:	4b07      	ldr	r3, [pc, #28]	@ (8006714 <prvCheckForValidListAndQueue+0x60>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d005      	beq.n	8006708 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80066fc:	4b05      	ldr	r3, [pc, #20]	@ (8006714 <prvCheckForValidListAndQueue+0x60>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	490b      	ldr	r1, [pc, #44]	@ (8006730 <prvCheckForValidListAndQueue+0x7c>)
 8006702:	4618      	mov	r0, r3
 8006704:	f7fe fcac 	bl	8005060 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006708:	f000 f978 	bl	80069fc <vPortExitCritical>
}
 800670c:	bf00      	nop
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	20000e80 	.word	0x20000e80
 8006718:	20000e50 	.word	0x20000e50
 800671c:	20000e64 	.word	0x20000e64
 8006720:	20000e78 	.word	0x20000e78
 8006724:	20000e7c 	.word	0x20000e7c
 8006728:	20000f2c 	.word	0x20000f2c
 800672c:	20000e8c 	.word	0x20000e8c
 8006730:	080083fc 	.word	0x080083fc

08006734 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	3b04      	subs	r3, #4
 8006744:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800674c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	3b04      	subs	r3, #4
 8006752:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	f023 0201 	bic.w	r2, r3, #1
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	3b04      	subs	r3, #4
 8006762:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006764:	4a0c      	ldr	r2, [pc, #48]	@ (8006798 <pxPortInitialiseStack+0x64>)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	3b14      	subs	r3, #20
 800676e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	3b04      	subs	r3, #4
 800677a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f06f 0202 	mvn.w	r2, #2
 8006782:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	3b20      	subs	r3, #32
 8006788:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800678a:	68fb      	ldr	r3, [r7, #12]
}
 800678c:	4618      	mov	r0, r3
 800678e:	3714      	adds	r7, #20
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr
 8006798:	0800679d 	.word	0x0800679d

0800679c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800679c:	b480      	push	{r7}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80067a2:	2300      	movs	r3, #0
 80067a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80067a6:	4b13      	ldr	r3, [pc, #76]	@ (80067f4 <prvTaskExitError+0x58>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ae:	d00b      	beq.n	80067c8 <prvTaskExitError+0x2c>
	__asm volatile
 80067b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b4:	f383 8811 	msr	BASEPRI, r3
 80067b8:	f3bf 8f6f 	isb	sy
 80067bc:	f3bf 8f4f 	dsb	sy
 80067c0:	60fb      	str	r3, [r7, #12]
}
 80067c2:	bf00      	nop
 80067c4:	bf00      	nop
 80067c6:	e7fd      	b.n	80067c4 <prvTaskExitError+0x28>
	__asm volatile
 80067c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067cc:	f383 8811 	msr	BASEPRI, r3
 80067d0:	f3bf 8f6f 	isb	sy
 80067d4:	f3bf 8f4f 	dsb	sy
 80067d8:	60bb      	str	r3, [r7, #8]
}
 80067da:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80067dc:	bf00      	nop
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d0fc      	beq.n	80067de <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80067e4:	bf00      	nop
 80067e6:	bf00      	nop
 80067e8:	3714      	adds	r7, #20
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop
 80067f4:	2000000c 	.word	0x2000000c
	...

08006800 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006800:	4b07      	ldr	r3, [pc, #28]	@ (8006820 <pxCurrentTCBConst2>)
 8006802:	6819      	ldr	r1, [r3, #0]
 8006804:	6808      	ldr	r0, [r1, #0]
 8006806:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800680a:	f380 8809 	msr	PSP, r0
 800680e:	f3bf 8f6f 	isb	sy
 8006812:	f04f 0000 	mov.w	r0, #0
 8006816:	f380 8811 	msr	BASEPRI, r0
 800681a:	4770      	bx	lr
 800681c:	f3af 8000 	nop.w

08006820 <pxCurrentTCBConst2>:
 8006820:	20000950 	.word	0x20000950
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006824:	bf00      	nop
 8006826:	bf00      	nop

08006828 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006828:	4808      	ldr	r0, [pc, #32]	@ (800684c <prvPortStartFirstTask+0x24>)
 800682a:	6800      	ldr	r0, [r0, #0]
 800682c:	6800      	ldr	r0, [r0, #0]
 800682e:	f380 8808 	msr	MSP, r0
 8006832:	f04f 0000 	mov.w	r0, #0
 8006836:	f380 8814 	msr	CONTROL, r0
 800683a:	b662      	cpsie	i
 800683c:	b661      	cpsie	f
 800683e:	f3bf 8f4f 	dsb	sy
 8006842:	f3bf 8f6f 	isb	sy
 8006846:	df00      	svc	0
 8006848:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800684a:	bf00      	nop
 800684c:	e000ed08 	.word	0xe000ed08

08006850 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b086      	sub	sp, #24
 8006854:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006856:	4b47      	ldr	r3, [pc, #284]	@ (8006974 <xPortStartScheduler+0x124>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a47      	ldr	r2, [pc, #284]	@ (8006978 <xPortStartScheduler+0x128>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d10b      	bne.n	8006878 <xPortStartScheduler+0x28>
	__asm volatile
 8006860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006864:	f383 8811 	msr	BASEPRI, r3
 8006868:	f3bf 8f6f 	isb	sy
 800686c:	f3bf 8f4f 	dsb	sy
 8006870:	60fb      	str	r3, [r7, #12]
}
 8006872:	bf00      	nop
 8006874:	bf00      	nop
 8006876:	e7fd      	b.n	8006874 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006878:	4b3e      	ldr	r3, [pc, #248]	@ (8006974 <xPortStartScheduler+0x124>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a3f      	ldr	r2, [pc, #252]	@ (800697c <xPortStartScheduler+0x12c>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d10b      	bne.n	800689a <xPortStartScheduler+0x4a>
	__asm volatile
 8006882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006886:	f383 8811 	msr	BASEPRI, r3
 800688a:	f3bf 8f6f 	isb	sy
 800688e:	f3bf 8f4f 	dsb	sy
 8006892:	613b      	str	r3, [r7, #16]
}
 8006894:	bf00      	nop
 8006896:	bf00      	nop
 8006898:	e7fd      	b.n	8006896 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800689a:	4b39      	ldr	r3, [pc, #228]	@ (8006980 <xPortStartScheduler+0x130>)
 800689c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	22ff      	movs	r2, #255	@ 0xff
 80068aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80068b4:	78fb      	ldrb	r3, [r7, #3]
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80068bc:	b2da      	uxtb	r2, r3
 80068be:	4b31      	ldr	r3, [pc, #196]	@ (8006984 <xPortStartScheduler+0x134>)
 80068c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80068c2:	4b31      	ldr	r3, [pc, #196]	@ (8006988 <xPortStartScheduler+0x138>)
 80068c4:	2207      	movs	r2, #7
 80068c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068c8:	e009      	b.n	80068de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80068ca:	4b2f      	ldr	r3, [pc, #188]	@ (8006988 <xPortStartScheduler+0x138>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	3b01      	subs	r3, #1
 80068d0:	4a2d      	ldr	r2, [pc, #180]	@ (8006988 <xPortStartScheduler+0x138>)
 80068d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80068d4:	78fb      	ldrb	r3, [r7, #3]
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	005b      	lsls	r3, r3, #1
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068de:	78fb      	ldrb	r3, [r7, #3]
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068e6:	2b80      	cmp	r3, #128	@ 0x80
 80068e8:	d0ef      	beq.n	80068ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80068ea:	4b27      	ldr	r3, [pc, #156]	@ (8006988 <xPortStartScheduler+0x138>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f1c3 0307 	rsb	r3, r3, #7
 80068f2:	2b04      	cmp	r3, #4
 80068f4:	d00b      	beq.n	800690e <xPortStartScheduler+0xbe>
	__asm volatile
 80068f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068fa:	f383 8811 	msr	BASEPRI, r3
 80068fe:	f3bf 8f6f 	isb	sy
 8006902:	f3bf 8f4f 	dsb	sy
 8006906:	60bb      	str	r3, [r7, #8]
}
 8006908:	bf00      	nop
 800690a:	bf00      	nop
 800690c:	e7fd      	b.n	800690a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800690e:	4b1e      	ldr	r3, [pc, #120]	@ (8006988 <xPortStartScheduler+0x138>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	021b      	lsls	r3, r3, #8
 8006914:	4a1c      	ldr	r2, [pc, #112]	@ (8006988 <xPortStartScheduler+0x138>)
 8006916:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006918:	4b1b      	ldr	r3, [pc, #108]	@ (8006988 <xPortStartScheduler+0x138>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006920:	4a19      	ldr	r2, [pc, #100]	@ (8006988 <xPortStartScheduler+0x138>)
 8006922:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	b2da      	uxtb	r2, r3
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800692c:	4b17      	ldr	r3, [pc, #92]	@ (800698c <xPortStartScheduler+0x13c>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a16      	ldr	r2, [pc, #88]	@ (800698c <xPortStartScheduler+0x13c>)
 8006932:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006936:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006938:	4b14      	ldr	r3, [pc, #80]	@ (800698c <xPortStartScheduler+0x13c>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a13      	ldr	r2, [pc, #76]	@ (800698c <xPortStartScheduler+0x13c>)
 800693e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006942:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006944:	f000 f8da 	bl	8006afc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006948:	4b11      	ldr	r3, [pc, #68]	@ (8006990 <xPortStartScheduler+0x140>)
 800694a:	2200      	movs	r2, #0
 800694c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800694e:	f000 f8f9 	bl	8006b44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006952:	4b10      	ldr	r3, [pc, #64]	@ (8006994 <xPortStartScheduler+0x144>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a0f      	ldr	r2, [pc, #60]	@ (8006994 <xPortStartScheduler+0x144>)
 8006958:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800695c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800695e:	f7ff ff63 	bl	8006828 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006962:	f7fe ff5f 	bl	8005824 <vTaskSwitchContext>
	prvTaskExitError();
 8006966:	f7ff ff19 	bl	800679c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3718      	adds	r7, #24
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}
 8006974:	e000ed00 	.word	0xe000ed00
 8006978:	410fc271 	.word	0x410fc271
 800697c:	410fc270 	.word	0x410fc270
 8006980:	e000e400 	.word	0xe000e400
 8006984:	20000f7c 	.word	0x20000f7c
 8006988:	20000f80 	.word	0x20000f80
 800698c:	e000ed20 	.word	0xe000ed20
 8006990:	2000000c 	.word	0x2000000c
 8006994:	e000ef34 	.word	0xe000ef34

08006998 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
	__asm volatile
 800699e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a2:	f383 8811 	msr	BASEPRI, r3
 80069a6:	f3bf 8f6f 	isb	sy
 80069aa:	f3bf 8f4f 	dsb	sy
 80069ae:	607b      	str	r3, [r7, #4]
}
 80069b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80069b2:	4b10      	ldr	r3, [pc, #64]	@ (80069f4 <vPortEnterCritical+0x5c>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	3301      	adds	r3, #1
 80069b8:	4a0e      	ldr	r2, [pc, #56]	@ (80069f4 <vPortEnterCritical+0x5c>)
 80069ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80069bc:	4b0d      	ldr	r3, [pc, #52]	@ (80069f4 <vPortEnterCritical+0x5c>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d110      	bne.n	80069e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80069c4:	4b0c      	ldr	r3, [pc, #48]	@ (80069f8 <vPortEnterCritical+0x60>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00b      	beq.n	80069e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80069ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d2:	f383 8811 	msr	BASEPRI, r3
 80069d6:	f3bf 8f6f 	isb	sy
 80069da:	f3bf 8f4f 	dsb	sy
 80069de:	603b      	str	r3, [r7, #0]
}
 80069e0:	bf00      	nop
 80069e2:	bf00      	nop
 80069e4:	e7fd      	b.n	80069e2 <vPortEnterCritical+0x4a>
	}
}
 80069e6:	bf00      	nop
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	2000000c 	.word	0x2000000c
 80069f8:	e000ed04 	.word	0xe000ed04

080069fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006a02:	4b12      	ldr	r3, [pc, #72]	@ (8006a4c <vPortExitCritical+0x50>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d10b      	bne.n	8006a22 <vPortExitCritical+0x26>
	__asm volatile
 8006a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a0e:	f383 8811 	msr	BASEPRI, r3
 8006a12:	f3bf 8f6f 	isb	sy
 8006a16:	f3bf 8f4f 	dsb	sy
 8006a1a:	607b      	str	r3, [r7, #4]
}
 8006a1c:	bf00      	nop
 8006a1e:	bf00      	nop
 8006a20:	e7fd      	b.n	8006a1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006a22:	4b0a      	ldr	r3, [pc, #40]	@ (8006a4c <vPortExitCritical+0x50>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	3b01      	subs	r3, #1
 8006a28:	4a08      	ldr	r2, [pc, #32]	@ (8006a4c <vPortExitCritical+0x50>)
 8006a2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a2c:	4b07      	ldr	r3, [pc, #28]	@ (8006a4c <vPortExitCritical+0x50>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d105      	bne.n	8006a40 <vPortExitCritical+0x44>
 8006a34:	2300      	movs	r3, #0
 8006a36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	f383 8811 	msr	BASEPRI, r3
}
 8006a3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr
 8006a4c:	2000000c 	.word	0x2000000c

08006a50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a50:	f3ef 8009 	mrs	r0, PSP
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	4b15      	ldr	r3, [pc, #84]	@ (8006ab0 <pxCurrentTCBConst>)
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	f01e 0f10 	tst.w	lr, #16
 8006a60:	bf08      	it	eq
 8006a62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a6a:	6010      	str	r0, [r2, #0]
 8006a6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006a74:	f380 8811 	msr	BASEPRI, r0
 8006a78:	f3bf 8f4f 	dsb	sy
 8006a7c:	f3bf 8f6f 	isb	sy
 8006a80:	f7fe fed0 	bl	8005824 <vTaskSwitchContext>
 8006a84:	f04f 0000 	mov.w	r0, #0
 8006a88:	f380 8811 	msr	BASEPRI, r0
 8006a8c:	bc09      	pop	{r0, r3}
 8006a8e:	6819      	ldr	r1, [r3, #0]
 8006a90:	6808      	ldr	r0, [r1, #0]
 8006a92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a96:	f01e 0f10 	tst.w	lr, #16
 8006a9a:	bf08      	it	eq
 8006a9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006aa0:	f380 8809 	msr	PSP, r0
 8006aa4:	f3bf 8f6f 	isb	sy
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop
 8006aac:	f3af 8000 	nop.w

08006ab0 <pxCurrentTCBConst>:
 8006ab0:	20000950 	.word	0x20000950
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ab4:	bf00      	nop
 8006ab6:	bf00      	nop

08006ab8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
	__asm volatile
 8006abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ac2:	f383 8811 	msr	BASEPRI, r3
 8006ac6:	f3bf 8f6f 	isb	sy
 8006aca:	f3bf 8f4f 	dsb	sy
 8006ace:	607b      	str	r3, [r7, #4]
}
 8006ad0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ad2:	f7fe fded 	bl	80056b0 <xTaskIncrementTick>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d003      	beq.n	8006ae4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006adc:	4b06      	ldr	r3, [pc, #24]	@ (8006af8 <xPortSysTickHandler+0x40>)
 8006ade:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	f383 8811 	msr	BASEPRI, r3
}
 8006aee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006af0:	bf00      	nop
 8006af2:	3708      	adds	r7, #8
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	e000ed04 	.word	0xe000ed04

08006afc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006afc:	b480      	push	{r7}
 8006afe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b00:	4b0b      	ldr	r3, [pc, #44]	@ (8006b30 <vPortSetupTimerInterrupt+0x34>)
 8006b02:	2200      	movs	r2, #0
 8006b04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b06:	4b0b      	ldr	r3, [pc, #44]	@ (8006b34 <vPortSetupTimerInterrupt+0x38>)
 8006b08:	2200      	movs	r2, #0
 8006b0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8006b38 <vPortSetupTimerInterrupt+0x3c>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a0a      	ldr	r2, [pc, #40]	@ (8006b3c <vPortSetupTimerInterrupt+0x40>)
 8006b12:	fba2 2303 	umull	r2, r3, r2, r3
 8006b16:	099b      	lsrs	r3, r3, #6
 8006b18:	4a09      	ldr	r2, [pc, #36]	@ (8006b40 <vPortSetupTimerInterrupt+0x44>)
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b1e:	4b04      	ldr	r3, [pc, #16]	@ (8006b30 <vPortSetupTimerInterrupt+0x34>)
 8006b20:	2207      	movs	r2, #7
 8006b22:	601a      	str	r2, [r3, #0]
}
 8006b24:	bf00      	nop
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	e000e010 	.word	0xe000e010
 8006b34:	e000e018 	.word	0xe000e018
 8006b38:	20000000 	.word	0x20000000
 8006b3c:	10624dd3 	.word	0x10624dd3
 8006b40:	e000e014 	.word	0xe000e014

08006b44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006b44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006b54 <vPortEnableVFP+0x10>
 8006b48:	6801      	ldr	r1, [r0, #0]
 8006b4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006b4e:	6001      	str	r1, [r0, #0]
 8006b50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006b52:	bf00      	nop
 8006b54:	e000ed88 	.word	0xe000ed88

08006b58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006b5e:	f3ef 8305 	mrs	r3, IPSR
 8006b62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2b0f      	cmp	r3, #15
 8006b68:	d915      	bls.n	8006b96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006b6a:	4a18      	ldr	r2, [pc, #96]	@ (8006bcc <vPortValidateInterruptPriority+0x74>)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	4413      	add	r3, r2
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006b74:	4b16      	ldr	r3, [pc, #88]	@ (8006bd0 <vPortValidateInterruptPriority+0x78>)
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	7afa      	ldrb	r2, [r7, #11]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d20b      	bcs.n	8006b96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b82:	f383 8811 	msr	BASEPRI, r3
 8006b86:	f3bf 8f6f 	isb	sy
 8006b8a:	f3bf 8f4f 	dsb	sy
 8006b8e:	607b      	str	r3, [r7, #4]
}
 8006b90:	bf00      	nop
 8006b92:	bf00      	nop
 8006b94:	e7fd      	b.n	8006b92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006b96:	4b0f      	ldr	r3, [pc, #60]	@ (8006bd4 <vPortValidateInterruptPriority+0x7c>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8006bd8 <vPortValidateInterruptPriority+0x80>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d90b      	bls.n	8006bbe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006baa:	f383 8811 	msr	BASEPRI, r3
 8006bae:	f3bf 8f6f 	isb	sy
 8006bb2:	f3bf 8f4f 	dsb	sy
 8006bb6:	603b      	str	r3, [r7, #0]
}
 8006bb8:	bf00      	nop
 8006bba:	bf00      	nop
 8006bbc:	e7fd      	b.n	8006bba <vPortValidateInterruptPriority+0x62>
	}
 8006bbe:	bf00      	nop
 8006bc0:	3714      	adds	r7, #20
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	e000e3f0 	.word	0xe000e3f0
 8006bd0:	20000f7c 	.word	0x20000f7c
 8006bd4:	e000ed0c 	.word	0xe000ed0c
 8006bd8:	20000f80 	.word	0x20000f80

08006bdc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b08a      	sub	sp, #40	@ 0x28
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006be4:	2300      	movs	r3, #0
 8006be6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006be8:	f7fe fca6 	bl	8005538 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006bec:	4b5c      	ldr	r3, [pc, #368]	@ (8006d60 <pvPortMalloc+0x184>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d101      	bne.n	8006bf8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006bf4:	f000 f924 	bl	8006e40 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006bf8:	4b5a      	ldr	r3, [pc, #360]	@ (8006d64 <pvPortMalloc+0x188>)
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4013      	ands	r3, r2
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	f040 8095 	bne.w	8006d30 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d01e      	beq.n	8006c4a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006c0c:	2208      	movs	r2, #8
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4413      	add	r3, r2
 8006c12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f003 0307 	and.w	r3, r3, #7
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d015      	beq.n	8006c4a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f023 0307 	bic.w	r3, r3, #7
 8006c24:	3308      	adds	r3, #8
 8006c26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f003 0307 	and.w	r3, r3, #7
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00b      	beq.n	8006c4a <pvPortMalloc+0x6e>
	__asm volatile
 8006c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c36:	f383 8811 	msr	BASEPRI, r3
 8006c3a:	f3bf 8f6f 	isb	sy
 8006c3e:	f3bf 8f4f 	dsb	sy
 8006c42:	617b      	str	r3, [r7, #20]
}
 8006c44:	bf00      	nop
 8006c46:	bf00      	nop
 8006c48:	e7fd      	b.n	8006c46 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d06f      	beq.n	8006d30 <pvPortMalloc+0x154>
 8006c50:	4b45      	ldr	r3, [pc, #276]	@ (8006d68 <pvPortMalloc+0x18c>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d86a      	bhi.n	8006d30 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c5a:	4b44      	ldr	r3, [pc, #272]	@ (8006d6c <pvPortMalloc+0x190>)
 8006c5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c5e:	4b43      	ldr	r3, [pc, #268]	@ (8006d6c <pvPortMalloc+0x190>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c64:	e004      	b.n	8006c70 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d903      	bls.n	8006c82 <pvPortMalloc+0xa6>
 8006c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1f1      	bne.n	8006c66 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006c82:	4b37      	ldr	r3, [pc, #220]	@ (8006d60 <pvPortMalloc+0x184>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d051      	beq.n	8006d30 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006c8c:	6a3b      	ldr	r3, [r7, #32]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2208      	movs	r2, #8
 8006c92:	4413      	add	r3, r2
 8006c94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	6a3b      	ldr	r3, [r7, #32]
 8006c9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca0:	685a      	ldr	r2, [r3, #4]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	1ad2      	subs	r2, r2, r3
 8006ca6:	2308      	movs	r3, #8
 8006ca8:	005b      	lsls	r3, r3, #1
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d920      	bls.n	8006cf0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006cae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	f003 0307 	and.w	r3, r3, #7
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00b      	beq.n	8006cd8 <pvPortMalloc+0xfc>
	__asm volatile
 8006cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc4:	f383 8811 	msr	BASEPRI, r3
 8006cc8:	f3bf 8f6f 	isb	sy
 8006ccc:	f3bf 8f4f 	dsb	sy
 8006cd0:	613b      	str	r3, [r7, #16]
}
 8006cd2:	bf00      	nop
 8006cd4:	bf00      	nop
 8006cd6:	e7fd      	b.n	8006cd4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cda:	685a      	ldr	r2, [r3, #4]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	1ad2      	subs	r2, r2, r3
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006cea:	69b8      	ldr	r0, [r7, #24]
 8006cec:	f000 f90a 	bl	8006f04 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8006d68 <pvPortMalloc+0x18c>)
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	4a1b      	ldr	r2, [pc, #108]	@ (8006d68 <pvPortMalloc+0x18c>)
 8006cfc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8006d68 <pvPortMalloc+0x18c>)
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	4b1b      	ldr	r3, [pc, #108]	@ (8006d70 <pvPortMalloc+0x194>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d203      	bcs.n	8006d12 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d0a:	4b17      	ldr	r3, [pc, #92]	@ (8006d68 <pvPortMalloc+0x18c>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a18      	ldr	r2, [pc, #96]	@ (8006d70 <pvPortMalloc+0x194>)
 8006d10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d14:	685a      	ldr	r2, [r3, #4]
 8006d16:	4b13      	ldr	r3, [pc, #76]	@ (8006d64 <pvPortMalloc+0x188>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	431a      	orrs	r2, r3
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d22:	2200      	movs	r2, #0
 8006d24:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006d26:	4b13      	ldr	r3, [pc, #76]	@ (8006d74 <pvPortMalloc+0x198>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	4a11      	ldr	r2, [pc, #68]	@ (8006d74 <pvPortMalloc+0x198>)
 8006d2e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d30:	f7fe fc10 	bl	8005554 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	f003 0307 	and.w	r3, r3, #7
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00b      	beq.n	8006d56 <pvPortMalloc+0x17a>
	__asm volatile
 8006d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d42:	f383 8811 	msr	BASEPRI, r3
 8006d46:	f3bf 8f6f 	isb	sy
 8006d4a:	f3bf 8f4f 	dsb	sy
 8006d4e:	60fb      	str	r3, [r7, #12]
}
 8006d50:	bf00      	nop
 8006d52:	bf00      	nop
 8006d54:	e7fd      	b.n	8006d52 <pvPortMalloc+0x176>
	return pvReturn;
 8006d56:	69fb      	ldr	r3, [r7, #28]
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3728      	adds	r7, #40	@ 0x28
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	20004b8c 	.word	0x20004b8c
 8006d64:	20004ba0 	.word	0x20004ba0
 8006d68:	20004b90 	.word	0x20004b90
 8006d6c:	20004b84 	.word	0x20004b84
 8006d70:	20004b94 	.word	0x20004b94
 8006d74:	20004b98 	.word	0x20004b98

08006d78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b086      	sub	sp, #24
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d04f      	beq.n	8006e2a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006d8a:	2308      	movs	r3, #8
 8006d8c:	425b      	negs	r3, r3
 8006d8e:	697a      	ldr	r2, [r7, #20]
 8006d90:	4413      	add	r3, r2
 8006d92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	685a      	ldr	r2, [r3, #4]
 8006d9c:	4b25      	ldr	r3, [pc, #148]	@ (8006e34 <vPortFree+0xbc>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4013      	ands	r3, r2
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d10b      	bne.n	8006dbe <vPortFree+0x46>
	__asm volatile
 8006da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006daa:	f383 8811 	msr	BASEPRI, r3
 8006dae:	f3bf 8f6f 	isb	sy
 8006db2:	f3bf 8f4f 	dsb	sy
 8006db6:	60fb      	str	r3, [r7, #12]
}
 8006db8:	bf00      	nop
 8006dba:	bf00      	nop
 8006dbc:	e7fd      	b.n	8006dba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00b      	beq.n	8006dde <vPortFree+0x66>
	__asm volatile
 8006dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dca:	f383 8811 	msr	BASEPRI, r3
 8006dce:	f3bf 8f6f 	isb	sy
 8006dd2:	f3bf 8f4f 	dsb	sy
 8006dd6:	60bb      	str	r3, [r7, #8]
}
 8006dd8:	bf00      	nop
 8006dda:	bf00      	nop
 8006ddc:	e7fd      	b.n	8006dda <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	685a      	ldr	r2, [r3, #4]
 8006de2:	4b14      	ldr	r3, [pc, #80]	@ (8006e34 <vPortFree+0xbc>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4013      	ands	r3, r2
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d01e      	beq.n	8006e2a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d11a      	bne.n	8006e2a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	685a      	ldr	r2, [r3, #4]
 8006df8:	4b0e      	ldr	r3, [pc, #56]	@ (8006e34 <vPortFree+0xbc>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	43db      	mvns	r3, r3
 8006dfe:	401a      	ands	r2, r3
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006e04:	f7fe fb98 	bl	8005538 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	685a      	ldr	r2, [r3, #4]
 8006e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8006e38 <vPortFree+0xc0>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4413      	add	r3, r2
 8006e12:	4a09      	ldr	r2, [pc, #36]	@ (8006e38 <vPortFree+0xc0>)
 8006e14:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e16:	6938      	ldr	r0, [r7, #16]
 8006e18:	f000 f874 	bl	8006f04 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006e1c:	4b07      	ldr	r3, [pc, #28]	@ (8006e3c <vPortFree+0xc4>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	3301      	adds	r3, #1
 8006e22:	4a06      	ldr	r2, [pc, #24]	@ (8006e3c <vPortFree+0xc4>)
 8006e24:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006e26:	f7fe fb95 	bl	8005554 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e2a:	bf00      	nop
 8006e2c:	3718      	adds	r7, #24
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	20004ba0 	.word	0x20004ba0
 8006e38:	20004b90 	.word	0x20004b90
 8006e3c:	20004b9c 	.word	0x20004b9c

08006e40 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e40:	b480      	push	{r7}
 8006e42:	b085      	sub	sp, #20
 8006e44:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e46:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006e4a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e4c:	4b27      	ldr	r3, [pc, #156]	@ (8006eec <prvHeapInit+0xac>)
 8006e4e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f003 0307 	and.w	r3, r3, #7
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00c      	beq.n	8006e74 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	3307      	adds	r3, #7
 8006e5e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f023 0307 	bic.w	r3, r3, #7
 8006e66:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e68:	68ba      	ldr	r2, [r7, #8]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	4a1f      	ldr	r2, [pc, #124]	@ (8006eec <prvHeapInit+0xac>)
 8006e70:	4413      	add	r3, r2
 8006e72:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e78:	4a1d      	ldr	r2, [pc, #116]	@ (8006ef0 <prvHeapInit+0xb0>)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8006ef0 <prvHeapInit+0xb0>)
 8006e80:	2200      	movs	r2, #0
 8006e82:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	68ba      	ldr	r2, [r7, #8]
 8006e88:	4413      	add	r3, r2
 8006e8a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006e8c:	2208      	movs	r2, #8
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	1a9b      	subs	r3, r3, r2
 8006e92:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f023 0307 	bic.w	r3, r3, #7
 8006e9a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	4a15      	ldr	r2, [pc, #84]	@ (8006ef4 <prvHeapInit+0xb4>)
 8006ea0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ea2:	4b14      	ldr	r3, [pc, #80]	@ (8006ef4 <prvHeapInit+0xb4>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006eaa:	4b12      	ldr	r3, [pc, #72]	@ (8006ef4 <prvHeapInit+0xb4>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	68fa      	ldr	r2, [r7, #12]
 8006eba:	1ad2      	subs	r2, r2, r3
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8006ef4 <prvHeapInit+0xb4>)
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	4a0a      	ldr	r2, [pc, #40]	@ (8006ef8 <prvHeapInit+0xb8>)
 8006ece:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	4a09      	ldr	r2, [pc, #36]	@ (8006efc <prvHeapInit+0xbc>)
 8006ed6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006ed8:	4b09      	ldr	r3, [pc, #36]	@ (8006f00 <prvHeapInit+0xc0>)
 8006eda:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006ede:	601a      	str	r2, [r3, #0]
}
 8006ee0:	bf00      	nop
 8006ee2:	3714      	adds	r7, #20
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr
 8006eec:	20000f84 	.word	0x20000f84
 8006ef0:	20004b84 	.word	0x20004b84
 8006ef4:	20004b8c 	.word	0x20004b8c
 8006ef8:	20004b94 	.word	0x20004b94
 8006efc:	20004b90 	.word	0x20004b90
 8006f00:	20004ba0 	.word	0x20004ba0

08006f04 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f0c:	4b28      	ldr	r3, [pc, #160]	@ (8006fb0 <prvInsertBlockIntoFreeList+0xac>)
 8006f0e:	60fb      	str	r3, [r7, #12]
 8006f10:	e002      	b.n	8006f18 <prvInsertBlockIntoFreeList+0x14>
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	60fb      	str	r3, [r7, #12]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d8f7      	bhi.n	8006f12 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	68ba      	ldr	r2, [r7, #8]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d108      	bne.n	8006f46 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	685a      	ldr	r2, [r3, #4]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	441a      	add	r2, r3
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	68ba      	ldr	r2, [r7, #8]
 8006f50:	441a      	add	r2, r3
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d118      	bne.n	8006f8c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	4b15      	ldr	r3, [pc, #84]	@ (8006fb4 <prvInsertBlockIntoFreeList+0xb0>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d00d      	beq.n	8006f82 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	685a      	ldr	r2, [r3, #4]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	441a      	add	r2, r3
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	601a      	str	r2, [r3, #0]
 8006f80:	e008      	b.n	8006f94 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f82:	4b0c      	ldr	r3, [pc, #48]	@ (8006fb4 <prvInsertBlockIntoFreeList+0xb0>)
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	601a      	str	r2, [r3, #0]
 8006f8a:	e003      	b.n	8006f94 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d002      	beq.n	8006fa2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fa2:	bf00      	nop
 8006fa4:	3714      	adds	r7, #20
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop
 8006fb0:	20004b84 	.word	0x20004b84
 8006fb4:	20004b8c 	.word	0x20004b8c

08006fb8 <std>:
 8006fb8:	2300      	movs	r3, #0
 8006fba:	b510      	push	{r4, lr}
 8006fbc:	4604      	mov	r4, r0
 8006fbe:	e9c0 3300 	strd	r3, r3, [r0]
 8006fc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006fc6:	6083      	str	r3, [r0, #8]
 8006fc8:	8181      	strh	r1, [r0, #12]
 8006fca:	6643      	str	r3, [r0, #100]	@ 0x64
 8006fcc:	81c2      	strh	r2, [r0, #14]
 8006fce:	6183      	str	r3, [r0, #24]
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	2208      	movs	r2, #8
 8006fd4:	305c      	adds	r0, #92	@ 0x5c
 8006fd6:	f000 f92a 	bl	800722e <memset>
 8006fda:	4b0d      	ldr	r3, [pc, #52]	@ (8007010 <std+0x58>)
 8006fdc:	6263      	str	r3, [r4, #36]	@ 0x24
 8006fde:	4b0d      	ldr	r3, [pc, #52]	@ (8007014 <std+0x5c>)
 8006fe0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8007018 <std+0x60>)
 8006fe4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800701c <std+0x64>)
 8006fe8:	6323      	str	r3, [r4, #48]	@ 0x30
 8006fea:	4b0d      	ldr	r3, [pc, #52]	@ (8007020 <std+0x68>)
 8006fec:	6224      	str	r4, [r4, #32]
 8006fee:	429c      	cmp	r4, r3
 8006ff0:	d006      	beq.n	8007000 <std+0x48>
 8006ff2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006ff6:	4294      	cmp	r4, r2
 8006ff8:	d002      	beq.n	8007000 <std+0x48>
 8006ffa:	33d0      	adds	r3, #208	@ 0xd0
 8006ffc:	429c      	cmp	r4, r3
 8006ffe:	d105      	bne.n	800700c <std+0x54>
 8007000:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007008:	f000 b9f8 	b.w	80073fc <__retarget_lock_init_recursive>
 800700c:	bd10      	pop	{r4, pc}
 800700e:	bf00      	nop
 8007010:	080071a9 	.word	0x080071a9
 8007014:	080071cb 	.word	0x080071cb
 8007018:	08007203 	.word	0x08007203
 800701c:	08007227 	.word	0x08007227
 8007020:	20004ba4 	.word	0x20004ba4

08007024 <stdio_exit_handler>:
 8007024:	4a02      	ldr	r2, [pc, #8]	@ (8007030 <stdio_exit_handler+0xc>)
 8007026:	4903      	ldr	r1, [pc, #12]	@ (8007034 <stdio_exit_handler+0x10>)
 8007028:	4803      	ldr	r0, [pc, #12]	@ (8007038 <stdio_exit_handler+0x14>)
 800702a:	f000 b869 	b.w	8007100 <_fwalk_sglue>
 800702e:	bf00      	nop
 8007030:	20000010 	.word	0x20000010
 8007034:	08007d2d 	.word	0x08007d2d
 8007038:	20000020 	.word	0x20000020

0800703c <cleanup_stdio>:
 800703c:	6841      	ldr	r1, [r0, #4]
 800703e:	4b0c      	ldr	r3, [pc, #48]	@ (8007070 <cleanup_stdio+0x34>)
 8007040:	4299      	cmp	r1, r3
 8007042:	b510      	push	{r4, lr}
 8007044:	4604      	mov	r4, r0
 8007046:	d001      	beq.n	800704c <cleanup_stdio+0x10>
 8007048:	f000 fe70 	bl	8007d2c <_fflush_r>
 800704c:	68a1      	ldr	r1, [r4, #8]
 800704e:	4b09      	ldr	r3, [pc, #36]	@ (8007074 <cleanup_stdio+0x38>)
 8007050:	4299      	cmp	r1, r3
 8007052:	d002      	beq.n	800705a <cleanup_stdio+0x1e>
 8007054:	4620      	mov	r0, r4
 8007056:	f000 fe69 	bl	8007d2c <_fflush_r>
 800705a:	68e1      	ldr	r1, [r4, #12]
 800705c:	4b06      	ldr	r3, [pc, #24]	@ (8007078 <cleanup_stdio+0x3c>)
 800705e:	4299      	cmp	r1, r3
 8007060:	d004      	beq.n	800706c <cleanup_stdio+0x30>
 8007062:	4620      	mov	r0, r4
 8007064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007068:	f000 be60 	b.w	8007d2c <_fflush_r>
 800706c:	bd10      	pop	{r4, pc}
 800706e:	bf00      	nop
 8007070:	20004ba4 	.word	0x20004ba4
 8007074:	20004c0c 	.word	0x20004c0c
 8007078:	20004c74 	.word	0x20004c74

0800707c <global_stdio_init.part.0>:
 800707c:	b510      	push	{r4, lr}
 800707e:	4b0b      	ldr	r3, [pc, #44]	@ (80070ac <global_stdio_init.part.0+0x30>)
 8007080:	4c0b      	ldr	r4, [pc, #44]	@ (80070b0 <global_stdio_init.part.0+0x34>)
 8007082:	4a0c      	ldr	r2, [pc, #48]	@ (80070b4 <global_stdio_init.part.0+0x38>)
 8007084:	601a      	str	r2, [r3, #0]
 8007086:	4620      	mov	r0, r4
 8007088:	2200      	movs	r2, #0
 800708a:	2104      	movs	r1, #4
 800708c:	f7ff ff94 	bl	8006fb8 <std>
 8007090:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007094:	2201      	movs	r2, #1
 8007096:	2109      	movs	r1, #9
 8007098:	f7ff ff8e 	bl	8006fb8 <std>
 800709c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80070a0:	2202      	movs	r2, #2
 80070a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070a6:	2112      	movs	r1, #18
 80070a8:	f7ff bf86 	b.w	8006fb8 <std>
 80070ac:	20004cdc 	.word	0x20004cdc
 80070b0:	20004ba4 	.word	0x20004ba4
 80070b4:	08007025 	.word	0x08007025

080070b8 <__sfp_lock_acquire>:
 80070b8:	4801      	ldr	r0, [pc, #4]	@ (80070c0 <__sfp_lock_acquire+0x8>)
 80070ba:	f000 b9a0 	b.w	80073fe <__retarget_lock_acquire_recursive>
 80070be:	bf00      	nop
 80070c0:	20004ce5 	.word	0x20004ce5

080070c4 <__sfp_lock_release>:
 80070c4:	4801      	ldr	r0, [pc, #4]	@ (80070cc <__sfp_lock_release+0x8>)
 80070c6:	f000 b99b 	b.w	8007400 <__retarget_lock_release_recursive>
 80070ca:	bf00      	nop
 80070cc:	20004ce5 	.word	0x20004ce5

080070d0 <__sinit>:
 80070d0:	b510      	push	{r4, lr}
 80070d2:	4604      	mov	r4, r0
 80070d4:	f7ff fff0 	bl	80070b8 <__sfp_lock_acquire>
 80070d8:	6a23      	ldr	r3, [r4, #32]
 80070da:	b11b      	cbz	r3, 80070e4 <__sinit+0x14>
 80070dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070e0:	f7ff bff0 	b.w	80070c4 <__sfp_lock_release>
 80070e4:	4b04      	ldr	r3, [pc, #16]	@ (80070f8 <__sinit+0x28>)
 80070e6:	6223      	str	r3, [r4, #32]
 80070e8:	4b04      	ldr	r3, [pc, #16]	@ (80070fc <__sinit+0x2c>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d1f5      	bne.n	80070dc <__sinit+0xc>
 80070f0:	f7ff ffc4 	bl	800707c <global_stdio_init.part.0>
 80070f4:	e7f2      	b.n	80070dc <__sinit+0xc>
 80070f6:	bf00      	nop
 80070f8:	0800703d 	.word	0x0800703d
 80070fc:	20004cdc 	.word	0x20004cdc

08007100 <_fwalk_sglue>:
 8007100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007104:	4607      	mov	r7, r0
 8007106:	4688      	mov	r8, r1
 8007108:	4614      	mov	r4, r2
 800710a:	2600      	movs	r6, #0
 800710c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007110:	f1b9 0901 	subs.w	r9, r9, #1
 8007114:	d505      	bpl.n	8007122 <_fwalk_sglue+0x22>
 8007116:	6824      	ldr	r4, [r4, #0]
 8007118:	2c00      	cmp	r4, #0
 800711a:	d1f7      	bne.n	800710c <_fwalk_sglue+0xc>
 800711c:	4630      	mov	r0, r6
 800711e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007122:	89ab      	ldrh	r3, [r5, #12]
 8007124:	2b01      	cmp	r3, #1
 8007126:	d907      	bls.n	8007138 <_fwalk_sglue+0x38>
 8007128:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800712c:	3301      	adds	r3, #1
 800712e:	d003      	beq.n	8007138 <_fwalk_sglue+0x38>
 8007130:	4629      	mov	r1, r5
 8007132:	4638      	mov	r0, r7
 8007134:	47c0      	blx	r8
 8007136:	4306      	orrs	r6, r0
 8007138:	3568      	adds	r5, #104	@ 0x68
 800713a:	e7e9      	b.n	8007110 <_fwalk_sglue+0x10>

0800713c <sniprintf>:
 800713c:	b40c      	push	{r2, r3}
 800713e:	b530      	push	{r4, r5, lr}
 8007140:	4b18      	ldr	r3, [pc, #96]	@ (80071a4 <sniprintf+0x68>)
 8007142:	1e0c      	subs	r4, r1, #0
 8007144:	681d      	ldr	r5, [r3, #0]
 8007146:	b09d      	sub	sp, #116	@ 0x74
 8007148:	da08      	bge.n	800715c <sniprintf+0x20>
 800714a:	238b      	movs	r3, #139	@ 0x8b
 800714c:	602b      	str	r3, [r5, #0]
 800714e:	f04f 30ff 	mov.w	r0, #4294967295
 8007152:	b01d      	add	sp, #116	@ 0x74
 8007154:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007158:	b002      	add	sp, #8
 800715a:	4770      	bx	lr
 800715c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007160:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007164:	f04f 0300 	mov.w	r3, #0
 8007168:	931b      	str	r3, [sp, #108]	@ 0x6c
 800716a:	bf14      	ite	ne
 800716c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007170:	4623      	moveq	r3, r4
 8007172:	9304      	str	r3, [sp, #16]
 8007174:	9307      	str	r3, [sp, #28]
 8007176:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800717a:	9002      	str	r0, [sp, #8]
 800717c:	9006      	str	r0, [sp, #24]
 800717e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007182:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007184:	ab21      	add	r3, sp, #132	@ 0x84
 8007186:	a902      	add	r1, sp, #8
 8007188:	4628      	mov	r0, r5
 800718a:	9301      	str	r3, [sp, #4]
 800718c:	f000 fac2 	bl	8007714 <_svfiprintf_r>
 8007190:	1c43      	adds	r3, r0, #1
 8007192:	bfbc      	itt	lt
 8007194:	238b      	movlt	r3, #139	@ 0x8b
 8007196:	602b      	strlt	r3, [r5, #0]
 8007198:	2c00      	cmp	r4, #0
 800719a:	d0da      	beq.n	8007152 <sniprintf+0x16>
 800719c:	9b02      	ldr	r3, [sp, #8]
 800719e:	2200      	movs	r2, #0
 80071a0:	701a      	strb	r2, [r3, #0]
 80071a2:	e7d6      	b.n	8007152 <sniprintf+0x16>
 80071a4:	2000001c 	.word	0x2000001c

080071a8 <__sread>:
 80071a8:	b510      	push	{r4, lr}
 80071aa:	460c      	mov	r4, r1
 80071ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071b0:	f000 f8d6 	bl	8007360 <_read_r>
 80071b4:	2800      	cmp	r0, #0
 80071b6:	bfab      	itete	ge
 80071b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80071ba:	89a3      	ldrhlt	r3, [r4, #12]
 80071bc:	181b      	addge	r3, r3, r0
 80071be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80071c2:	bfac      	ite	ge
 80071c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80071c6:	81a3      	strhlt	r3, [r4, #12]
 80071c8:	bd10      	pop	{r4, pc}

080071ca <__swrite>:
 80071ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071ce:	461f      	mov	r7, r3
 80071d0:	898b      	ldrh	r3, [r1, #12]
 80071d2:	05db      	lsls	r3, r3, #23
 80071d4:	4605      	mov	r5, r0
 80071d6:	460c      	mov	r4, r1
 80071d8:	4616      	mov	r6, r2
 80071da:	d505      	bpl.n	80071e8 <__swrite+0x1e>
 80071dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071e0:	2302      	movs	r3, #2
 80071e2:	2200      	movs	r2, #0
 80071e4:	f000 f8aa 	bl	800733c <_lseek_r>
 80071e8:	89a3      	ldrh	r3, [r4, #12]
 80071ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80071f2:	81a3      	strh	r3, [r4, #12]
 80071f4:	4632      	mov	r2, r6
 80071f6:	463b      	mov	r3, r7
 80071f8:	4628      	mov	r0, r5
 80071fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071fe:	f000 b8c1 	b.w	8007384 <_write_r>

08007202 <__sseek>:
 8007202:	b510      	push	{r4, lr}
 8007204:	460c      	mov	r4, r1
 8007206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800720a:	f000 f897 	bl	800733c <_lseek_r>
 800720e:	1c43      	adds	r3, r0, #1
 8007210:	89a3      	ldrh	r3, [r4, #12]
 8007212:	bf15      	itete	ne
 8007214:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007216:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800721a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800721e:	81a3      	strheq	r3, [r4, #12]
 8007220:	bf18      	it	ne
 8007222:	81a3      	strhne	r3, [r4, #12]
 8007224:	bd10      	pop	{r4, pc}

08007226 <__sclose>:
 8007226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800722a:	f000 b877 	b.w	800731c <_close_r>

0800722e <memset>:
 800722e:	4402      	add	r2, r0
 8007230:	4603      	mov	r3, r0
 8007232:	4293      	cmp	r3, r2
 8007234:	d100      	bne.n	8007238 <memset+0xa>
 8007236:	4770      	bx	lr
 8007238:	f803 1b01 	strb.w	r1, [r3], #1
 800723c:	e7f9      	b.n	8007232 <memset+0x4>

0800723e <strncpy>:
 800723e:	b510      	push	{r4, lr}
 8007240:	3901      	subs	r1, #1
 8007242:	4603      	mov	r3, r0
 8007244:	b132      	cbz	r2, 8007254 <strncpy+0x16>
 8007246:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800724a:	f803 4b01 	strb.w	r4, [r3], #1
 800724e:	3a01      	subs	r2, #1
 8007250:	2c00      	cmp	r4, #0
 8007252:	d1f7      	bne.n	8007244 <strncpy+0x6>
 8007254:	441a      	add	r2, r3
 8007256:	2100      	movs	r1, #0
 8007258:	4293      	cmp	r3, r2
 800725a:	d100      	bne.n	800725e <strncpy+0x20>
 800725c:	bd10      	pop	{r4, pc}
 800725e:	f803 1b01 	strb.w	r1, [r3], #1
 8007262:	e7f9      	b.n	8007258 <strncpy+0x1a>

08007264 <strtok>:
 8007264:	4b16      	ldr	r3, [pc, #88]	@ (80072c0 <strtok+0x5c>)
 8007266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800726a:	681f      	ldr	r7, [r3, #0]
 800726c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800726e:	4605      	mov	r5, r0
 8007270:	460e      	mov	r6, r1
 8007272:	b9ec      	cbnz	r4, 80072b0 <strtok+0x4c>
 8007274:	2050      	movs	r0, #80	@ 0x50
 8007276:	f000 f93b 	bl	80074f0 <malloc>
 800727a:	4602      	mov	r2, r0
 800727c:	6478      	str	r0, [r7, #68]	@ 0x44
 800727e:	b920      	cbnz	r0, 800728a <strtok+0x26>
 8007280:	4b10      	ldr	r3, [pc, #64]	@ (80072c4 <strtok+0x60>)
 8007282:	4811      	ldr	r0, [pc, #68]	@ (80072c8 <strtok+0x64>)
 8007284:	215b      	movs	r1, #91	@ 0x5b
 8007286:	f000 f8cb 	bl	8007420 <__assert_func>
 800728a:	e9c0 4400 	strd	r4, r4, [r0]
 800728e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007292:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007296:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800729a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800729e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80072a2:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80072a6:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80072aa:	6184      	str	r4, [r0, #24]
 80072ac:	7704      	strb	r4, [r0, #28]
 80072ae:	6244      	str	r4, [r0, #36]	@ 0x24
 80072b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072b2:	4631      	mov	r1, r6
 80072b4:	4628      	mov	r0, r5
 80072b6:	2301      	movs	r3, #1
 80072b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072bc:	f000 b806 	b.w	80072cc <__strtok_r>
 80072c0:	2000001c 	.word	0x2000001c
 80072c4:	0800846c 	.word	0x0800846c
 80072c8:	08008483 	.word	0x08008483

080072cc <__strtok_r>:
 80072cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072ce:	4604      	mov	r4, r0
 80072d0:	b908      	cbnz	r0, 80072d6 <__strtok_r+0xa>
 80072d2:	6814      	ldr	r4, [r2, #0]
 80072d4:	b144      	cbz	r4, 80072e8 <__strtok_r+0x1c>
 80072d6:	4620      	mov	r0, r4
 80072d8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80072dc:	460f      	mov	r7, r1
 80072de:	f817 6b01 	ldrb.w	r6, [r7], #1
 80072e2:	b91e      	cbnz	r6, 80072ec <__strtok_r+0x20>
 80072e4:	b965      	cbnz	r5, 8007300 <__strtok_r+0x34>
 80072e6:	6015      	str	r5, [r2, #0]
 80072e8:	2000      	movs	r0, #0
 80072ea:	e005      	b.n	80072f8 <__strtok_r+0x2c>
 80072ec:	42b5      	cmp	r5, r6
 80072ee:	d1f6      	bne.n	80072de <__strtok_r+0x12>
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d1f0      	bne.n	80072d6 <__strtok_r+0xa>
 80072f4:	6014      	str	r4, [r2, #0]
 80072f6:	7003      	strb	r3, [r0, #0]
 80072f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072fa:	461c      	mov	r4, r3
 80072fc:	e00c      	b.n	8007318 <__strtok_r+0x4c>
 80072fe:	b91d      	cbnz	r5, 8007308 <__strtok_r+0x3c>
 8007300:	4627      	mov	r7, r4
 8007302:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007306:	460e      	mov	r6, r1
 8007308:	f816 5b01 	ldrb.w	r5, [r6], #1
 800730c:	42ab      	cmp	r3, r5
 800730e:	d1f6      	bne.n	80072fe <__strtok_r+0x32>
 8007310:	2b00      	cmp	r3, #0
 8007312:	d0f2      	beq.n	80072fa <__strtok_r+0x2e>
 8007314:	2300      	movs	r3, #0
 8007316:	703b      	strb	r3, [r7, #0]
 8007318:	6014      	str	r4, [r2, #0]
 800731a:	e7ed      	b.n	80072f8 <__strtok_r+0x2c>

0800731c <_close_r>:
 800731c:	b538      	push	{r3, r4, r5, lr}
 800731e:	4d06      	ldr	r5, [pc, #24]	@ (8007338 <_close_r+0x1c>)
 8007320:	2300      	movs	r3, #0
 8007322:	4604      	mov	r4, r0
 8007324:	4608      	mov	r0, r1
 8007326:	602b      	str	r3, [r5, #0]
 8007328:	f7f9 fe2d 	bl	8000f86 <_close>
 800732c:	1c43      	adds	r3, r0, #1
 800732e:	d102      	bne.n	8007336 <_close_r+0x1a>
 8007330:	682b      	ldr	r3, [r5, #0]
 8007332:	b103      	cbz	r3, 8007336 <_close_r+0x1a>
 8007334:	6023      	str	r3, [r4, #0]
 8007336:	bd38      	pop	{r3, r4, r5, pc}
 8007338:	20004ce0 	.word	0x20004ce0

0800733c <_lseek_r>:
 800733c:	b538      	push	{r3, r4, r5, lr}
 800733e:	4d07      	ldr	r5, [pc, #28]	@ (800735c <_lseek_r+0x20>)
 8007340:	4604      	mov	r4, r0
 8007342:	4608      	mov	r0, r1
 8007344:	4611      	mov	r1, r2
 8007346:	2200      	movs	r2, #0
 8007348:	602a      	str	r2, [r5, #0]
 800734a:	461a      	mov	r2, r3
 800734c:	f7f9 fe42 	bl	8000fd4 <_lseek>
 8007350:	1c43      	adds	r3, r0, #1
 8007352:	d102      	bne.n	800735a <_lseek_r+0x1e>
 8007354:	682b      	ldr	r3, [r5, #0]
 8007356:	b103      	cbz	r3, 800735a <_lseek_r+0x1e>
 8007358:	6023      	str	r3, [r4, #0]
 800735a:	bd38      	pop	{r3, r4, r5, pc}
 800735c:	20004ce0 	.word	0x20004ce0

08007360 <_read_r>:
 8007360:	b538      	push	{r3, r4, r5, lr}
 8007362:	4d07      	ldr	r5, [pc, #28]	@ (8007380 <_read_r+0x20>)
 8007364:	4604      	mov	r4, r0
 8007366:	4608      	mov	r0, r1
 8007368:	4611      	mov	r1, r2
 800736a:	2200      	movs	r2, #0
 800736c:	602a      	str	r2, [r5, #0]
 800736e:	461a      	mov	r2, r3
 8007370:	f7f9 fdd0 	bl	8000f14 <_read>
 8007374:	1c43      	adds	r3, r0, #1
 8007376:	d102      	bne.n	800737e <_read_r+0x1e>
 8007378:	682b      	ldr	r3, [r5, #0]
 800737a:	b103      	cbz	r3, 800737e <_read_r+0x1e>
 800737c:	6023      	str	r3, [r4, #0]
 800737e:	bd38      	pop	{r3, r4, r5, pc}
 8007380:	20004ce0 	.word	0x20004ce0

08007384 <_write_r>:
 8007384:	b538      	push	{r3, r4, r5, lr}
 8007386:	4d07      	ldr	r5, [pc, #28]	@ (80073a4 <_write_r+0x20>)
 8007388:	4604      	mov	r4, r0
 800738a:	4608      	mov	r0, r1
 800738c:	4611      	mov	r1, r2
 800738e:	2200      	movs	r2, #0
 8007390:	602a      	str	r2, [r5, #0]
 8007392:	461a      	mov	r2, r3
 8007394:	f7f9 fddb 	bl	8000f4e <_write>
 8007398:	1c43      	adds	r3, r0, #1
 800739a:	d102      	bne.n	80073a2 <_write_r+0x1e>
 800739c:	682b      	ldr	r3, [r5, #0]
 800739e:	b103      	cbz	r3, 80073a2 <_write_r+0x1e>
 80073a0:	6023      	str	r3, [r4, #0]
 80073a2:	bd38      	pop	{r3, r4, r5, pc}
 80073a4:	20004ce0 	.word	0x20004ce0

080073a8 <__errno>:
 80073a8:	4b01      	ldr	r3, [pc, #4]	@ (80073b0 <__errno+0x8>)
 80073aa:	6818      	ldr	r0, [r3, #0]
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop
 80073b0:	2000001c 	.word	0x2000001c

080073b4 <__libc_init_array>:
 80073b4:	b570      	push	{r4, r5, r6, lr}
 80073b6:	4d0d      	ldr	r5, [pc, #52]	@ (80073ec <__libc_init_array+0x38>)
 80073b8:	4c0d      	ldr	r4, [pc, #52]	@ (80073f0 <__libc_init_array+0x3c>)
 80073ba:	1b64      	subs	r4, r4, r5
 80073bc:	10a4      	asrs	r4, r4, #2
 80073be:	2600      	movs	r6, #0
 80073c0:	42a6      	cmp	r6, r4
 80073c2:	d109      	bne.n	80073d8 <__libc_init_array+0x24>
 80073c4:	4d0b      	ldr	r5, [pc, #44]	@ (80073f4 <__libc_init_array+0x40>)
 80073c6:	4c0c      	ldr	r4, [pc, #48]	@ (80073f8 <__libc_init_array+0x44>)
 80073c8:	f000 ffee 	bl	80083a8 <_init>
 80073cc:	1b64      	subs	r4, r4, r5
 80073ce:	10a4      	asrs	r4, r4, #2
 80073d0:	2600      	movs	r6, #0
 80073d2:	42a6      	cmp	r6, r4
 80073d4:	d105      	bne.n	80073e2 <__libc_init_array+0x2e>
 80073d6:	bd70      	pop	{r4, r5, r6, pc}
 80073d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80073dc:	4798      	blx	r3
 80073de:	3601      	adds	r6, #1
 80073e0:	e7ee      	b.n	80073c0 <__libc_init_array+0xc>
 80073e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80073e6:	4798      	blx	r3
 80073e8:	3601      	adds	r6, #1
 80073ea:	e7f2      	b.n	80073d2 <__libc_init_array+0x1e>
 80073ec:	08008554 	.word	0x08008554
 80073f0:	08008554 	.word	0x08008554
 80073f4:	08008554 	.word	0x08008554
 80073f8:	08008558 	.word	0x08008558

080073fc <__retarget_lock_init_recursive>:
 80073fc:	4770      	bx	lr

080073fe <__retarget_lock_acquire_recursive>:
 80073fe:	4770      	bx	lr

08007400 <__retarget_lock_release_recursive>:
 8007400:	4770      	bx	lr

08007402 <memcpy>:
 8007402:	440a      	add	r2, r1
 8007404:	4291      	cmp	r1, r2
 8007406:	f100 33ff 	add.w	r3, r0, #4294967295
 800740a:	d100      	bne.n	800740e <memcpy+0xc>
 800740c:	4770      	bx	lr
 800740e:	b510      	push	{r4, lr}
 8007410:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007414:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007418:	4291      	cmp	r1, r2
 800741a:	d1f9      	bne.n	8007410 <memcpy+0xe>
 800741c:	bd10      	pop	{r4, pc}
	...

08007420 <__assert_func>:
 8007420:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007422:	4614      	mov	r4, r2
 8007424:	461a      	mov	r2, r3
 8007426:	4b09      	ldr	r3, [pc, #36]	@ (800744c <__assert_func+0x2c>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4605      	mov	r5, r0
 800742c:	68d8      	ldr	r0, [r3, #12]
 800742e:	b14c      	cbz	r4, 8007444 <__assert_func+0x24>
 8007430:	4b07      	ldr	r3, [pc, #28]	@ (8007450 <__assert_func+0x30>)
 8007432:	9100      	str	r1, [sp, #0]
 8007434:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007438:	4906      	ldr	r1, [pc, #24]	@ (8007454 <__assert_func+0x34>)
 800743a:	462b      	mov	r3, r5
 800743c:	f000 fc9e 	bl	8007d7c <fiprintf>
 8007440:	f000 fcd8 	bl	8007df4 <abort>
 8007444:	4b04      	ldr	r3, [pc, #16]	@ (8007458 <__assert_func+0x38>)
 8007446:	461c      	mov	r4, r3
 8007448:	e7f3      	b.n	8007432 <__assert_func+0x12>
 800744a:	bf00      	nop
 800744c:	2000001c 	.word	0x2000001c
 8007450:	080084dd 	.word	0x080084dd
 8007454:	080084ea 	.word	0x080084ea
 8007458:	08008518 	.word	0x08008518

0800745c <_free_r>:
 800745c:	b538      	push	{r3, r4, r5, lr}
 800745e:	4605      	mov	r5, r0
 8007460:	2900      	cmp	r1, #0
 8007462:	d041      	beq.n	80074e8 <_free_r+0x8c>
 8007464:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007468:	1f0c      	subs	r4, r1, #4
 800746a:	2b00      	cmp	r3, #0
 800746c:	bfb8      	it	lt
 800746e:	18e4      	addlt	r4, r4, r3
 8007470:	f000 f8e8 	bl	8007644 <__malloc_lock>
 8007474:	4a1d      	ldr	r2, [pc, #116]	@ (80074ec <_free_r+0x90>)
 8007476:	6813      	ldr	r3, [r2, #0]
 8007478:	b933      	cbnz	r3, 8007488 <_free_r+0x2c>
 800747a:	6063      	str	r3, [r4, #4]
 800747c:	6014      	str	r4, [r2, #0]
 800747e:	4628      	mov	r0, r5
 8007480:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007484:	f000 b8e4 	b.w	8007650 <__malloc_unlock>
 8007488:	42a3      	cmp	r3, r4
 800748a:	d908      	bls.n	800749e <_free_r+0x42>
 800748c:	6820      	ldr	r0, [r4, #0]
 800748e:	1821      	adds	r1, r4, r0
 8007490:	428b      	cmp	r3, r1
 8007492:	bf01      	itttt	eq
 8007494:	6819      	ldreq	r1, [r3, #0]
 8007496:	685b      	ldreq	r3, [r3, #4]
 8007498:	1809      	addeq	r1, r1, r0
 800749a:	6021      	streq	r1, [r4, #0]
 800749c:	e7ed      	b.n	800747a <_free_r+0x1e>
 800749e:	461a      	mov	r2, r3
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	b10b      	cbz	r3, 80074a8 <_free_r+0x4c>
 80074a4:	42a3      	cmp	r3, r4
 80074a6:	d9fa      	bls.n	800749e <_free_r+0x42>
 80074a8:	6811      	ldr	r1, [r2, #0]
 80074aa:	1850      	adds	r0, r2, r1
 80074ac:	42a0      	cmp	r0, r4
 80074ae:	d10b      	bne.n	80074c8 <_free_r+0x6c>
 80074b0:	6820      	ldr	r0, [r4, #0]
 80074b2:	4401      	add	r1, r0
 80074b4:	1850      	adds	r0, r2, r1
 80074b6:	4283      	cmp	r3, r0
 80074b8:	6011      	str	r1, [r2, #0]
 80074ba:	d1e0      	bne.n	800747e <_free_r+0x22>
 80074bc:	6818      	ldr	r0, [r3, #0]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	6053      	str	r3, [r2, #4]
 80074c2:	4408      	add	r0, r1
 80074c4:	6010      	str	r0, [r2, #0]
 80074c6:	e7da      	b.n	800747e <_free_r+0x22>
 80074c8:	d902      	bls.n	80074d0 <_free_r+0x74>
 80074ca:	230c      	movs	r3, #12
 80074cc:	602b      	str	r3, [r5, #0]
 80074ce:	e7d6      	b.n	800747e <_free_r+0x22>
 80074d0:	6820      	ldr	r0, [r4, #0]
 80074d2:	1821      	adds	r1, r4, r0
 80074d4:	428b      	cmp	r3, r1
 80074d6:	bf04      	itt	eq
 80074d8:	6819      	ldreq	r1, [r3, #0]
 80074da:	685b      	ldreq	r3, [r3, #4]
 80074dc:	6063      	str	r3, [r4, #4]
 80074de:	bf04      	itt	eq
 80074e0:	1809      	addeq	r1, r1, r0
 80074e2:	6021      	streq	r1, [r4, #0]
 80074e4:	6054      	str	r4, [r2, #4]
 80074e6:	e7ca      	b.n	800747e <_free_r+0x22>
 80074e8:	bd38      	pop	{r3, r4, r5, pc}
 80074ea:	bf00      	nop
 80074ec:	20004cec 	.word	0x20004cec

080074f0 <malloc>:
 80074f0:	4b02      	ldr	r3, [pc, #8]	@ (80074fc <malloc+0xc>)
 80074f2:	4601      	mov	r1, r0
 80074f4:	6818      	ldr	r0, [r3, #0]
 80074f6:	f000 b825 	b.w	8007544 <_malloc_r>
 80074fa:	bf00      	nop
 80074fc:	2000001c 	.word	0x2000001c

08007500 <sbrk_aligned>:
 8007500:	b570      	push	{r4, r5, r6, lr}
 8007502:	4e0f      	ldr	r6, [pc, #60]	@ (8007540 <sbrk_aligned+0x40>)
 8007504:	460c      	mov	r4, r1
 8007506:	6831      	ldr	r1, [r6, #0]
 8007508:	4605      	mov	r5, r0
 800750a:	b911      	cbnz	r1, 8007512 <sbrk_aligned+0x12>
 800750c:	f000 fc62 	bl	8007dd4 <_sbrk_r>
 8007510:	6030      	str	r0, [r6, #0]
 8007512:	4621      	mov	r1, r4
 8007514:	4628      	mov	r0, r5
 8007516:	f000 fc5d 	bl	8007dd4 <_sbrk_r>
 800751a:	1c43      	adds	r3, r0, #1
 800751c:	d103      	bne.n	8007526 <sbrk_aligned+0x26>
 800751e:	f04f 34ff 	mov.w	r4, #4294967295
 8007522:	4620      	mov	r0, r4
 8007524:	bd70      	pop	{r4, r5, r6, pc}
 8007526:	1cc4      	adds	r4, r0, #3
 8007528:	f024 0403 	bic.w	r4, r4, #3
 800752c:	42a0      	cmp	r0, r4
 800752e:	d0f8      	beq.n	8007522 <sbrk_aligned+0x22>
 8007530:	1a21      	subs	r1, r4, r0
 8007532:	4628      	mov	r0, r5
 8007534:	f000 fc4e 	bl	8007dd4 <_sbrk_r>
 8007538:	3001      	adds	r0, #1
 800753a:	d1f2      	bne.n	8007522 <sbrk_aligned+0x22>
 800753c:	e7ef      	b.n	800751e <sbrk_aligned+0x1e>
 800753e:	bf00      	nop
 8007540:	20004ce8 	.word	0x20004ce8

08007544 <_malloc_r>:
 8007544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007548:	1ccd      	adds	r5, r1, #3
 800754a:	f025 0503 	bic.w	r5, r5, #3
 800754e:	3508      	adds	r5, #8
 8007550:	2d0c      	cmp	r5, #12
 8007552:	bf38      	it	cc
 8007554:	250c      	movcc	r5, #12
 8007556:	2d00      	cmp	r5, #0
 8007558:	4606      	mov	r6, r0
 800755a:	db01      	blt.n	8007560 <_malloc_r+0x1c>
 800755c:	42a9      	cmp	r1, r5
 800755e:	d904      	bls.n	800756a <_malloc_r+0x26>
 8007560:	230c      	movs	r3, #12
 8007562:	6033      	str	r3, [r6, #0]
 8007564:	2000      	movs	r0, #0
 8007566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800756a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007640 <_malloc_r+0xfc>
 800756e:	f000 f869 	bl	8007644 <__malloc_lock>
 8007572:	f8d8 3000 	ldr.w	r3, [r8]
 8007576:	461c      	mov	r4, r3
 8007578:	bb44      	cbnz	r4, 80075cc <_malloc_r+0x88>
 800757a:	4629      	mov	r1, r5
 800757c:	4630      	mov	r0, r6
 800757e:	f7ff ffbf 	bl	8007500 <sbrk_aligned>
 8007582:	1c43      	adds	r3, r0, #1
 8007584:	4604      	mov	r4, r0
 8007586:	d158      	bne.n	800763a <_malloc_r+0xf6>
 8007588:	f8d8 4000 	ldr.w	r4, [r8]
 800758c:	4627      	mov	r7, r4
 800758e:	2f00      	cmp	r7, #0
 8007590:	d143      	bne.n	800761a <_malloc_r+0xd6>
 8007592:	2c00      	cmp	r4, #0
 8007594:	d04b      	beq.n	800762e <_malloc_r+0xea>
 8007596:	6823      	ldr	r3, [r4, #0]
 8007598:	4639      	mov	r1, r7
 800759a:	4630      	mov	r0, r6
 800759c:	eb04 0903 	add.w	r9, r4, r3
 80075a0:	f000 fc18 	bl	8007dd4 <_sbrk_r>
 80075a4:	4581      	cmp	r9, r0
 80075a6:	d142      	bne.n	800762e <_malloc_r+0xea>
 80075a8:	6821      	ldr	r1, [r4, #0]
 80075aa:	1a6d      	subs	r5, r5, r1
 80075ac:	4629      	mov	r1, r5
 80075ae:	4630      	mov	r0, r6
 80075b0:	f7ff ffa6 	bl	8007500 <sbrk_aligned>
 80075b4:	3001      	adds	r0, #1
 80075b6:	d03a      	beq.n	800762e <_malloc_r+0xea>
 80075b8:	6823      	ldr	r3, [r4, #0]
 80075ba:	442b      	add	r3, r5
 80075bc:	6023      	str	r3, [r4, #0]
 80075be:	f8d8 3000 	ldr.w	r3, [r8]
 80075c2:	685a      	ldr	r2, [r3, #4]
 80075c4:	bb62      	cbnz	r2, 8007620 <_malloc_r+0xdc>
 80075c6:	f8c8 7000 	str.w	r7, [r8]
 80075ca:	e00f      	b.n	80075ec <_malloc_r+0xa8>
 80075cc:	6822      	ldr	r2, [r4, #0]
 80075ce:	1b52      	subs	r2, r2, r5
 80075d0:	d420      	bmi.n	8007614 <_malloc_r+0xd0>
 80075d2:	2a0b      	cmp	r2, #11
 80075d4:	d917      	bls.n	8007606 <_malloc_r+0xc2>
 80075d6:	1961      	adds	r1, r4, r5
 80075d8:	42a3      	cmp	r3, r4
 80075da:	6025      	str	r5, [r4, #0]
 80075dc:	bf18      	it	ne
 80075de:	6059      	strne	r1, [r3, #4]
 80075e0:	6863      	ldr	r3, [r4, #4]
 80075e2:	bf08      	it	eq
 80075e4:	f8c8 1000 	streq.w	r1, [r8]
 80075e8:	5162      	str	r2, [r4, r5]
 80075ea:	604b      	str	r3, [r1, #4]
 80075ec:	4630      	mov	r0, r6
 80075ee:	f000 f82f 	bl	8007650 <__malloc_unlock>
 80075f2:	f104 000b 	add.w	r0, r4, #11
 80075f6:	1d23      	adds	r3, r4, #4
 80075f8:	f020 0007 	bic.w	r0, r0, #7
 80075fc:	1ac2      	subs	r2, r0, r3
 80075fe:	bf1c      	itt	ne
 8007600:	1a1b      	subne	r3, r3, r0
 8007602:	50a3      	strne	r3, [r4, r2]
 8007604:	e7af      	b.n	8007566 <_malloc_r+0x22>
 8007606:	6862      	ldr	r2, [r4, #4]
 8007608:	42a3      	cmp	r3, r4
 800760a:	bf0c      	ite	eq
 800760c:	f8c8 2000 	streq.w	r2, [r8]
 8007610:	605a      	strne	r2, [r3, #4]
 8007612:	e7eb      	b.n	80075ec <_malloc_r+0xa8>
 8007614:	4623      	mov	r3, r4
 8007616:	6864      	ldr	r4, [r4, #4]
 8007618:	e7ae      	b.n	8007578 <_malloc_r+0x34>
 800761a:	463c      	mov	r4, r7
 800761c:	687f      	ldr	r7, [r7, #4]
 800761e:	e7b6      	b.n	800758e <_malloc_r+0x4a>
 8007620:	461a      	mov	r2, r3
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	42a3      	cmp	r3, r4
 8007626:	d1fb      	bne.n	8007620 <_malloc_r+0xdc>
 8007628:	2300      	movs	r3, #0
 800762a:	6053      	str	r3, [r2, #4]
 800762c:	e7de      	b.n	80075ec <_malloc_r+0xa8>
 800762e:	230c      	movs	r3, #12
 8007630:	6033      	str	r3, [r6, #0]
 8007632:	4630      	mov	r0, r6
 8007634:	f000 f80c 	bl	8007650 <__malloc_unlock>
 8007638:	e794      	b.n	8007564 <_malloc_r+0x20>
 800763a:	6005      	str	r5, [r0, #0]
 800763c:	e7d6      	b.n	80075ec <_malloc_r+0xa8>
 800763e:	bf00      	nop
 8007640:	20004cec 	.word	0x20004cec

08007644 <__malloc_lock>:
 8007644:	4801      	ldr	r0, [pc, #4]	@ (800764c <__malloc_lock+0x8>)
 8007646:	f7ff beda 	b.w	80073fe <__retarget_lock_acquire_recursive>
 800764a:	bf00      	nop
 800764c:	20004ce4 	.word	0x20004ce4

08007650 <__malloc_unlock>:
 8007650:	4801      	ldr	r0, [pc, #4]	@ (8007658 <__malloc_unlock+0x8>)
 8007652:	f7ff bed5 	b.w	8007400 <__retarget_lock_release_recursive>
 8007656:	bf00      	nop
 8007658:	20004ce4 	.word	0x20004ce4

0800765c <__ssputs_r>:
 800765c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007660:	688e      	ldr	r6, [r1, #8]
 8007662:	461f      	mov	r7, r3
 8007664:	42be      	cmp	r6, r7
 8007666:	680b      	ldr	r3, [r1, #0]
 8007668:	4682      	mov	sl, r0
 800766a:	460c      	mov	r4, r1
 800766c:	4690      	mov	r8, r2
 800766e:	d82d      	bhi.n	80076cc <__ssputs_r+0x70>
 8007670:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007674:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007678:	d026      	beq.n	80076c8 <__ssputs_r+0x6c>
 800767a:	6965      	ldr	r5, [r4, #20]
 800767c:	6909      	ldr	r1, [r1, #16]
 800767e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007682:	eba3 0901 	sub.w	r9, r3, r1
 8007686:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800768a:	1c7b      	adds	r3, r7, #1
 800768c:	444b      	add	r3, r9
 800768e:	106d      	asrs	r5, r5, #1
 8007690:	429d      	cmp	r5, r3
 8007692:	bf38      	it	cc
 8007694:	461d      	movcc	r5, r3
 8007696:	0553      	lsls	r3, r2, #21
 8007698:	d527      	bpl.n	80076ea <__ssputs_r+0x8e>
 800769a:	4629      	mov	r1, r5
 800769c:	f7ff ff52 	bl	8007544 <_malloc_r>
 80076a0:	4606      	mov	r6, r0
 80076a2:	b360      	cbz	r0, 80076fe <__ssputs_r+0xa2>
 80076a4:	6921      	ldr	r1, [r4, #16]
 80076a6:	464a      	mov	r2, r9
 80076a8:	f7ff feab 	bl	8007402 <memcpy>
 80076ac:	89a3      	ldrh	r3, [r4, #12]
 80076ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80076b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076b6:	81a3      	strh	r3, [r4, #12]
 80076b8:	6126      	str	r6, [r4, #16]
 80076ba:	6165      	str	r5, [r4, #20]
 80076bc:	444e      	add	r6, r9
 80076be:	eba5 0509 	sub.w	r5, r5, r9
 80076c2:	6026      	str	r6, [r4, #0]
 80076c4:	60a5      	str	r5, [r4, #8]
 80076c6:	463e      	mov	r6, r7
 80076c8:	42be      	cmp	r6, r7
 80076ca:	d900      	bls.n	80076ce <__ssputs_r+0x72>
 80076cc:	463e      	mov	r6, r7
 80076ce:	6820      	ldr	r0, [r4, #0]
 80076d0:	4632      	mov	r2, r6
 80076d2:	4641      	mov	r1, r8
 80076d4:	f000 fb64 	bl	8007da0 <memmove>
 80076d8:	68a3      	ldr	r3, [r4, #8]
 80076da:	1b9b      	subs	r3, r3, r6
 80076dc:	60a3      	str	r3, [r4, #8]
 80076de:	6823      	ldr	r3, [r4, #0]
 80076e0:	4433      	add	r3, r6
 80076e2:	6023      	str	r3, [r4, #0]
 80076e4:	2000      	movs	r0, #0
 80076e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076ea:	462a      	mov	r2, r5
 80076ec:	f000 fb89 	bl	8007e02 <_realloc_r>
 80076f0:	4606      	mov	r6, r0
 80076f2:	2800      	cmp	r0, #0
 80076f4:	d1e0      	bne.n	80076b8 <__ssputs_r+0x5c>
 80076f6:	6921      	ldr	r1, [r4, #16]
 80076f8:	4650      	mov	r0, sl
 80076fa:	f7ff feaf 	bl	800745c <_free_r>
 80076fe:	230c      	movs	r3, #12
 8007700:	f8ca 3000 	str.w	r3, [sl]
 8007704:	89a3      	ldrh	r3, [r4, #12]
 8007706:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800770a:	81a3      	strh	r3, [r4, #12]
 800770c:	f04f 30ff 	mov.w	r0, #4294967295
 8007710:	e7e9      	b.n	80076e6 <__ssputs_r+0x8a>
	...

08007714 <_svfiprintf_r>:
 8007714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007718:	4698      	mov	r8, r3
 800771a:	898b      	ldrh	r3, [r1, #12]
 800771c:	061b      	lsls	r3, r3, #24
 800771e:	b09d      	sub	sp, #116	@ 0x74
 8007720:	4607      	mov	r7, r0
 8007722:	460d      	mov	r5, r1
 8007724:	4614      	mov	r4, r2
 8007726:	d510      	bpl.n	800774a <_svfiprintf_r+0x36>
 8007728:	690b      	ldr	r3, [r1, #16]
 800772a:	b973      	cbnz	r3, 800774a <_svfiprintf_r+0x36>
 800772c:	2140      	movs	r1, #64	@ 0x40
 800772e:	f7ff ff09 	bl	8007544 <_malloc_r>
 8007732:	6028      	str	r0, [r5, #0]
 8007734:	6128      	str	r0, [r5, #16]
 8007736:	b930      	cbnz	r0, 8007746 <_svfiprintf_r+0x32>
 8007738:	230c      	movs	r3, #12
 800773a:	603b      	str	r3, [r7, #0]
 800773c:	f04f 30ff 	mov.w	r0, #4294967295
 8007740:	b01d      	add	sp, #116	@ 0x74
 8007742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007746:	2340      	movs	r3, #64	@ 0x40
 8007748:	616b      	str	r3, [r5, #20]
 800774a:	2300      	movs	r3, #0
 800774c:	9309      	str	r3, [sp, #36]	@ 0x24
 800774e:	2320      	movs	r3, #32
 8007750:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007754:	f8cd 800c 	str.w	r8, [sp, #12]
 8007758:	2330      	movs	r3, #48	@ 0x30
 800775a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80078f8 <_svfiprintf_r+0x1e4>
 800775e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007762:	f04f 0901 	mov.w	r9, #1
 8007766:	4623      	mov	r3, r4
 8007768:	469a      	mov	sl, r3
 800776a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800776e:	b10a      	cbz	r2, 8007774 <_svfiprintf_r+0x60>
 8007770:	2a25      	cmp	r2, #37	@ 0x25
 8007772:	d1f9      	bne.n	8007768 <_svfiprintf_r+0x54>
 8007774:	ebba 0b04 	subs.w	fp, sl, r4
 8007778:	d00b      	beq.n	8007792 <_svfiprintf_r+0x7e>
 800777a:	465b      	mov	r3, fp
 800777c:	4622      	mov	r2, r4
 800777e:	4629      	mov	r1, r5
 8007780:	4638      	mov	r0, r7
 8007782:	f7ff ff6b 	bl	800765c <__ssputs_r>
 8007786:	3001      	adds	r0, #1
 8007788:	f000 80a7 	beq.w	80078da <_svfiprintf_r+0x1c6>
 800778c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800778e:	445a      	add	r2, fp
 8007790:	9209      	str	r2, [sp, #36]	@ 0x24
 8007792:	f89a 3000 	ldrb.w	r3, [sl]
 8007796:	2b00      	cmp	r3, #0
 8007798:	f000 809f 	beq.w	80078da <_svfiprintf_r+0x1c6>
 800779c:	2300      	movs	r3, #0
 800779e:	f04f 32ff 	mov.w	r2, #4294967295
 80077a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077a6:	f10a 0a01 	add.w	sl, sl, #1
 80077aa:	9304      	str	r3, [sp, #16]
 80077ac:	9307      	str	r3, [sp, #28]
 80077ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80077b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80077b4:	4654      	mov	r4, sl
 80077b6:	2205      	movs	r2, #5
 80077b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077bc:	484e      	ldr	r0, [pc, #312]	@ (80078f8 <_svfiprintf_r+0x1e4>)
 80077be:	f7f8 fd1f 	bl	8000200 <memchr>
 80077c2:	9a04      	ldr	r2, [sp, #16]
 80077c4:	b9d8      	cbnz	r0, 80077fe <_svfiprintf_r+0xea>
 80077c6:	06d0      	lsls	r0, r2, #27
 80077c8:	bf44      	itt	mi
 80077ca:	2320      	movmi	r3, #32
 80077cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077d0:	0711      	lsls	r1, r2, #28
 80077d2:	bf44      	itt	mi
 80077d4:	232b      	movmi	r3, #43	@ 0x2b
 80077d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077da:	f89a 3000 	ldrb.w	r3, [sl]
 80077de:	2b2a      	cmp	r3, #42	@ 0x2a
 80077e0:	d015      	beq.n	800780e <_svfiprintf_r+0xfa>
 80077e2:	9a07      	ldr	r2, [sp, #28]
 80077e4:	4654      	mov	r4, sl
 80077e6:	2000      	movs	r0, #0
 80077e8:	f04f 0c0a 	mov.w	ip, #10
 80077ec:	4621      	mov	r1, r4
 80077ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077f2:	3b30      	subs	r3, #48	@ 0x30
 80077f4:	2b09      	cmp	r3, #9
 80077f6:	d94b      	bls.n	8007890 <_svfiprintf_r+0x17c>
 80077f8:	b1b0      	cbz	r0, 8007828 <_svfiprintf_r+0x114>
 80077fa:	9207      	str	r2, [sp, #28]
 80077fc:	e014      	b.n	8007828 <_svfiprintf_r+0x114>
 80077fe:	eba0 0308 	sub.w	r3, r0, r8
 8007802:	fa09 f303 	lsl.w	r3, r9, r3
 8007806:	4313      	orrs	r3, r2
 8007808:	9304      	str	r3, [sp, #16]
 800780a:	46a2      	mov	sl, r4
 800780c:	e7d2      	b.n	80077b4 <_svfiprintf_r+0xa0>
 800780e:	9b03      	ldr	r3, [sp, #12]
 8007810:	1d19      	adds	r1, r3, #4
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	9103      	str	r1, [sp, #12]
 8007816:	2b00      	cmp	r3, #0
 8007818:	bfbb      	ittet	lt
 800781a:	425b      	neglt	r3, r3
 800781c:	f042 0202 	orrlt.w	r2, r2, #2
 8007820:	9307      	strge	r3, [sp, #28]
 8007822:	9307      	strlt	r3, [sp, #28]
 8007824:	bfb8      	it	lt
 8007826:	9204      	strlt	r2, [sp, #16]
 8007828:	7823      	ldrb	r3, [r4, #0]
 800782a:	2b2e      	cmp	r3, #46	@ 0x2e
 800782c:	d10a      	bne.n	8007844 <_svfiprintf_r+0x130>
 800782e:	7863      	ldrb	r3, [r4, #1]
 8007830:	2b2a      	cmp	r3, #42	@ 0x2a
 8007832:	d132      	bne.n	800789a <_svfiprintf_r+0x186>
 8007834:	9b03      	ldr	r3, [sp, #12]
 8007836:	1d1a      	adds	r2, r3, #4
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	9203      	str	r2, [sp, #12]
 800783c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007840:	3402      	adds	r4, #2
 8007842:	9305      	str	r3, [sp, #20]
 8007844:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007908 <_svfiprintf_r+0x1f4>
 8007848:	7821      	ldrb	r1, [r4, #0]
 800784a:	2203      	movs	r2, #3
 800784c:	4650      	mov	r0, sl
 800784e:	f7f8 fcd7 	bl	8000200 <memchr>
 8007852:	b138      	cbz	r0, 8007864 <_svfiprintf_r+0x150>
 8007854:	9b04      	ldr	r3, [sp, #16]
 8007856:	eba0 000a 	sub.w	r0, r0, sl
 800785a:	2240      	movs	r2, #64	@ 0x40
 800785c:	4082      	lsls	r2, r0
 800785e:	4313      	orrs	r3, r2
 8007860:	3401      	adds	r4, #1
 8007862:	9304      	str	r3, [sp, #16]
 8007864:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007868:	4824      	ldr	r0, [pc, #144]	@ (80078fc <_svfiprintf_r+0x1e8>)
 800786a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800786e:	2206      	movs	r2, #6
 8007870:	f7f8 fcc6 	bl	8000200 <memchr>
 8007874:	2800      	cmp	r0, #0
 8007876:	d036      	beq.n	80078e6 <_svfiprintf_r+0x1d2>
 8007878:	4b21      	ldr	r3, [pc, #132]	@ (8007900 <_svfiprintf_r+0x1ec>)
 800787a:	bb1b      	cbnz	r3, 80078c4 <_svfiprintf_r+0x1b0>
 800787c:	9b03      	ldr	r3, [sp, #12]
 800787e:	3307      	adds	r3, #7
 8007880:	f023 0307 	bic.w	r3, r3, #7
 8007884:	3308      	adds	r3, #8
 8007886:	9303      	str	r3, [sp, #12]
 8007888:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800788a:	4433      	add	r3, r6
 800788c:	9309      	str	r3, [sp, #36]	@ 0x24
 800788e:	e76a      	b.n	8007766 <_svfiprintf_r+0x52>
 8007890:	fb0c 3202 	mla	r2, ip, r2, r3
 8007894:	460c      	mov	r4, r1
 8007896:	2001      	movs	r0, #1
 8007898:	e7a8      	b.n	80077ec <_svfiprintf_r+0xd8>
 800789a:	2300      	movs	r3, #0
 800789c:	3401      	adds	r4, #1
 800789e:	9305      	str	r3, [sp, #20]
 80078a0:	4619      	mov	r1, r3
 80078a2:	f04f 0c0a 	mov.w	ip, #10
 80078a6:	4620      	mov	r0, r4
 80078a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078ac:	3a30      	subs	r2, #48	@ 0x30
 80078ae:	2a09      	cmp	r2, #9
 80078b0:	d903      	bls.n	80078ba <_svfiprintf_r+0x1a6>
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d0c6      	beq.n	8007844 <_svfiprintf_r+0x130>
 80078b6:	9105      	str	r1, [sp, #20]
 80078b8:	e7c4      	b.n	8007844 <_svfiprintf_r+0x130>
 80078ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80078be:	4604      	mov	r4, r0
 80078c0:	2301      	movs	r3, #1
 80078c2:	e7f0      	b.n	80078a6 <_svfiprintf_r+0x192>
 80078c4:	ab03      	add	r3, sp, #12
 80078c6:	9300      	str	r3, [sp, #0]
 80078c8:	462a      	mov	r2, r5
 80078ca:	4b0e      	ldr	r3, [pc, #56]	@ (8007904 <_svfiprintf_r+0x1f0>)
 80078cc:	a904      	add	r1, sp, #16
 80078ce:	4638      	mov	r0, r7
 80078d0:	f3af 8000 	nop.w
 80078d4:	1c42      	adds	r2, r0, #1
 80078d6:	4606      	mov	r6, r0
 80078d8:	d1d6      	bne.n	8007888 <_svfiprintf_r+0x174>
 80078da:	89ab      	ldrh	r3, [r5, #12]
 80078dc:	065b      	lsls	r3, r3, #25
 80078de:	f53f af2d 	bmi.w	800773c <_svfiprintf_r+0x28>
 80078e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80078e4:	e72c      	b.n	8007740 <_svfiprintf_r+0x2c>
 80078e6:	ab03      	add	r3, sp, #12
 80078e8:	9300      	str	r3, [sp, #0]
 80078ea:	462a      	mov	r2, r5
 80078ec:	4b05      	ldr	r3, [pc, #20]	@ (8007904 <_svfiprintf_r+0x1f0>)
 80078ee:	a904      	add	r1, sp, #16
 80078f0:	4638      	mov	r0, r7
 80078f2:	f000 f879 	bl	80079e8 <_printf_i>
 80078f6:	e7ed      	b.n	80078d4 <_svfiprintf_r+0x1c0>
 80078f8:	08008519 	.word	0x08008519
 80078fc:	08008523 	.word	0x08008523
 8007900:	00000000 	.word	0x00000000
 8007904:	0800765d 	.word	0x0800765d
 8007908:	0800851f 	.word	0x0800851f

0800790c <_printf_common>:
 800790c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007910:	4616      	mov	r6, r2
 8007912:	4698      	mov	r8, r3
 8007914:	688a      	ldr	r2, [r1, #8]
 8007916:	690b      	ldr	r3, [r1, #16]
 8007918:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800791c:	4293      	cmp	r3, r2
 800791e:	bfb8      	it	lt
 8007920:	4613      	movlt	r3, r2
 8007922:	6033      	str	r3, [r6, #0]
 8007924:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007928:	4607      	mov	r7, r0
 800792a:	460c      	mov	r4, r1
 800792c:	b10a      	cbz	r2, 8007932 <_printf_common+0x26>
 800792e:	3301      	adds	r3, #1
 8007930:	6033      	str	r3, [r6, #0]
 8007932:	6823      	ldr	r3, [r4, #0]
 8007934:	0699      	lsls	r1, r3, #26
 8007936:	bf42      	ittt	mi
 8007938:	6833      	ldrmi	r3, [r6, #0]
 800793a:	3302      	addmi	r3, #2
 800793c:	6033      	strmi	r3, [r6, #0]
 800793e:	6825      	ldr	r5, [r4, #0]
 8007940:	f015 0506 	ands.w	r5, r5, #6
 8007944:	d106      	bne.n	8007954 <_printf_common+0x48>
 8007946:	f104 0a19 	add.w	sl, r4, #25
 800794a:	68e3      	ldr	r3, [r4, #12]
 800794c:	6832      	ldr	r2, [r6, #0]
 800794e:	1a9b      	subs	r3, r3, r2
 8007950:	42ab      	cmp	r3, r5
 8007952:	dc26      	bgt.n	80079a2 <_printf_common+0x96>
 8007954:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007958:	6822      	ldr	r2, [r4, #0]
 800795a:	3b00      	subs	r3, #0
 800795c:	bf18      	it	ne
 800795e:	2301      	movne	r3, #1
 8007960:	0692      	lsls	r2, r2, #26
 8007962:	d42b      	bmi.n	80079bc <_printf_common+0xb0>
 8007964:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007968:	4641      	mov	r1, r8
 800796a:	4638      	mov	r0, r7
 800796c:	47c8      	blx	r9
 800796e:	3001      	adds	r0, #1
 8007970:	d01e      	beq.n	80079b0 <_printf_common+0xa4>
 8007972:	6823      	ldr	r3, [r4, #0]
 8007974:	6922      	ldr	r2, [r4, #16]
 8007976:	f003 0306 	and.w	r3, r3, #6
 800797a:	2b04      	cmp	r3, #4
 800797c:	bf02      	ittt	eq
 800797e:	68e5      	ldreq	r5, [r4, #12]
 8007980:	6833      	ldreq	r3, [r6, #0]
 8007982:	1aed      	subeq	r5, r5, r3
 8007984:	68a3      	ldr	r3, [r4, #8]
 8007986:	bf0c      	ite	eq
 8007988:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800798c:	2500      	movne	r5, #0
 800798e:	4293      	cmp	r3, r2
 8007990:	bfc4      	itt	gt
 8007992:	1a9b      	subgt	r3, r3, r2
 8007994:	18ed      	addgt	r5, r5, r3
 8007996:	2600      	movs	r6, #0
 8007998:	341a      	adds	r4, #26
 800799a:	42b5      	cmp	r5, r6
 800799c:	d11a      	bne.n	80079d4 <_printf_common+0xc8>
 800799e:	2000      	movs	r0, #0
 80079a0:	e008      	b.n	80079b4 <_printf_common+0xa8>
 80079a2:	2301      	movs	r3, #1
 80079a4:	4652      	mov	r2, sl
 80079a6:	4641      	mov	r1, r8
 80079a8:	4638      	mov	r0, r7
 80079aa:	47c8      	blx	r9
 80079ac:	3001      	adds	r0, #1
 80079ae:	d103      	bne.n	80079b8 <_printf_common+0xac>
 80079b0:	f04f 30ff 	mov.w	r0, #4294967295
 80079b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079b8:	3501      	adds	r5, #1
 80079ba:	e7c6      	b.n	800794a <_printf_common+0x3e>
 80079bc:	18e1      	adds	r1, r4, r3
 80079be:	1c5a      	adds	r2, r3, #1
 80079c0:	2030      	movs	r0, #48	@ 0x30
 80079c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80079c6:	4422      	add	r2, r4
 80079c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80079cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80079d0:	3302      	adds	r3, #2
 80079d2:	e7c7      	b.n	8007964 <_printf_common+0x58>
 80079d4:	2301      	movs	r3, #1
 80079d6:	4622      	mov	r2, r4
 80079d8:	4641      	mov	r1, r8
 80079da:	4638      	mov	r0, r7
 80079dc:	47c8      	blx	r9
 80079de:	3001      	adds	r0, #1
 80079e0:	d0e6      	beq.n	80079b0 <_printf_common+0xa4>
 80079e2:	3601      	adds	r6, #1
 80079e4:	e7d9      	b.n	800799a <_printf_common+0x8e>
	...

080079e8 <_printf_i>:
 80079e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079ec:	7e0f      	ldrb	r7, [r1, #24]
 80079ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80079f0:	2f78      	cmp	r7, #120	@ 0x78
 80079f2:	4691      	mov	r9, r2
 80079f4:	4680      	mov	r8, r0
 80079f6:	460c      	mov	r4, r1
 80079f8:	469a      	mov	sl, r3
 80079fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80079fe:	d807      	bhi.n	8007a10 <_printf_i+0x28>
 8007a00:	2f62      	cmp	r7, #98	@ 0x62
 8007a02:	d80a      	bhi.n	8007a1a <_printf_i+0x32>
 8007a04:	2f00      	cmp	r7, #0
 8007a06:	f000 80d1 	beq.w	8007bac <_printf_i+0x1c4>
 8007a0a:	2f58      	cmp	r7, #88	@ 0x58
 8007a0c:	f000 80b8 	beq.w	8007b80 <_printf_i+0x198>
 8007a10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007a18:	e03a      	b.n	8007a90 <_printf_i+0xa8>
 8007a1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007a1e:	2b15      	cmp	r3, #21
 8007a20:	d8f6      	bhi.n	8007a10 <_printf_i+0x28>
 8007a22:	a101      	add	r1, pc, #4	@ (adr r1, 8007a28 <_printf_i+0x40>)
 8007a24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a28:	08007a81 	.word	0x08007a81
 8007a2c:	08007a95 	.word	0x08007a95
 8007a30:	08007a11 	.word	0x08007a11
 8007a34:	08007a11 	.word	0x08007a11
 8007a38:	08007a11 	.word	0x08007a11
 8007a3c:	08007a11 	.word	0x08007a11
 8007a40:	08007a95 	.word	0x08007a95
 8007a44:	08007a11 	.word	0x08007a11
 8007a48:	08007a11 	.word	0x08007a11
 8007a4c:	08007a11 	.word	0x08007a11
 8007a50:	08007a11 	.word	0x08007a11
 8007a54:	08007b93 	.word	0x08007b93
 8007a58:	08007abf 	.word	0x08007abf
 8007a5c:	08007b4d 	.word	0x08007b4d
 8007a60:	08007a11 	.word	0x08007a11
 8007a64:	08007a11 	.word	0x08007a11
 8007a68:	08007bb5 	.word	0x08007bb5
 8007a6c:	08007a11 	.word	0x08007a11
 8007a70:	08007abf 	.word	0x08007abf
 8007a74:	08007a11 	.word	0x08007a11
 8007a78:	08007a11 	.word	0x08007a11
 8007a7c:	08007b55 	.word	0x08007b55
 8007a80:	6833      	ldr	r3, [r6, #0]
 8007a82:	1d1a      	adds	r2, r3, #4
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	6032      	str	r2, [r6, #0]
 8007a88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007a90:	2301      	movs	r3, #1
 8007a92:	e09c      	b.n	8007bce <_printf_i+0x1e6>
 8007a94:	6833      	ldr	r3, [r6, #0]
 8007a96:	6820      	ldr	r0, [r4, #0]
 8007a98:	1d19      	adds	r1, r3, #4
 8007a9a:	6031      	str	r1, [r6, #0]
 8007a9c:	0606      	lsls	r6, r0, #24
 8007a9e:	d501      	bpl.n	8007aa4 <_printf_i+0xbc>
 8007aa0:	681d      	ldr	r5, [r3, #0]
 8007aa2:	e003      	b.n	8007aac <_printf_i+0xc4>
 8007aa4:	0645      	lsls	r5, r0, #25
 8007aa6:	d5fb      	bpl.n	8007aa0 <_printf_i+0xb8>
 8007aa8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007aac:	2d00      	cmp	r5, #0
 8007aae:	da03      	bge.n	8007ab8 <_printf_i+0xd0>
 8007ab0:	232d      	movs	r3, #45	@ 0x2d
 8007ab2:	426d      	negs	r5, r5
 8007ab4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ab8:	4858      	ldr	r0, [pc, #352]	@ (8007c1c <_printf_i+0x234>)
 8007aba:	230a      	movs	r3, #10
 8007abc:	e011      	b.n	8007ae2 <_printf_i+0xfa>
 8007abe:	6821      	ldr	r1, [r4, #0]
 8007ac0:	6833      	ldr	r3, [r6, #0]
 8007ac2:	0608      	lsls	r0, r1, #24
 8007ac4:	f853 5b04 	ldr.w	r5, [r3], #4
 8007ac8:	d402      	bmi.n	8007ad0 <_printf_i+0xe8>
 8007aca:	0649      	lsls	r1, r1, #25
 8007acc:	bf48      	it	mi
 8007ace:	b2ad      	uxthmi	r5, r5
 8007ad0:	2f6f      	cmp	r7, #111	@ 0x6f
 8007ad2:	4852      	ldr	r0, [pc, #328]	@ (8007c1c <_printf_i+0x234>)
 8007ad4:	6033      	str	r3, [r6, #0]
 8007ad6:	bf14      	ite	ne
 8007ad8:	230a      	movne	r3, #10
 8007ada:	2308      	moveq	r3, #8
 8007adc:	2100      	movs	r1, #0
 8007ade:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007ae2:	6866      	ldr	r6, [r4, #4]
 8007ae4:	60a6      	str	r6, [r4, #8]
 8007ae6:	2e00      	cmp	r6, #0
 8007ae8:	db05      	blt.n	8007af6 <_printf_i+0x10e>
 8007aea:	6821      	ldr	r1, [r4, #0]
 8007aec:	432e      	orrs	r6, r5
 8007aee:	f021 0104 	bic.w	r1, r1, #4
 8007af2:	6021      	str	r1, [r4, #0]
 8007af4:	d04b      	beq.n	8007b8e <_printf_i+0x1a6>
 8007af6:	4616      	mov	r6, r2
 8007af8:	fbb5 f1f3 	udiv	r1, r5, r3
 8007afc:	fb03 5711 	mls	r7, r3, r1, r5
 8007b00:	5dc7      	ldrb	r7, [r0, r7]
 8007b02:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007b06:	462f      	mov	r7, r5
 8007b08:	42bb      	cmp	r3, r7
 8007b0a:	460d      	mov	r5, r1
 8007b0c:	d9f4      	bls.n	8007af8 <_printf_i+0x110>
 8007b0e:	2b08      	cmp	r3, #8
 8007b10:	d10b      	bne.n	8007b2a <_printf_i+0x142>
 8007b12:	6823      	ldr	r3, [r4, #0]
 8007b14:	07df      	lsls	r7, r3, #31
 8007b16:	d508      	bpl.n	8007b2a <_printf_i+0x142>
 8007b18:	6923      	ldr	r3, [r4, #16]
 8007b1a:	6861      	ldr	r1, [r4, #4]
 8007b1c:	4299      	cmp	r1, r3
 8007b1e:	bfde      	ittt	le
 8007b20:	2330      	movle	r3, #48	@ 0x30
 8007b22:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007b26:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007b2a:	1b92      	subs	r2, r2, r6
 8007b2c:	6122      	str	r2, [r4, #16]
 8007b2e:	f8cd a000 	str.w	sl, [sp]
 8007b32:	464b      	mov	r3, r9
 8007b34:	aa03      	add	r2, sp, #12
 8007b36:	4621      	mov	r1, r4
 8007b38:	4640      	mov	r0, r8
 8007b3a:	f7ff fee7 	bl	800790c <_printf_common>
 8007b3e:	3001      	adds	r0, #1
 8007b40:	d14a      	bne.n	8007bd8 <_printf_i+0x1f0>
 8007b42:	f04f 30ff 	mov.w	r0, #4294967295
 8007b46:	b004      	add	sp, #16
 8007b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b4c:	6823      	ldr	r3, [r4, #0]
 8007b4e:	f043 0320 	orr.w	r3, r3, #32
 8007b52:	6023      	str	r3, [r4, #0]
 8007b54:	4832      	ldr	r0, [pc, #200]	@ (8007c20 <_printf_i+0x238>)
 8007b56:	2778      	movs	r7, #120	@ 0x78
 8007b58:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007b5c:	6823      	ldr	r3, [r4, #0]
 8007b5e:	6831      	ldr	r1, [r6, #0]
 8007b60:	061f      	lsls	r7, r3, #24
 8007b62:	f851 5b04 	ldr.w	r5, [r1], #4
 8007b66:	d402      	bmi.n	8007b6e <_printf_i+0x186>
 8007b68:	065f      	lsls	r7, r3, #25
 8007b6a:	bf48      	it	mi
 8007b6c:	b2ad      	uxthmi	r5, r5
 8007b6e:	6031      	str	r1, [r6, #0]
 8007b70:	07d9      	lsls	r1, r3, #31
 8007b72:	bf44      	itt	mi
 8007b74:	f043 0320 	orrmi.w	r3, r3, #32
 8007b78:	6023      	strmi	r3, [r4, #0]
 8007b7a:	b11d      	cbz	r5, 8007b84 <_printf_i+0x19c>
 8007b7c:	2310      	movs	r3, #16
 8007b7e:	e7ad      	b.n	8007adc <_printf_i+0xf4>
 8007b80:	4826      	ldr	r0, [pc, #152]	@ (8007c1c <_printf_i+0x234>)
 8007b82:	e7e9      	b.n	8007b58 <_printf_i+0x170>
 8007b84:	6823      	ldr	r3, [r4, #0]
 8007b86:	f023 0320 	bic.w	r3, r3, #32
 8007b8a:	6023      	str	r3, [r4, #0]
 8007b8c:	e7f6      	b.n	8007b7c <_printf_i+0x194>
 8007b8e:	4616      	mov	r6, r2
 8007b90:	e7bd      	b.n	8007b0e <_printf_i+0x126>
 8007b92:	6833      	ldr	r3, [r6, #0]
 8007b94:	6825      	ldr	r5, [r4, #0]
 8007b96:	6961      	ldr	r1, [r4, #20]
 8007b98:	1d18      	adds	r0, r3, #4
 8007b9a:	6030      	str	r0, [r6, #0]
 8007b9c:	062e      	lsls	r6, r5, #24
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	d501      	bpl.n	8007ba6 <_printf_i+0x1be>
 8007ba2:	6019      	str	r1, [r3, #0]
 8007ba4:	e002      	b.n	8007bac <_printf_i+0x1c4>
 8007ba6:	0668      	lsls	r0, r5, #25
 8007ba8:	d5fb      	bpl.n	8007ba2 <_printf_i+0x1ba>
 8007baa:	8019      	strh	r1, [r3, #0]
 8007bac:	2300      	movs	r3, #0
 8007bae:	6123      	str	r3, [r4, #16]
 8007bb0:	4616      	mov	r6, r2
 8007bb2:	e7bc      	b.n	8007b2e <_printf_i+0x146>
 8007bb4:	6833      	ldr	r3, [r6, #0]
 8007bb6:	1d1a      	adds	r2, r3, #4
 8007bb8:	6032      	str	r2, [r6, #0]
 8007bba:	681e      	ldr	r6, [r3, #0]
 8007bbc:	6862      	ldr	r2, [r4, #4]
 8007bbe:	2100      	movs	r1, #0
 8007bc0:	4630      	mov	r0, r6
 8007bc2:	f7f8 fb1d 	bl	8000200 <memchr>
 8007bc6:	b108      	cbz	r0, 8007bcc <_printf_i+0x1e4>
 8007bc8:	1b80      	subs	r0, r0, r6
 8007bca:	6060      	str	r0, [r4, #4]
 8007bcc:	6863      	ldr	r3, [r4, #4]
 8007bce:	6123      	str	r3, [r4, #16]
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bd6:	e7aa      	b.n	8007b2e <_printf_i+0x146>
 8007bd8:	6923      	ldr	r3, [r4, #16]
 8007bda:	4632      	mov	r2, r6
 8007bdc:	4649      	mov	r1, r9
 8007bde:	4640      	mov	r0, r8
 8007be0:	47d0      	blx	sl
 8007be2:	3001      	adds	r0, #1
 8007be4:	d0ad      	beq.n	8007b42 <_printf_i+0x15a>
 8007be6:	6823      	ldr	r3, [r4, #0]
 8007be8:	079b      	lsls	r3, r3, #30
 8007bea:	d413      	bmi.n	8007c14 <_printf_i+0x22c>
 8007bec:	68e0      	ldr	r0, [r4, #12]
 8007bee:	9b03      	ldr	r3, [sp, #12]
 8007bf0:	4298      	cmp	r0, r3
 8007bf2:	bfb8      	it	lt
 8007bf4:	4618      	movlt	r0, r3
 8007bf6:	e7a6      	b.n	8007b46 <_printf_i+0x15e>
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	4632      	mov	r2, r6
 8007bfc:	4649      	mov	r1, r9
 8007bfe:	4640      	mov	r0, r8
 8007c00:	47d0      	blx	sl
 8007c02:	3001      	adds	r0, #1
 8007c04:	d09d      	beq.n	8007b42 <_printf_i+0x15a>
 8007c06:	3501      	adds	r5, #1
 8007c08:	68e3      	ldr	r3, [r4, #12]
 8007c0a:	9903      	ldr	r1, [sp, #12]
 8007c0c:	1a5b      	subs	r3, r3, r1
 8007c0e:	42ab      	cmp	r3, r5
 8007c10:	dcf2      	bgt.n	8007bf8 <_printf_i+0x210>
 8007c12:	e7eb      	b.n	8007bec <_printf_i+0x204>
 8007c14:	2500      	movs	r5, #0
 8007c16:	f104 0619 	add.w	r6, r4, #25
 8007c1a:	e7f5      	b.n	8007c08 <_printf_i+0x220>
 8007c1c:	0800852a 	.word	0x0800852a
 8007c20:	0800853b 	.word	0x0800853b

08007c24 <__sflush_r>:
 8007c24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c2c:	0716      	lsls	r6, r2, #28
 8007c2e:	4605      	mov	r5, r0
 8007c30:	460c      	mov	r4, r1
 8007c32:	d454      	bmi.n	8007cde <__sflush_r+0xba>
 8007c34:	684b      	ldr	r3, [r1, #4]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	dc02      	bgt.n	8007c40 <__sflush_r+0x1c>
 8007c3a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	dd48      	ble.n	8007cd2 <__sflush_r+0xae>
 8007c40:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007c42:	2e00      	cmp	r6, #0
 8007c44:	d045      	beq.n	8007cd2 <__sflush_r+0xae>
 8007c46:	2300      	movs	r3, #0
 8007c48:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007c4c:	682f      	ldr	r7, [r5, #0]
 8007c4e:	6a21      	ldr	r1, [r4, #32]
 8007c50:	602b      	str	r3, [r5, #0]
 8007c52:	d030      	beq.n	8007cb6 <__sflush_r+0x92>
 8007c54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007c56:	89a3      	ldrh	r3, [r4, #12]
 8007c58:	0759      	lsls	r1, r3, #29
 8007c5a:	d505      	bpl.n	8007c68 <__sflush_r+0x44>
 8007c5c:	6863      	ldr	r3, [r4, #4]
 8007c5e:	1ad2      	subs	r2, r2, r3
 8007c60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007c62:	b10b      	cbz	r3, 8007c68 <__sflush_r+0x44>
 8007c64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007c66:	1ad2      	subs	r2, r2, r3
 8007c68:	2300      	movs	r3, #0
 8007c6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007c6c:	6a21      	ldr	r1, [r4, #32]
 8007c6e:	4628      	mov	r0, r5
 8007c70:	47b0      	blx	r6
 8007c72:	1c43      	adds	r3, r0, #1
 8007c74:	89a3      	ldrh	r3, [r4, #12]
 8007c76:	d106      	bne.n	8007c86 <__sflush_r+0x62>
 8007c78:	6829      	ldr	r1, [r5, #0]
 8007c7a:	291d      	cmp	r1, #29
 8007c7c:	d82b      	bhi.n	8007cd6 <__sflush_r+0xb2>
 8007c7e:	4a2a      	ldr	r2, [pc, #168]	@ (8007d28 <__sflush_r+0x104>)
 8007c80:	40ca      	lsrs	r2, r1
 8007c82:	07d6      	lsls	r6, r2, #31
 8007c84:	d527      	bpl.n	8007cd6 <__sflush_r+0xb2>
 8007c86:	2200      	movs	r2, #0
 8007c88:	6062      	str	r2, [r4, #4]
 8007c8a:	04d9      	lsls	r1, r3, #19
 8007c8c:	6922      	ldr	r2, [r4, #16]
 8007c8e:	6022      	str	r2, [r4, #0]
 8007c90:	d504      	bpl.n	8007c9c <__sflush_r+0x78>
 8007c92:	1c42      	adds	r2, r0, #1
 8007c94:	d101      	bne.n	8007c9a <__sflush_r+0x76>
 8007c96:	682b      	ldr	r3, [r5, #0]
 8007c98:	b903      	cbnz	r3, 8007c9c <__sflush_r+0x78>
 8007c9a:	6560      	str	r0, [r4, #84]	@ 0x54
 8007c9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c9e:	602f      	str	r7, [r5, #0]
 8007ca0:	b1b9      	cbz	r1, 8007cd2 <__sflush_r+0xae>
 8007ca2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ca6:	4299      	cmp	r1, r3
 8007ca8:	d002      	beq.n	8007cb0 <__sflush_r+0x8c>
 8007caa:	4628      	mov	r0, r5
 8007cac:	f7ff fbd6 	bl	800745c <_free_r>
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	6363      	str	r3, [r4, #52]	@ 0x34
 8007cb4:	e00d      	b.n	8007cd2 <__sflush_r+0xae>
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	4628      	mov	r0, r5
 8007cba:	47b0      	blx	r6
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	1c50      	adds	r0, r2, #1
 8007cc0:	d1c9      	bne.n	8007c56 <__sflush_r+0x32>
 8007cc2:	682b      	ldr	r3, [r5, #0]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d0c6      	beq.n	8007c56 <__sflush_r+0x32>
 8007cc8:	2b1d      	cmp	r3, #29
 8007cca:	d001      	beq.n	8007cd0 <__sflush_r+0xac>
 8007ccc:	2b16      	cmp	r3, #22
 8007cce:	d11e      	bne.n	8007d0e <__sflush_r+0xea>
 8007cd0:	602f      	str	r7, [r5, #0]
 8007cd2:	2000      	movs	r0, #0
 8007cd4:	e022      	b.n	8007d1c <__sflush_r+0xf8>
 8007cd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cda:	b21b      	sxth	r3, r3
 8007cdc:	e01b      	b.n	8007d16 <__sflush_r+0xf2>
 8007cde:	690f      	ldr	r7, [r1, #16]
 8007ce0:	2f00      	cmp	r7, #0
 8007ce2:	d0f6      	beq.n	8007cd2 <__sflush_r+0xae>
 8007ce4:	0793      	lsls	r3, r2, #30
 8007ce6:	680e      	ldr	r6, [r1, #0]
 8007ce8:	bf08      	it	eq
 8007cea:	694b      	ldreq	r3, [r1, #20]
 8007cec:	600f      	str	r7, [r1, #0]
 8007cee:	bf18      	it	ne
 8007cf0:	2300      	movne	r3, #0
 8007cf2:	eba6 0807 	sub.w	r8, r6, r7
 8007cf6:	608b      	str	r3, [r1, #8]
 8007cf8:	f1b8 0f00 	cmp.w	r8, #0
 8007cfc:	dde9      	ble.n	8007cd2 <__sflush_r+0xae>
 8007cfe:	6a21      	ldr	r1, [r4, #32]
 8007d00:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007d02:	4643      	mov	r3, r8
 8007d04:	463a      	mov	r2, r7
 8007d06:	4628      	mov	r0, r5
 8007d08:	47b0      	blx	r6
 8007d0a:	2800      	cmp	r0, #0
 8007d0c:	dc08      	bgt.n	8007d20 <__sflush_r+0xfc>
 8007d0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d16:	81a3      	strh	r3, [r4, #12]
 8007d18:	f04f 30ff 	mov.w	r0, #4294967295
 8007d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d20:	4407      	add	r7, r0
 8007d22:	eba8 0800 	sub.w	r8, r8, r0
 8007d26:	e7e7      	b.n	8007cf8 <__sflush_r+0xd4>
 8007d28:	20400001 	.word	0x20400001

08007d2c <_fflush_r>:
 8007d2c:	b538      	push	{r3, r4, r5, lr}
 8007d2e:	690b      	ldr	r3, [r1, #16]
 8007d30:	4605      	mov	r5, r0
 8007d32:	460c      	mov	r4, r1
 8007d34:	b913      	cbnz	r3, 8007d3c <_fflush_r+0x10>
 8007d36:	2500      	movs	r5, #0
 8007d38:	4628      	mov	r0, r5
 8007d3a:	bd38      	pop	{r3, r4, r5, pc}
 8007d3c:	b118      	cbz	r0, 8007d46 <_fflush_r+0x1a>
 8007d3e:	6a03      	ldr	r3, [r0, #32]
 8007d40:	b90b      	cbnz	r3, 8007d46 <_fflush_r+0x1a>
 8007d42:	f7ff f9c5 	bl	80070d0 <__sinit>
 8007d46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d0f3      	beq.n	8007d36 <_fflush_r+0xa>
 8007d4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007d50:	07d0      	lsls	r0, r2, #31
 8007d52:	d404      	bmi.n	8007d5e <_fflush_r+0x32>
 8007d54:	0599      	lsls	r1, r3, #22
 8007d56:	d402      	bmi.n	8007d5e <_fflush_r+0x32>
 8007d58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d5a:	f7ff fb50 	bl	80073fe <__retarget_lock_acquire_recursive>
 8007d5e:	4628      	mov	r0, r5
 8007d60:	4621      	mov	r1, r4
 8007d62:	f7ff ff5f 	bl	8007c24 <__sflush_r>
 8007d66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d68:	07da      	lsls	r2, r3, #31
 8007d6a:	4605      	mov	r5, r0
 8007d6c:	d4e4      	bmi.n	8007d38 <_fflush_r+0xc>
 8007d6e:	89a3      	ldrh	r3, [r4, #12]
 8007d70:	059b      	lsls	r3, r3, #22
 8007d72:	d4e1      	bmi.n	8007d38 <_fflush_r+0xc>
 8007d74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d76:	f7ff fb43 	bl	8007400 <__retarget_lock_release_recursive>
 8007d7a:	e7dd      	b.n	8007d38 <_fflush_r+0xc>

08007d7c <fiprintf>:
 8007d7c:	b40e      	push	{r1, r2, r3}
 8007d7e:	b503      	push	{r0, r1, lr}
 8007d80:	4601      	mov	r1, r0
 8007d82:	ab03      	add	r3, sp, #12
 8007d84:	4805      	ldr	r0, [pc, #20]	@ (8007d9c <fiprintf+0x20>)
 8007d86:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d8a:	6800      	ldr	r0, [r0, #0]
 8007d8c:	9301      	str	r3, [sp, #4]
 8007d8e:	f000 f88f 	bl	8007eb0 <_vfiprintf_r>
 8007d92:	b002      	add	sp, #8
 8007d94:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d98:	b003      	add	sp, #12
 8007d9a:	4770      	bx	lr
 8007d9c:	2000001c 	.word	0x2000001c

08007da0 <memmove>:
 8007da0:	4288      	cmp	r0, r1
 8007da2:	b510      	push	{r4, lr}
 8007da4:	eb01 0402 	add.w	r4, r1, r2
 8007da8:	d902      	bls.n	8007db0 <memmove+0x10>
 8007daa:	4284      	cmp	r4, r0
 8007dac:	4623      	mov	r3, r4
 8007dae:	d807      	bhi.n	8007dc0 <memmove+0x20>
 8007db0:	1e43      	subs	r3, r0, #1
 8007db2:	42a1      	cmp	r1, r4
 8007db4:	d008      	beq.n	8007dc8 <memmove+0x28>
 8007db6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007dba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007dbe:	e7f8      	b.n	8007db2 <memmove+0x12>
 8007dc0:	4402      	add	r2, r0
 8007dc2:	4601      	mov	r1, r0
 8007dc4:	428a      	cmp	r2, r1
 8007dc6:	d100      	bne.n	8007dca <memmove+0x2a>
 8007dc8:	bd10      	pop	{r4, pc}
 8007dca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007dce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007dd2:	e7f7      	b.n	8007dc4 <memmove+0x24>

08007dd4 <_sbrk_r>:
 8007dd4:	b538      	push	{r3, r4, r5, lr}
 8007dd6:	4d06      	ldr	r5, [pc, #24]	@ (8007df0 <_sbrk_r+0x1c>)
 8007dd8:	2300      	movs	r3, #0
 8007dda:	4604      	mov	r4, r0
 8007ddc:	4608      	mov	r0, r1
 8007dde:	602b      	str	r3, [r5, #0]
 8007de0:	f7f9 f906 	bl	8000ff0 <_sbrk>
 8007de4:	1c43      	adds	r3, r0, #1
 8007de6:	d102      	bne.n	8007dee <_sbrk_r+0x1a>
 8007de8:	682b      	ldr	r3, [r5, #0]
 8007dea:	b103      	cbz	r3, 8007dee <_sbrk_r+0x1a>
 8007dec:	6023      	str	r3, [r4, #0]
 8007dee:	bd38      	pop	{r3, r4, r5, pc}
 8007df0:	20004ce0 	.word	0x20004ce0

08007df4 <abort>:
 8007df4:	b508      	push	{r3, lr}
 8007df6:	2006      	movs	r0, #6
 8007df8:	f000 fa2e 	bl	8008258 <raise>
 8007dfc:	2001      	movs	r0, #1
 8007dfe:	f7f9 f87e 	bl	8000efe <_exit>

08007e02 <_realloc_r>:
 8007e02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e06:	4607      	mov	r7, r0
 8007e08:	4614      	mov	r4, r2
 8007e0a:	460d      	mov	r5, r1
 8007e0c:	b921      	cbnz	r1, 8007e18 <_realloc_r+0x16>
 8007e0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e12:	4611      	mov	r1, r2
 8007e14:	f7ff bb96 	b.w	8007544 <_malloc_r>
 8007e18:	b92a      	cbnz	r2, 8007e26 <_realloc_r+0x24>
 8007e1a:	f7ff fb1f 	bl	800745c <_free_r>
 8007e1e:	4625      	mov	r5, r4
 8007e20:	4628      	mov	r0, r5
 8007e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e26:	f000 fa33 	bl	8008290 <_malloc_usable_size_r>
 8007e2a:	4284      	cmp	r4, r0
 8007e2c:	4606      	mov	r6, r0
 8007e2e:	d802      	bhi.n	8007e36 <_realloc_r+0x34>
 8007e30:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007e34:	d8f4      	bhi.n	8007e20 <_realloc_r+0x1e>
 8007e36:	4621      	mov	r1, r4
 8007e38:	4638      	mov	r0, r7
 8007e3a:	f7ff fb83 	bl	8007544 <_malloc_r>
 8007e3e:	4680      	mov	r8, r0
 8007e40:	b908      	cbnz	r0, 8007e46 <_realloc_r+0x44>
 8007e42:	4645      	mov	r5, r8
 8007e44:	e7ec      	b.n	8007e20 <_realloc_r+0x1e>
 8007e46:	42b4      	cmp	r4, r6
 8007e48:	4622      	mov	r2, r4
 8007e4a:	4629      	mov	r1, r5
 8007e4c:	bf28      	it	cs
 8007e4e:	4632      	movcs	r2, r6
 8007e50:	f7ff fad7 	bl	8007402 <memcpy>
 8007e54:	4629      	mov	r1, r5
 8007e56:	4638      	mov	r0, r7
 8007e58:	f7ff fb00 	bl	800745c <_free_r>
 8007e5c:	e7f1      	b.n	8007e42 <_realloc_r+0x40>

08007e5e <__sfputc_r>:
 8007e5e:	6893      	ldr	r3, [r2, #8]
 8007e60:	3b01      	subs	r3, #1
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	b410      	push	{r4}
 8007e66:	6093      	str	r3, [r2, #8]
 8007e68:	da08      	bge.n	8007e7c <__sfputc_r+0x1e>
 8007e6a:	6994      	ldr	r4, [r2, #24]
 8007e6c:	42a3      	cmp	r3, r4
 8007e6e:	db01      	blt.n	8007e74 <__sfputc_r+0x16>
 8007e70:	290a      	cmp	r1, #10
 8007e72:	d103      	bne.n	8007e7c <__sfputc_r+0x1e>
 8007e74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e78:	f000 b932 	b.w	80080e0 <__swbuf_r>
 8007e7c:	6813      	ldr	r3, [r2, #0]
 8007e7e:	1c58      	adds	r0, r3, #1
 8007e80:	6010      	str	r0, [r2, #0]
 8007e82:	7019      	strb	r1, [r3, #0]
 8007e84:	4608      	mov	r0, r1
 8007e86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <__sfputs_r>:
 8007e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e8e:	4606      	mov	r6, r0
 8007e90:	460f      	mov	r7, r1
 8007e92:	4614      	mov	r4, r2
 8007e94:	18d5      	adds	r5, r2, r3
 8007e96:	42ac      	cmp	r4, r5
 8007e98:	d101      	bne.n	8007e9e <__sfputs_r+0x12>
 8007e9a:	2000      	movs	r0, #0
 8007e9c:	e007      	b.n	8007eae <__sfputs_r+0x22>
 8007e9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ea2:	463a      	mov	r2, r7
 8007ea4:	4630      	mov	r0, r6
 8007ea6:	f7ff ffda 	bl	8007e5e <__sfputc_r>
 8007eaa:	1c43      	adds	r3, r0, #1
 8007eac:	d1f3      	bne.n	8007e96 <__sfputs_r+0xa>
 8007eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007eb0 <_vfiprintf_r>:
 8007eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eb4:	460d      	mov	r5, r1
 8007eb6:	b09d      	sub	sp, #116	@ 0x74
 8007eb8:	4614      	mov	r4, r2
 8007eba:	4698      	mov	r8, r3
 8007ebc:	4606      	mov	r6, r0
 8007ebe:	b118      	cbz	r0, 8007ec8 <_vfiprintf_r+0x18>
 8007ec0:	6a03      	ldr	r3, [r0, #32]
 8007ec2:	b90b      	cbnz	r3, 8007ec8 <_vfiprintf_r+0x18>
 8007ec4:	f7ff f904 	bl	80070d0 <__sinit>
 8007ec8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007eca:	07d9      	lsls	r1, r3, #31
 8007ecc:	d405      	bmi.n	8007eda <_vfiprintf_r+0x2a>
 8007ece:	89ab      	ldrh	r3, [r5, #12]
 8007ed0:	059a      	lsls	r2, r3, #22
 8007ed2:	d402      	bmi.n	8007eda <_vfiprintf_r+0x2a>
 8007ed4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ed6:	f7ff fa92 	bl	80073fe <__retarget_lock_acquire_recursive>
 8007eda:	89ab      	ldrh	r3, [r5, #12]
 8007edc:	071b      	lsls	r3, r3, #28
 8007ede:	d501      	bpl.n	8007ee4 <_vfiprintf_r+0x34>
 8007ee0:	692b      	ldr	r3, [r5, #16]
 8007ee2:	b99b      	cbnz	r3, 8007f0c <_vfiprintf_r+0x5c>
 8007ee4:	4629      	mov	r1, r5
 8007ee6:	4630      	mov	r0, r6
 8007ee8:	f000 f938 	bl	800815c <__swsetup_r>
 8007eec:	b170      	cbz	r0, 8007f0c <_vfiprintf_r+0x5c>
 8007eee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ef0:	07dc      	lsls	r4, r3, #31
 8007ef2:	d504      	bpl.n	8007efe <_vfiprintf_r+0x4e>
 8007ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef8:	b01d      	add	sp, #116	@ 0x74
 8007efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007efe:	89ab      	ldrh	r3, [r5, #12]
 8007f00:	0598      	lsls	r0, r3, #22
 8007f02:	d4f7      	bmi.n	8007ef4 <_vfiprintf_r+0x44>
 8007f04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f06:	f7ff fa7b 	bl	8007400 <__retarget_lock_release_recursive>
 8007f0a:	e7f3      	b.n	8007ef4 <_vfiprintf_r+0x44>
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f10:	2320      	movs	r3, #32
 8007f12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007f16:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f1a:	2330      	movs	r3, #48	@ 0x30
 8007f1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80080cc <_vfiprintf_r+0x21c>
 8007f20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007f24:	f04f 0901 	mov.w	r9, #1
 8007f28:	4623      	mov	r3, r4
 8007f2a:	469a      	mov	sl, r3
 8007f2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f30:	b10a      	cbz	r2, 8007f36 <_vfiprintf_r+0x86>
 8007f32:	2a25      	cmp	r2, #37	@ 0x25
 8007f34:	d1f9      	bne.n	8007f2a <_vfiprintf_r+0x7a>
 8007f36:	ebba 0b04 	subs.w	fp, sl, r4
 8007f3a:	d00b      	beq.n	8007f54 <_vfiprintf_r+0xa4>
 8007f3c:	465b      	mov	r3, fp
 8007f3e:	4622      	mov	r2, r4
 8007f40:	4629      	mov	r1, r5
 8007f42:	4630      	mov	r0, r6
 8007f44:	f7ff ffa2 	bl	8007e8c <__sfputs_r>
 8007f48:	3001      	adds	r0, #1
 8007f4a:	f000 80a7 	beq.w	800809c <_vfiprintf_r+0x1ec>
 8007f4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f50:	445a      	add	r2, fp
 8007f52:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f54:	f89a 3000 	ldrb.w	r3, [sl]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	f000 809f 	beq.w	800809c <_vfiprintf_r+0x1ec>
 8007f5e:	2300      	movs	r3, #0
 8007f60:	f04f 32ff 	mov.w	r2, #4294967295
 8007f64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f68:	f10a 0a01 	add.w	sl, sl, #1
 8007f6c:	9304      	str	r3, [sp, #16]
 8007f6e:	9307      	str	r3, [sp, #28]
 8007f70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007f74:	931a      	str	r3, [sp, #104]	@ 0x68
 8007f76:	4654      	mov	r4, sl
 8007f78:	2205      	movs	r2, #5
 8007f7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f7e:	4853      	ldr	r0, [pc, #332]	@ (80080cc <_vfiprintf_r+0x21c>)
 8007f80:	f7f8 f93e 	bl	8000200 <memchr>
 8007f84:	9a04      	ldr	r2, [sp, #16]
 8007f86:	b9d8      	cbnz	r0, 8007fc0 <_vfiprintf_r+0x110>
 8007f88:	06d1      	lsls	r1, r2, #27
 8007f8a:	bf44      	itt	mi
 8007f8c:	2320      	movmi	r3, #32
 8007f8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f92:	0713      	lsls	r3, r2, #28
 8007f94:	bf44      	itt	mi
 8007f96:	232b      	movmi	r3, #43	@ 0x2b
 8007f98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f9c:	f89a 3000 	ldrb.w	r3, [sl]
 8007fa0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007fa2:	d015      	beq.n	8007fd0 <_vfiprintf_r+0x120>
 8007fa4:	9a07      	ldr	r2, [sp, #28]
 8007fa6:	4654      	mov	r4, sl
 8007fa8:	2000      	movs	r0, #0
 8007faa:	f04f 0c0a 	mov.w	ip, #10
 8007fae:	4621      	mov	r1, r4
 8007fb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fb4:	3b30      	subs	r3, #48	@ 0x30
 8007fb6:	2b09      	cmp	r3, #9
 8007fb8:	d94b      	bls.n	8008052 <_vfiprintf_r+0x1a2>
 8007fba:	b1b0      	cbz	r0, 8007fea <_vfiprintf_r+0x13a>
 8007fbc:	9207      	str	r2, [sp, #28]
 8007fbe:	e014      	b.n	8007fea <_vfiprintf_r+0x13a>
 8007fc0:	eba0 0308 	sub.w	r3, r0, r8
 8007fc4:	fa09 f303 	lsl.w	r3, r9, r3
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	9304      	str	r3, [sp, #16]
 8007fcc:	46a2      	mov	sl, r4
 8007fce:	e7d2      	b.n	8007f76 <_vfiprintf_r+0xc6>
 8007fd0:	9b03      	ldr	r3, [sp, #12]
 8007fd2:	1d19      	adds	r1, r3, #4
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	9103      	str	r1, [sp, #12]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	bfbb      	ittet	lt
 8007fdc:	425b      	neglt	r3, r3
 8007fde:	f042 0202 	orrlt.w	r2, r2, #2
 8007fe2:	9307      	strge	r3, [sp, #28]
 8007fe4:	9307      	strlt	r3, [sp, #28]
 8007fe6:	bfb8      	it	lt
 8007fe8:	9204      	strlt	r2, [sp, #16]
 8007fea:	7823      	ldrb	r3, [r4, #0]
 8007fec:	2b2e      	cmp	r3, #46	@ 0x2e
 8007fee:	d10a      	bne.n	8008006 <_vfiprintf_r+0x156>
 8007ff0:	7863      	ldrb	r3, [r4, #1]
 8007ff2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ff4:	d132      	bne.n	800805c <_vfiprintf_r+0x1ac>
 8007ff6:	9b03      	ldr	r3, [sp, #12]
 8007ff8:	1d1a      	adds	r2, r3, #4
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	9203      	str	r2, [sp, #12]
 8007ffe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008002:	3402      	adds	r4, #2
 8008004:	9305      	str	r3, [sp, #20]
 8008006:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80080dc <_vfiprintf_r+0x22c>
 800800a:	7821      	ldrb	r1, [r4, #0]
 800800c:	2203      	movs	r2, #3
 800800e:	4650      	mov	r0, sl
 8008010:	f7f8 f8f6 	bl	8000200 <memchr>
 8008014:	b138      	cbz	r0, 8008026 <_vfiprintf_r+0x176>
 8008016:	9b04      	ldr	r3, [sp, #16]
 8008018:	eba0 000a 	sub.w	r0, r0, sl
 800801c:	2240      	movs	r2, #64	@ 0x40
 800801e:	4082      	lsls	r2, r0
 8008020:	4313      	orrs	r3, r2
 8008022:	3401      	adds	r4, #1
 8008024:	9304      	str	r3, [sp, #16]
 8008026:	f814 1b01 	ldrb.w	r1, [r4], #1
 800802a:	4829      	ldr	r0, [pc, #164]	@ (80080d0 <_vfiprintf_r+0x220>)
 800802c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008030:	2206      	movs	r2, #6
 8008032:	f7f8 f8e5 	bl	8000200 <memchr>
 8008036:	2800      	cmp	r0, #0
 8008038:	d03f      	beq.n	80080ba <_vfiprintf_r+0x20a>
 800803a:	4b26      	ldr	r3, [pc, #152]	@ (80080d4 <_vfiprintf_r+0x224>)
 800803c:	bb1b      	cbnz	r3, 8008086 <_vfiprintf_r+0x1d6>
 800803e:	9b03      	ldr	r3, [sp, #12]
 8008040:	3307      	adds	r3, #7
 8008042:	f023 0307 	bic.w	r3, r3, #7
 8008046:	3308      	adds	r3, #8
 8008048:	9303      	str	r3, [sp, #12]
 800804a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800804c:	443b      	add	r3, r7
 800804e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008050:	e76a      	b.n	8007f28 <_vfiprintf_r+0x78>
 8008052:	fb0c 3202 	mla	r2, ip, r2, r3
 8008056:	460c      	mov	r4, r1
 8008058:	2001      	movs	r0, #1
 800805a:	e7a8      	b.n	8007fae <_vfiprintf_r+0xfe>
 800805c:	2300      	movs	r3, #0
 800805e:	3401      	adds	r4, #1
 8008060:	9305      	str	r3, [sp, #20]
 8008062:	4619      	mov	r1, r3
 8008064:	f04f 0c0a 	mov.w	ip, #10
 8008068:	4620      	mov	r0, r4
 800806a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800806e:	3a30      	subs	r2, #48	@ 0x30
 8008070:	2a09      	cmp	r2, #9
 8008072:	d903      	bls.n	800807c <_vfiprintf_r+0x1cc>
 8008074:	2b00      	cmp	r3, #0
 8008076:	d0c6      	beq.n	8008006 <_vfiprintf_r+0x156>
 8008078:	9105      	str	r1, [sp, #20]
 800807a:	e7c4      	b.n	8008006 <_vfiprintf_r+0x156>
 800807c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008080:	4604      	mov	r4, r0
 8008082:	2301      	movs	r3, #1
 8008084:	e7f0      	b.n	8008068 <_vfiprintf_r+0x1b8>
 8008086:	ab03      	add	r3, sp, #12
 8008088:	9300      	str	r3, [sp, #0]
 800808a:	462a      	mov	r2, r5
 800808c:	4b12      	ldr	r3, [pc, #72]	@ (80080d8 <_vfiprintf_r+0x228>)
 800808e:	a904      	add	r1, sp, #16
 8008090:	4630      	mov	r0, r6
 8008092:	f3af 8000 	nop.w
 8008096:	4607      	mov	r7, r0
 8008098:	1c78      	adds	r0, r7, #1
 800809a:	d1d6      	bne.n	800804a <_vfiprintf_r+0x19a>
 800809c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800809e:	07d9      	lsls	r1, r3, #31
 80080a0:	d405      	bmi.n	80080ae <_vfiprintf_r+0x1fe>
 80080a2:	89ab      	ldrh	r3, [r5, #12]
 80080a4:	059a      	lsls	r2, r3, #22
 80080a6:	d402      	bmi.n	80080ae <_vfiprintf_r+0x1fe>
 80080a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80080aa:	f7ff f9a9 	bl	8007400 <__retarget_lock_release_recursive>
 80080ae:	89ab      	ldrh	r3, [r5, #12]
 80080b0:	065b      	lsls	r3, r3, #25
 80080b2:	f53f af1f 	bmi.w	8007ef4 <_vfiprintf_r+0x44>
 80080b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80080b8:	e71e      	b.n	8007ef8 <_vfiprintf_r+0x48>
 80080ba:	ab03      	add	r3, sp, #12
 80080bc:	9300      	str	r3, [sp, #0]
 80080be:	462a      	mov	r2, r5
 80080c0:	4b05      	ldr	r3, [pc, #20]	@ (80080d8 <_vfiprintf_r+0x228>)
 80080c2:	a904      	add	r1, sp, #16
 80080c4:	4630      	mov	r0, r6
 80080c6:	f7ff fc8f 	bl	80079e8 <_printf_i>
 80080ca:	e7e4      	b.n	8008096 <_vfiprintf_r+0x1e6>
 80080cc:	08008519 	.word	0x08008519
 80080d0:	08008523 	.word	0x08008523
 80080d4:	00000000 	.word	0x00000000
 80080d8:	08007e8d 	.word	0x08007e8d
 80080dc:	0800851f 	.word	0x0800851f

080080e0 <__swbuf_r>:
 80080e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080e2:	460e      	mov	r6, r1
 80080e4:	4614      	mov	r4, r2
 80080e6:	4605      	mov	r5, r0
 80080e8:	b118      	cbz	r0, 80080f2 <__swbuf_r+0x12>
 80080ea:	6a03      	ldr	r3, [r0, #32]
 80080ec:	b90b      	cbnz	r3, 80080f2 <__swbuf_r+0x12>
 80080ee:	f7fe ffef 	bl	80070d0 <__sinit>
 80080f2:	69a3      	ldr	r3, [r4, #24]
 80080f4:	60a3      	str	r3, [r4, #8]
 80080f6:	89a3      	ldrh	r3, [r4, #12]
 80080f8:	071a      	lsls	r2, r3, #28
 80080fa:	d501      	bpl.n	8008100 <__swbuf_r+0x20>
 80080fc:	6923      	ldr	r3, [r4, #16]
 80080fe:	b943      	cbnz	r3, 8008112 <__swbuf_r+0x32>
 8008100:	4621      	mov	r1, r4
 8008102:	4628      	mov	r0, r5
 8008104:	f000 f82a 	bl	800815c <__swsetup_r>
 8008108:	b118      	cbz	r0, 8008112 <__swbuf_r+0x32>
 800810a:	f04f 37ff 	mov.w	r7, #4294967295
 800810e:	4638      	mov	r0, r7
 8008110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008112:	6823      	ldr	r3, [r4, #0]
 8008114:	6922      	ldr	r2, [r4, #16]
 8008116:	1a98      	subs	r0, r3, r2
 8008118:	6963      	ldr	r3, [r4, #20]
 800811a:	b2f6      	uxtb	r6, r6
 800811c:	4283      	cmp	r3, r0
 800811e:	4637      	mov	r7, r6
 8008120:	dc05      	bgt.n	800812e <__swbuf_r+0x4e>
 8008122:	4621      	mov	r1, r4
 8008124:	4628      	mov	r0, r5
 8008126:	f7ff fe01 	bl	8007d2c <_fflush_r>
 800812a:	2800      	cmp	r0, #0
 800812c:	d1ed      	bne.n	800810a <__swbuf_r+0x2a>
 800812e:	68a3      	ldr	r3, [r4, #8]
 8008130:	3b01      	subs	r3, #1
 8008132:	60a3      	str	r3, [r4, #8]
 8008134:	6823      	ldr	r3, [r4, #0]
 8008136:	1c5a      	adds	r2, r3, #1
 8008138:	6022      	str	r2, [r4, #0]
 800813a:	701e      	strb	r6, [r3, #0]
 800813c:	6962      	ldr	r2, [r4, #20]
 800813e:	1c43      	adds	r3, r0, #1
 8008140:	429a      	cmp	r2, r3
 8008142:	d004      	beq.n	800814e <__swbuf_r+0x6e>
 8008144:	89a3      	ldrh	r3, [r4, #12]
 8008146:	07db      	lsls	r3, r3, #31
 8008148:	d5e1      	bpl.n	800810e <__swbuf_r+0x2e>
 800814a:	2e0a      	cmp	r6, #10
 800814c:	d1df      	bne.n	800810e <__swbuf_r+0x2e>
 800814e:	4621      	mov	r1, r4
 8008150:	4628      	mov	r0, r5
 8008152:	f7ff fdeb 	bl	8007d2c <_fflush_r>
 8008156:	2800      	cmp	r0, #0
 8008158:	d0d9      	beq.n	800810e <__swbuf_r+0x2e>
 800815a:	e7d6      	b.n	800810a <__swbuf_r+0x2a>

0800815c <__swsetup_r>:
 800815c:	b538      	push	{r3, r4, r5, lr}
 800815e:	4b29      	ldr	r3, [pc, #164]	@ (8008204 <__swsetup_r+0xa8>)
 8008160:	4605      	mov	r5, r0
 8008162:	6818      	ldr	r0, [r3, #0]
 8008164:	460c      	mov	r4, r1
 8008166:	b118      	cbz	r0, 8008170 <__swsetup_r+0x14>
 8008168:	6a03      	ldr	r3, [r0, #32]
 800816a:	b90b      	cbnz	r3, 8008170 <__swsetup_r+0x14>
 800816c:	f7fe ffb0 	bl	80070d0 <__sinit>
 8008170:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008174:	0719      	lsls	r1, r3, #28
 8008176:	d422      	bmi.n	80081be <__swsetup_r+0x62>
 8008178:	06da      	lsls	r2, r3, #27
 800817a:	d407      	bmi.n	800818c <__swsetup_r+0x30>
 800817c:	2209      	movs	r2, #9
 800817e:	602a      	str	r2, [r5, #0]
 8008180:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008184:	81a3      	strh	r3, [r4, #12]
 8008186:	f04f 30ff 	mov.w	r0, #4294967295
 800818a:	e033      	b.n	80081f4 <__swsetup_r+0x98>
 800818c:	0758      	lsls	r0, r3, #29
 800818e:	d512      	bpl.n	80081b6 <__swsetup_r+0x5a>
 8008190:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008192:	b141      	cbz	r1, 80081a6 <__swsetup_r+0x4a>
 8008194:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008198:	4299      	cmp	r1, r3
 800819a:	d002      	beq.n	80081a2 <__swsetup_r+0x46>
 800819c:	4628      	mov	r0, r5
 800819e:	f7ff f95d 	bl	800745c <_free_r>
 80081a2:	2300      	movs	r3, #0
 80081a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80081a6:	89a3      	ldrh	r3, [r4, #12]
 80081a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80081ac:	81a3      	strh	r3, [r4, #12]
 80081ae:	2300      	movs	r3, #0
 80081b0:	6063      	str	r3, [r4, #4]
 80081b2:	6923      	ldr	r3, [r4, #16]
 80081b4:	6023      	str	r3, [r4, #0]
 80081b6:	89a3      	ldrh	r3, [r4, #12]
 80081b8:	f043 0308 	orr.w	r3, r3, #8
 80081bc:	81a3      	strh	r3, [r4, #12]
 80081be:	6923      	ldr	r3, [r4, #16]
 80081c0:	b94b      	cbnz	r3, 80081d6 <__swsetup_r+0x7a>
 80081c2:	89a3      	ldrh	r3, [r4, #12]
 80081c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80081c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081cc:	d003      	beq.n	80081d6 <__swsetup_r+0x7a>
 80081ce:	4621      	mov	r1, r4
 80081d0:	4628      	mov	r0, r5
 80081d2:	f000 f88b 	bl	80082ec <__smakebuf_r>
 80081d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081da:	f013 0201 	ands.w	r2, r3, #1
 80081de:	d00a      	beq.n	80081f6 <__swsetup_r+0x9a>
 80081e0:	2200      	movs	r2, #0
 80081e2:	60a2      	str	r2, [r4, #8]
 80081e4:	6962      	ldr	r2, [r4, #20]
 80081e6:	4252      	negs	r2, r2
 80081e8:	61a2      	str	r2, [r4, #24]
 80081ea:	6922      	ldr	r2, [r4, #16]
 80081ec:	b942      	cbnz	r2, 8008200 <__swsetup_r+0xa4>
 80081ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80081f2:	d1c5      	bne.n	8008180 <__swsetup_r+0x24>
 80081f4:	bd38      	pop	{r3, r4, r5, pc}
 80081f6:	0799      	lsls	r1, r3, #30
 80081f8:	bf58      	it	pl
 80081fa:	6962      	ldrpl	r2, [r4, #20]
 80081fc:	60a2      	str	r2, [r4, #8]
 80081fe:	e7f4      	b.n	80081ea <__swsetup_r+0x8e>
 8008200:	2000      	movs	r0, #0
 8008202:	e7f7      	b.n	80081f4 <__swsetup_r+0x98>
 8008204:	2000001c 	.word	0x2000001c

08008208 <_raise_r>:
 8008208:	291f      	cmp	r1, #31
 800820a:	b538      	push	{r3, r4, r5, lr}
 800820c:	4605      	mov	r5, r0
 800820e:	460c      	mov	r4, r1
 8008210:	d904      	bls.n	800821c <_raise_r+0x14>
 8008212:	2316      	movs	r3, #22
 8008214:	6003      	str	r3, [r0, #0]
 8008216:	f04f 30ff 	mov.w	r0, #4294967295
 800821a:	bd38      	pop	{r3, r4, r5, pc}
 800821c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800821e:	b112      	cbz	r2, 8008226 <_raise_r+0x1e>
 8008220:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008224:	b94b      	cbnz	r3, 800823a <_raise_r+0x32>
 8008226:	4628      	mov	r0, r5
 8008228:	f000 f830 	bl	800828c <_getpid_r>
 800822c:	4622      	mov	r2, r4
 800822e:	4601      	mov	r1, r0
 8008230:	4628      	mov	r0, r5
 8008232:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008236:	f000 b817 	b.w	8008268 <_kill_r>
 800823a:	2b01      	cmp	r3, #1
 800823c:	d00a      	beq.n	8008254 <_raise_r+0x4c>
 800823e:	1c59      	adds	r1, r3, #1
 8008240:	d103      	bne.n	800824a <_raise_r+0x42>
 8008242:	2316      	movs	r3, #22
 8008244:	6003      	str	r3, [r0, #0]
 8008246:	2001      	movs	r0, #1
 8008248:	e7e7      	b.n	800821a <_raise_r+0x12>
 800824a:	2100      	movs	r1, #0
 800824c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008250:	4620      	mov	r0, r4
 8008252:	4798      	blx	r3
 8008254:	2000      	movs	r0, #0
 8008256:	e7e0      	b.n	800821a <_raise_r+0x12>

08008258 <raise>:
 8008258:	4b02      	ldr	r3, [pc, #8]	@ (8008264 <raise+0xc>)
 800825a:	4601      	mov	r1, r0
 800825c:	6818      	ldr	r0, [r3, #0]
 800825e:	f7ff bfd3 	b.w	8008208 <_raise_r>
 8008262:	bf00      	nop
 8008264:	2000001c 	.word	0x2000001c

08008268 <_kill_r>:
 8008268:	b538      	push	{r3, r4, r5, lr}
 800826a:	4d07      	ldr	r5, [pc, #28]	@ (8008288 <_kill_r+0x20>)
 800826c:	2300      	movs	r3, #0
 800826e:	4604      	mov	r4, r0
 8008270:	4608      	mov	r0, r1
 8008272:	4611      	mov	r1, r2
 8008274:	602b      	str	r3, [r5, #0]
 8008276:	f7f8 fe32 	bl	8000ede <_kill>
 800827a:	1c43      	adds	r3, r0, #1
 800827c:	d102      	bne.n	8008284 <_kill_r+0x1c>
 800827e:	682b      	ldr	r3, [r5, #0]
 8008280:	b103      	cbz	r3, 8008284 <_kill_r+0x1c>
 8008282:	6023      	str	r3, [r4, #0]
 8008284:	bd38      	pop	{r3, r4, r5, pc}
 8008286:	bf00      	nop
 8008288:	20004ce0 	.word	0x20004ce0

0800828c <_getpid_r>:
 800828c:	f7f8 be1f 	b.w	8000ece <_getpid>

08008290 <_malloc_usable_size_r>:
 8008290:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008294:	1f18      	subs	r0, r3, #4
 8008296:	2b00      	cmp	r3, #0
 8008298:	bfbc      	itt	lt
 800829a:	580b      	ldrlt	r3, [r1, r0]
 800829c:	18c0      	addlt	r0, r0, r3
 800829e:	4770      	bx	lr

080082a0 <__swhatbuf_r>:
 80082a0:	b570      	push	{r4, r5, r6, lr}
 80082a2:	460c      	mov	r4, r1
 80082a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082a8:	2900      	cmp	r1, #0
 80082aa:	b096      	sub	sp, #88	@ 0x58
 80082ac:	4615      	mov	r5, r2
 80082ae:	461e      	mov	r6, r3
 80082b0:	da0d      	bge.n	80082ce <__swhatbuf_r+0x2e>
 80082b2:	89a3      	ldrh	r3, [r4, #12]
 80082b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80082b8:	f04f 0100 	mov.w	r1, #0
 80082bc:	bf14      	ite	ne
 80082be:	2340      	movne	r3, #64	@ 0x40
 80082c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80082c4:	2000      	movs	r0, #0
 80082c6:	6031      	str	r1, [r6, #0]
 80082c8:	602b      	str	r3, [r5, #0]
 80082ca:	b016      	add	sp, #88	@ 0x58
 80082cc:	bd70      	pop	{r4, r5, r6, pc}
 80082ce:	466a      	mov	r2, sp
 80082d0:	f000 f848 	bl	8008364 <_fstat_r>
 80082d4:	2800      	cmp	r0, #0
 80082d6:	dbec      	blt.n	80082b2 <__swhatbuf_r+0x12>
 80082d8:	9901      	ldr	r1, [sp, #4]
 80082da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80082de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80082e2:	4259      	negs	r1, r3
 80082e4:	4159      	adcs	r1, r3
 80082e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80082ea:	e7eb      	b.n	80082c4 <__swhatbuf_r+0x24>

080082ec <__smakebuf_r>:
 80082ec:	898b      	ldrh	r3, [r1, #12]
 80082ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082f0:	079d      	lsls	r5, r3, #30
 80082f2:	4606      	mov	r6, r0
 80082f4:	460c      	mov	r4, r1
 80082f6:	d507      	bpl.n	8008308 <__smakebuf_r+0x1c>
 80082f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80082fc:	6023      	str	r3, [r4, #0]
 80082fe:	6123      	str	r3, [r4, #16]
 8008300:	2301      	movs	r3, #1
 8008302:	6163      	str	r3, [r4, #20]
 8008304:	b003      	add	sp, #12
 8008306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008308:	ab01      	add	r3, sp, #4
 800830a:	466a      	mov	r2, sp
 800830c:	f7ff ffc8 	bl	80082a0 <__swhatbuf_r>
 8008310:	9f00      	ldr	r7, [sp, #0]
 8008312:	4605      	mov	r5, r0
 8008314:	4639      	mov	r1, r7
 8008316:	4630      	mov	r0, r6
 8008318:	f7ff f914 	bl	8007544 <_malloc_r>
 800831c:	b948      	cbnz	r0, 8008332 <__smakebuf_r+0x46>
 800831e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008322:	059a      	lsls	r2, r3, #22
 8008324:	d4ee      	bmi.n	8008304 <__smakebuf_r+0x18>
 8008326:	f023 0303 	bic.w	r3, r3, #3
 800832a:	f043 0302 	orr.w	r3, r3, #2
 800832e:	81a3      	strh	r3, [r4, #12]
 8008330:	e7e2      	b.n	80082f8 <__smakebuf_r+0xc>
 8008332:	89a3      	ldrh	r3, [r4, #12]
 8008334:	6020      	str	r0, [r4, #0]
 8008336:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800833a:	81a3      	strh	r3, [r4, #12]
 800833c:	9b01      	ldr	r3, [sp, #4]
 800833e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008342:	b15b      	cbz	r3, 800835c <__smakebuf_r+0x70>
 8008344:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008348:	4630      	mov	r0, r6
 800834a:	f000 f81d 	bl	8008388 <_isatty_r>
 800834e:	b128      	cbz	r0, 800835c <__smakebuf_r+0x70>
 8008350:	89a3      	ldrh	r3, [r4, #12]
 8008352:	f023 0303 	bic.w	r3, r3, #3
 8008356:	f043 0301 	orr.w	r3, r3, #1
 800835a:	81a3      	strh	r3, [r4, #12]
 800835c:	89a3      	ldrh	r3, [r4, #12]
 800835e:	431d      	orrs	r5, r3
 8008360:	81a5      	strh	r5, [r4, #12]
 8008362:	e7cf      	b.n	8008304 <__smakebuf_r+0x18>

08008364 <_fstat_r>:
 8008364:	b538      	push	{r3, r4, r5, lr}
 8008366:	4d07      	ldr	r5, [pc, #28]	@ (8008384 <_fstat_r+0x20>)
 8008368:	2300      	movs	r3, #0
 800836a:	4604      	mov	r4, r0
 800836c:	4608      	mov	r0, r1
 800836e:	4611      	mov	r1, r2
 8008370:	602b      	str	r3, [r5, #0]
 8008372:	f7f8 fe14 	bl	8000f9e <_fstat>
 8008376:	1c43      	adds	r3, r0, #1
 8008378:	d102      	bne.n	8008380 <_fstat_r+0x1c>
 800837a:	682b      	ldr	r3, [r5, #0]
 800837c:	b103      	cbz	r3, 8008380 <_fstat_r+0x1c>
 800837e:	6023      	str	r3, [r4, #0]
 8008380:	bd38      	pop	{r3, r4, r5, pc}
 8008382:	bf00      	nop
 8008384:	20004ce0 	.word	0x20004ce0

08008388 <_isatty_r>:
 8008388:	b538      	push	{r3, r4, r5, lr}
 800838a:	4d06      	ldr	r5, [pc, #24]	@ (80083a4 <_isatty_r+0x1c>)
 800838c:	2300      	movs	r3, #0
 800838e:	4604      	mov	r4, r0
 8008390:	4608      	mov	r0, r1
 8008392:	602b      	str	r3, [r5, #0]
 8008394:	f7f8 fe13 	bl	8000fbe <_isatty>
 8008398:	1c43      	adds	r3, r0, #1
 800839a:	d102      	bne.n	80083a2 <_isatty_r+0x1a>
 800839c:	682b      	ldr	r3, [r5, #0]
 800839e:	b103      	cbz	r3, 80083a2 <_isatty_r+0x1a>
 80083a0:	6023      	str	r3, [r4, #0]
 80083a2:	bd38      	pop	{r3, r4, r5, pc}
 80083a4:	20004ce0 	.word	0x20004ce0

080083a8 <_init>:
 80083a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083aa:	bf00      	nop
 80083ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ae:	bc08      	pop	{r3}
 80083b0:	469e      	mov	lr, r3
 80083b2:	4770      	bx	lr

080083b4 <_fini>:
 80083b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083b6:	bf00      	nop
 80083b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ba:	bc08      	pop	{r3}
 80083bc:	469e      	mov	lr, r3
 80083be:	4770      	bx	lr
